// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class arabic_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('\u0640', -1, 1),
         Among('\u064B', -1, 1),
         Among('\u064C', -1, 1),
         Among('\u064D', -1, 1),
         Among('\u064E', -1, 1),
         Among('\u064F', -1, 1),
         Among('\u0650', -1, 1),
         Among('\u0651', -1, 1),
         Among('\u0652', -1, 1),
         Among('\u0660', -1, 2),
         Among('\u0661', -1, 3),
         Among('\u0662', -1, 4),
         Among('\u0663', -1, 5),
         Among('\u0664', -1, 6),
         Among('\u0665', -1, 7),
         Among('\u0666', -1, 8),
         Among('\u0667', -1, 9),
         Among('\u0668', -1, 10),
         Among('\u0669', -1, 11),
         Among('\uFE80', -1, 12),
         Among('\uFE81', -1, 16),
         Among('\uFE82', -1, 16),
         Among('\uFE83', -1, 13),
         Among('\uFE84', -1, 13),
         Among('\uFE85', -1, 17),
         Among('\uFE86', -1, 17),
         Among('\uFE87', -1, 14),
         Among('\uFE88', -1, 14),
         Among('\uFE89', -1, 15),
         Among('\uFE8A', -1, 15),
         Among('\uFE8B', -1, 15),
         Among('\uFE8C', -1, 15),
         Among('\uFE8D', -1, 18),
         Among('\uFE8E', -1, 18),
         Among('\uFE8F', -1, 19),
         Among('\uFE90', -1, 19),
         Among('\uFE91', -1, 19),
         Among('\uFE92', -1, 19),
         Among('\uFE93', -1, 20),
         Among('\uFE94', -1, 20),
         Among('\uFE95', -1, 21),
         Among('\uFE96', -1, 21),
         Among('\uFE97', -1, 21),
         Among('\uFE98', -1, 21),
         Among('\uFE99', -1, 22),
         Among('\uFE9A', -1, 22),
         Among('\uFE9B', -1, 22),
         Among('\uFE9C', -1, 22),
         Among('\uFE9D', -1, 23),
         Among('\uFE9E', -1, 23),
         Among('\uFE9F', -1, 23),
         Among('\uFEA0', -1, 23),
         Among('\uFEA1', -1, 24),
         Among('\uFEA2', -1, 24),
         Among('\uFEA3', -1, 24),
         Among('\uFEA4', -1, 24),
         Among('\uFEA5', -1, 25),
         Among('\uFEA6', -1, 25),
         Among('\uFEA7', -1, 25),
         Among('\uFEA8', -1, 25),
         Among('\uFEA9', -1, 26),
         Among('\uFEAA', -1, 26),
         Among('\uFEAB', -1, 27),
         Among('\uFEAC', -1, 27),
         Among('\uFEAD', -1, 28),
         Among('\uFEAE', -1, 28),
         Among('\uFEAF', -1, 29),
         Among('\uFEB0', -1, 29),
         Among('\uFEB1', -1, 30),
         Among('\uFEB2', -1, 30),
         Among('\uFEB3', -1, 30),
         Among('\uFEB4', -1, 30),
         Among('\uFEB5', -1, 31),
         Among('\uFEB6', -1, 31),
         Among('\uFEB7', -1, 31),
         Among('\uFEB8', -1, 31),
         Among('\uFEB9', -1, 32),
         Among('\uFEBA', -1, 32),
         Among('\uFEBB', -1, 32),
         Among('\uFEBC', -1, 32),
         Among('\uFEBD', -1, 33),
         Among('\uFEBE', -1, 33),
         Among('\uFEBF', -1, 33),
         Among('\uFEC0', -1, 33),
         Among('\uFEC1', -1, 34),
         Among('\uFEC2', -1, 34),
         Among('\uFEC3', -1, 34),
         Among('\uFEC4', -1, 34),
         Among('\uFEC5', -1, 35),
         Among('\uFEC6', -1, 35),
         Among('\uFEC7', -1, 35),
         Among('\uFEC8', -1, 35),
         Among('\uFEC9', -1, 36),
         Among('\uFECA', -1, 36),
         Among('\uFECB', -1, 36),
         Among('\uFECC', -1, 36),
         Among('\uFECD', -1, 37),
         Among('\uFECE', -1, 37),
         Among('\uFECF', -1, 37),
         Among('\uFED0', -1, 37),
         Among('\uFED1', -1, 38),
         Among('\uFED2', -1, 38),
         Among('\uFED3', -1, 38),
         Among('\uFED4', -1, 38),
         Among('\uFED5', -1, 39),
         Among('\uFED6', -1, 39),
         Among('\uFED7', -1, 39),
         Among('\uFED8', -1, 39),
         Among('\uFED9', -1, 40),
         Among('\uFEDA', -1, 40),
         Among('\uFEDB', -1, 40),
         Among('\uFEDC', -1, 40),
         Among('\uFEDD', -1, 41),
         Among('\uFEDE', -1, 41),
         Among('\uFEDF', -1, 41),
         Among('\uFEE0', -1, 41),
         Among('\uFEE1', -1, 42),
         Among('\uFEE2', -1, 42),
         Among('\uFEE3', -1, 42),
         Among('\uFEE4', -1, 42),
         Among('\uFEE5', -1, 43),
         Among('\uFEE6', -1, 43),
         Among('\uFEE7', -1, 43),
         Among('\uFEE8', -1, 43),
         Among('\uFEE9', -1, 44),
         Among('\uFEEA', -1, 44),
         Among('\uFEEB', -1, 44),
         Among('\uFEEC', -1, 44),
         Among('\uFEED', -1, 45),
         Among('\uFEEE', -1, 45),
         Among('\uFEEF', -1, 46),
         Among('\uFEF0', -1, 46),
         Among('\uFEF1', -1, 47),
         Among('\uFEF2', -1, 47),
         Among('\uFEF3', -1, 47),
         Among('\uFEF4', -1, 47),
         Among('\uFEF5', -1, 51),
         Among('\uFEF6', -1, 51),
         Among('\uFEF7', -1, 49),
         Among('\uFEF8', -1, 49),
         Among('\uFEF9', -1, 50),
         Among('\uFEFA', -1, 50),
         Among('\uFEFB', -1, 48),
         Among('\uFEFC', -1, 48)
    ];

    late final List<Among> a_1 = [
         Among('\u0622', -1, 1),
         Among('\u0623', -1, 1),
         Among('\u0624', -1, 1),
         Among('\u0625', -1, 1),
         Among('\u0626', -1, 1)
    ];

    late final List<Among> a_2 = [
         Among('\u0622', -1, 1),
         Among('\u0623', -1, 1),
         Among('\u0624', -1, 2),
         Among('\u0625', -1, 1),
         Among('\u0626', -1, 3)
    ];

    late final List<Among> a_3 = [
         Among('\u0627\u0644', -1, 2),
         Among('\u0628\u0627\u0644', -1, 1),
         Among('\u0643\u0627\u0644', -1, 1),
         Among('\u0644\u0644', -1, 2)
    ];

    late final List<Among> a_4 = [
         Among('\u0623\u0622', -1, 2),
         Among('\u0623\u0623', -1, 1),
         Among('\u0623\u0624', -1, 1),
         Among('\u0623\u0625', -1, 4),
         Among('\u0623\u0627', -1, 3)
    ];

    late final List<Among> a_5 = [
         Among('\u0641', -1, 1),
         Among('\u0648', -1, 1)
    ];

    late final List<Among> a_6 = [
         Among('\u0627\u0644', -1, 2),
         Among('\u0628\u0627\u0644', -1, 1),
         Among('\u0643\u0627\u0644', -1, 1),
         Among('\u0644\u0644', -1, 2)
    ];

    late final List<Among> a_7 = [
         Among('\u0628', -1, 1),
         Among('\u0628\u0627', 0, -1),
         Among('\u0628\u0628', 0, 2),
         Among('\u0643\u0643', -1, 3)
    ];

    late final List<Among> a_8 = [
         Among('\u0633\u0623', -1, 4),
         Among('\u0633\u062A', -1, 2),
         Among('\u0633\u0646', -1, 3),
         Among('\u0633\u064A', -1, 1)
    ];

    late final List<Among> a_9 = [
         Among('\u062A\u0633\u062A', -1, 1),
         Among('\u0646\u0633\u062A', -1, 1),
         Among('\u064A\u0633\u062A', -1, 1)
    ];

    late final List<Among> a_10 = [
         Among('\u0643\u0645\u0627', -1, 3),
         Among('\u0647\u0645\u0627', -1, 3),
         Among('\u0646\u0627', -1, 2),
         Among('\u0647\u0627', -1, 2),
         Among('\u0643', -1, 1),
         Among('\u0643\u0645', -1, 2),
         Among('\u0647\u0645', -1, 2),
         Among('\u0647\u0646', -1, 2),
         Among('\u0647', -1, 1),
         Among('\u064A', -1, 1)
    ];

    late final List<Among> a_11 = [
         Among('\u0646', -1, 1)
    ];

    late final List<Among> a_12 = [
         Among('\u0627', -1, 1),
         Among('\u0648', -1, 1),
         Among('\u064A', -1, 1)
    ];

    late final List<Among> a_13 = [
         Among('\u0627\u062A', -1, 1)
    ];

    late final List<Among> a_14 = [
         Among('\u062A', -1, 1)
    ];

    late final List<Among> a_15 = [
         Among('\u0629', -1, 1)
    ];

    late final List<Among> a_16 = [
         Among('\u064A', -1, 1)
    ];

    late final List<Among> a_17 = [
         Among('\u0643\u0645\u0627', -1, 3),
         Among('\u0647\u0645\u0627', -1, 3),
         Among('\u0646\u0627', -1, 2),
         Among('\u0647\u0627', -1, 2),
         Among('\u0643', -1, 1),
         Among('\u0643\u0645', -1, 2),
         Among('\u0647\u0645', -1, 2),
         Among('\u0643\u0646', -1, 2),
         Among('\u0647\u0646', -1, 2),
         Among('\u0647', -1, 1),
         Among('\u0643\u0645\u0648', -1, 3),
         Among('\u0646\u064A', -1, 2)
    ];

    late final List<Among> a_18 = [
         Among('\u0627', -1, 1),
         Among('\u062A\u0627', 0, 2),
         Among('\u062A\u0645\u0627', 0, 4),
         Among('\u0646\u0627', 0, 2),
         Among('\u062A', -1, 1),
         Among('\u0646', -1, 1),
         Among('\u0627\u0646', 5, 3),
         Among('\u062A\u0646', 5, 2),
         Among('\u0648\u0646', 5, 3),
         Among('\u064A\u0646', 5, 3),
         Among('\u064A', -1, 1)
    ];

    late final List<Among> a_19 = [
         Among('\u0648\u0627', -1, 1),
         Among('\u062A\u0645', -1, 1)
    ];

    late final List<Among> a_20 = [
         Among('\u0648', -1, 1),
         Among('\u062A\u0645\u0648', 0, 2)
    ];

    late final List<Among> a_21 = [
         Among('\u0649', -1, 1)
    ];

    late bool B_is_defined;
    late bool B_is_verb;
    late bool B_is_noun;


    bool r_Normalize_pre() {
        var among_var;
        var v_1 = cursor;
        try {//lab0
            while(true)
            {
                var v_2 = cursor;
                try {//lab1
                    try {//lab2
                        var v_3 = cursor;
                        try {//lab3
                            bra = cursor;
                            among_var = find_among(a_0);
                            if (among_var == 0)
                            {
                                throw BreakLab3();
                            }
                            ket = cursor;
                            switch (among_var) {
                                case 1:
                                    slice_del();
                                    break;
                                case 2:
                                    slice_from('0');
                                    break;
                                case 3:
                                    slice_from('1');
                                    break;
                                case 4:
                                    slice_from('2');
                                    break;
                                case 5:
                                    slice_from('3');
                                    break;
                                case 6:
                                    slice_from('4');
                                    break;
                                case 7:
                                    slice_from('5');
                                    break;
                                case 8:
                                    slice_from('6');
                                    break;
                                case 9:
                                    slice_from('7');
                                    break;
                                case 10:
                                    slice_from('8');
                                    break;
                                case 11:
                                    slice_from('9');
                                    break;
                                case 12:
                                    slice_from('\u0621');
                                    break;
                                case 13:
                                    slice_from('\u0623');
                                    break;
                                case 14:
                                    slice_from('\u0625');
                                    break;
                                case 15:
                                    slice_from('\u0626');
                                    break;
                                case 16:
                                    slice_from('\u0622');
                                    break;
                                case 17:
                                    slice_from('\u0624');
                                    break;
                                case 18:
                                    slice_from('\u0627');
                                    break;
                                case 19:
                                    slice_from('\u0628');
                                    break;
                                case 20:
                                    slice_from('\u0629');
                                    break;
                                case 21:
                                    slice_from('\u062A');
                                    break;
                                case 22:
                                    slice_from('\u062B');
                                    break;
                                case 23:
                                    slice_from('\u062C');
                                    break;
                                case 24:
                                    slice_from('\u062D');
                                    break;
                                case 25:
                                    slice_from('\u062E');
                                    break;
                                case 26:
                                    slice_from('\u062F');
                                    break;
                                case 27:
                                    slice_from('\u0630');
                                    break;
                                case 28:
                                    slice_from('\u0631');
                                    break;
                                case 29:
                                    slice_from('\u0632');
                                    break;
                                case 30:
                                    slice_from('\u0633');
                                    break;
                                case 31:
                                    slice_from('\u0634');
                                    break;
                                case 32:
                                    slice_from('\u0635');
                                    break;
                                case 33:
                                    slice_from('\u0636');
                                    break;
                                case 34:
                                    slice_from('\u0637');
                                    break;
                                case 35:
                                    slice_from('\u0638');
                                    break;
                                case 36:
                                    slice_from('\u0639');
                                    break;
                                case 37:
                                    slice_from('\u063A');
                                    break;
                                case 38:
                                    slice_from('\u0641');
                                    break;
                                case 39:
                                    slice_from('\u0642');
                                    break;
                                case 40:
                                    slice_from('\u0643');
                                    break;
                                case 41:
                                    slice_from('\u0644');
                                    break;
                                case 42:
                                    slice_from('\u0645');
                                    break;
                                case 43:
                                    slice_from('\u0646');
                                    break;
                                case 44:
                                    slice_from('\u0647');
                                    break;
                                case 45:
                                    slice_from('\u0648');
                                    break;
                                case 46:
                                    slice_from('\u0649');
                                    break;
                                case 47:
                                    slice_from('\u064A');
                                    break;
                                case 48:
                                    slice_from('\u0644\u0627');
                                    break;
                                case 49:
                                    slice_from('\u0644\u0623');
                                    break;
                                case 50:
                                    slice_from('\u0644\u0625');
                                    break;
                                case 51:
                                    slice_from('\u0644\u0622');
                                    break;
                            }
                            throw BreakLab2();
                        } on BreakLab3 catch(_) {}
                        cursor = v_3;
                        if (cursor >= limit)
                        {
                            throw BreakLab1();
                        }
                        cursor++;
                    } on BreakLab2 catch(_) {}
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        return true;
    }

    bool r_Normalize_post() {
        var among_var;
        var v_1 = cursor;
        try {//lab0
            limit_backward = cursor;
            cursor = limit;
            ket = cursor;
            if (find_among_b(a_1) == 0)
            {
                throw BreakLab0();
            }
            bra = cursor;
            slice_from('\u0621');
            cursor = limit_backward;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_2 = cursor;
        try {//lab1
            while(true)
            {
                var v_3 = cursor;
                try {//lab2
                    try {//lab3
                        var v_4 = cursor;
                        try {//lab4
                            bra = cursor;
                            among_var = find_among(a_2);
                            if (among_var == 0)
                            {
                                throw BreakLab4();
                            }
                            ket = cursor;
                            switch (among_var) {
                                case 1:
                                    slice_from('\u0627');
                                    break;
                                case 2:
                                    slice_from('\u0648');
                                    break;
                                case 3:
                                    slice_from('\u064A');
                                    break;
                            }
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = v_4;
                        if (cursor >= limit)
                        {
                            throw BreakLab2();
                        }
                        cursor++;
                    } on BreakLab3 catch(_) {}
                    continue;
                } on BreakLab2 catch(_) {}
                cursor = v_3;
                break;
            }
        } on BreakLab1 catch(_) {}
        cursor = v_2;
        return true;
    }

    bool r_Checks1() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_3);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length > 4))
                {
                    return false;
                }
                B_is_noun = true;
                B_is_verb = false;
                B_is_defined = true;
                break;
            case 2:
                if (!(current.length > 3))
                {
                    return false;
                }
                B_is_noun = true;
                B_is_verb = false;
                B_is_defined = true;
                break;
        }
        return true;
    }

    bool r_Prefix_Step1() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_4);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0623');
                break;
            case 2:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0622');
                break;
            case 3:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0627');
                break;
            case 4:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0625');
                break;
        }
        return true;
    }

    bool r_Prefix_Step2() {
        bra = cursor;
        if (find_among(a_5) == 0)
        {
            return false;
        }
        ket = cursor;
        if (!(current.length > 3))
        {
            return false;
        }
        {
            var v_1 = cursor;
            try {//lab0
                if (!(eq_s('\u0627')))
                {
                    throw BreakLab0();
                }
                return false;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
        }
        slice_del();
        return true;
    }

    bool r_Prefix_Step3a_Noun() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_6);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length > 5))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length > 4))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_Prefix_Step3b_Noun() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_7);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0628');
                break;
            case 3:
                if (!(current.length > 3))
                {
                    return false;
                }
                slice_from('\u0643');
                break;
        }
        return true;
    }

    bool r_Prefix_Step3_Verb() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_8);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length > 4))
                {
                    return false;
                }
                slice_from('\u064A');
                break;
            case 2:
                if (!(current.length > 4))
                {
                    return false;
                }
                slice_from('\u062A');
                break;
            case 3:
                if (!(current.length > 4))
                {
                    return false;
                }
                slice_from('\u0646');
                break;
            case 4:
                if (!(current.length > 4))
                {
                    return false;
                }
                slice_from('\u0623');
                break;
        }
        return true;
    }

    bool r_Prefix_Step4_Verb() {
        bra = cursor;
        if (find_among(a_9) == 0)
        {
            return false;
        }
        ket = cursor;
        if (!(current.length > 4))
        {
            return false;
        }
        B_is_verb = true;
        B_is_noun = false;
        slice_from('\u0627\u0633\u062A');
        return true;
    }

    bool r_Suffix_Noun_Step1a() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_10);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length >= 4))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length >= 5))
                {
                    return false;
                }
                slice_del();
                break;
            case 3:
                if (!(current.length >= 6))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_Suffix_Noun_Step1b() {
        ket = cursor;
        if (find_among_b(a_11) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length > 5))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Noun_Step2a() {
        ket = cursor;
        if (find_among_b(a_12) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length > 4))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Noun_Step2b() {
        ket = cursor;
        if (find_among_b(a_13) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length >= 5))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Noun_Step2c1() {
        ket = cursor;
        if (find_among_b(a_14) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length >= 4))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Noun_Step2c2() {
        ket = cursor;
        if (find_among_b(a_15) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length >= 4))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Noun_Step3() {
        ket = cursor;
        if (find_among_b(a_16) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length >= 3))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Verb_Step1() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_17);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length >= 4))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length >= 5))
                {
                    return false;
                }
                slice_del();
                break;
            case 3:
                if (!(current.length >= 6))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_Suffix_Verb_Step2a() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_18);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length >= 4))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length >= 5))
                {
                    return false;
                }
                slice_del();
                break;
            case 3:
                if (!(current.length > 5))
                {
                    return false;
                }
                slice_del();
                break;
            case 4:
                if (!(current.length >= 6))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_Suffix_Verb_Step2b() {
        ket = cursor;
        if (find_among_b(a_19) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!(current.length >= 5))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_Suffix_Verb_Step2c() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_20);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!(current.length >= 4))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(current.length >= 6))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_Suffix_All_alef_maqsura() {
        ket = cursor;
        if (find_among_b(a_21) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_from('\u064A');
        return true;
    }

    bool stem() {
        B_is_noun = true;
        B_is_verb = true;
        B_is_defined = false;
        var v_1 = cursor;
        r_Checks1();
        cursor = v_1;
        r_Normalize_pre();
        limit_backward = cursor;
        cursor = limit;
        var v_3 = limit - cursor;
        try {//lab0
            try {//lab1
                var v_4 = limit - cursor;
                try {//lab2
                    if (!(B_is_verb))
                    {
                        throw BreakLab2();
                    }
                    try {//lab3
                        var v_5 = limit - cursor;
                        try {//lab4
                            {
                                var v_6 = 1;
                                while(true)
                                {
                                    var v_7 = limit - cursor;
                                    try {//lab5
                                        if (!r_Suffix_Verb_Step1())
                                        {
                                            throw BreakLab5();
                                        }
                                        v_6--;
                                        continue;
                                    } on BreakLab5 catch(_) {}
                                    cursor = limit - v_7;
                                    break;
                                }
                                if (v_6 > 0)
                                {
                                    throw BreakLab4();
                                }
                            }
                            try {//lab6
                                var v_8 = limit - cursor;
                                try {//lab7
                                    if (!r_Suffix_Verb_Step2a())
                                    {
                                        throw BreakLab7();
                                    }
                                    throw BreakLab6();
                                } on BreakLab7 catch(_) {}
                                cursor = limit - v_8;
                                try {//lab8
                                    if (!r_Suffix_Verb_Step2c())
                                    {
                                        throw BreakLab8();
                                    }
                                    throw BreakLab6();
                                } on BreakLab8 catch(_) {}
                                cursor = limit - v_8;
                                if (cursor <= limit_backward)
                                {
                                    throw BreakLab4();
                                }
                                cursor--;
                            } on BreakLab6 catch(_) {}
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab9
                            if (!r_Suffix_Verb_Step2b())
                            {
                                throw BreakLab9();
                            }
                            throw BreakLab3();
                        } on BreakLab9 catch(_) {}
                        cursor = limit - v_5;
                        if (!r_Suffix_Verb_Step2a())
                        {
                            throw BreakLab2();
                        }
                    } on BreakLab3 catch(_) {}
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = limit - v_4;
                try {//lab10
                    if (!(B_is_noun))
                    {
                        throw BreakLab10();
                    }
                    var v_9 = limit - cursor;
                    try {//lab11
                        try {//lab12
                            var v_10 = limit - cursor;
                            try {//lab13
                                if (!r_Suffix_Noun_Step2c2())
                                {
                                    throw BreakLab13();
                                }
                                throw BreakLab12();
                            } on BreakLab13 catch(_) {}
                            cursor = limit - v_10;
                            try {//lab14
                                try {//lab15
                                    if (!(B_is_defined))
                                    {
                                        throw BreakLab15();
                                    }
                                    throw BreakLab14();
                                } on BreakLab15 catch(_) {}
                                if (!r_Suffix_Noun_Step1a())
                                {
                                    throw BreakLab14();
                                }
                                try {//lab16
                                    var v_12 = limit - cursor;
                                    try {//lab17
                                        if (!r_Suffix_Noun_Step2a())
                                        {
                                            throw BreakLab17();
                                        }
                                        throw BreakLab16();
                                    } on BreakLab17 catch(_) {}
                                    cursor = limit - v_12;
                                    try {//lab18
                                        if (!r_Suffix_Noun_Step2b())
                                        {
                                            throw BreakLab18();
                                        }
                                        throw BreakLab16();
                                    } on BreakLab18 catch(_) {}
                                    cursor = limit - v_12;
                                    try {//lab19
                                        if (!r_Suffix_Noun_Step2c1())
                                        {
                                            throw BreakLab19();
                                        }
                                        throw BreakLab16();
                                    } on BreakLab19 catch(_) {}
                                    cursor = limit - v_12;
                                    if (cursor <= limit_backward)
                                    {
                                        throw BreakLab14();
                                    }
                                    cursor--;
                                } on BreakLab16 catch(_) {}
                                throw BreakLab12();
                            } on BreakLab14 catch(_) {}
                            cursor = limit - v_10;
                            try {//lab20
                                if (!r_Suffix_Noun_Step1b())
                                {
                                    throw BreakLab20();
                                }
                                try {//lab21
                                    var v_13 = limit - cursor;
                                    try {//lab22
                                        if (!r_Suffix_Noun_Step2a())
                                        {
                                            throw BreakLab22();
                                        }
                                        throw BreakLab21();
                                    } on BreakLab22 catch(_) {}
                                    cursor = limit - v_13;
                                    try {//lab23
                                        if (!r_Suffix_Noun_Step2b())
                                        {
                                            throw BreakLab23();
                                        }
                                        throw BreakLab21();
                                    } on BreakLab23 catch(_) {}
                                    cursor = limit - v_13;
                                    if (!r_Suffix_Noun_Step2c1())
                                    {
                                        throw BreakLab20();
                                    }
                                } on BreakLab21 catch(_) {}
                                throw BreakLab12();
                            } on BreakLab20 catch(_) {}
                            cursor = limit - v_10;
                            try {//lab24
                                try {//lab25
                                    if (!(B_is_defined))
                                    {
                                        throw BreakLab25();
                                    }
                                    throw BreakLab24();
                                } on BreakLab25 catch(_) {}
                                if (!r_Suffix_Noun_Step2a())
                                {
                                    throw BreakLab24();
                                }
                                throw BreakLab12();
                            } on BreakLab24 catch(_) {}
                            cursor = limit - v_10;
                            if (!r_Suffix_Noun_Step2b())
                            {
                                cursor = limit - v_9;
                                throw BreakLab11();
                            }
                        } on BreakLab12 catch(_) {}
                    } on BreakLab11 catch(_) {}
                    if (!r_Suffix_Noun_Step3())
                    {
                        throw BreakLab10();
                    }
                    throw BreakLab1();
                } on BreakLab10 catch(_) {}
                cursor = limit - v_4;
                if (!r_Suffix_All_alef_maqsura())
                {
                    throw BreakLab0();
                }
            } on BreakLab1 catch(_) {}
        } on BreakLab0 catch(_) {}
        cursor = limit - v_3;
        cursor = limit_backward;
        var v_15 = cursor;
        try {//lab26
            var v_16 = cursor;
            try {//lab27
                if (!r_Prefix_Step1())
                {
                    cursor = v_16;
                    throw BreakLab27();
                }
            } on BreakLab27 catch(_) {}
            var v_17 = cursor;
            try {//lab28
                if (!r_Prefix_Step2())
                {
                    cursor = v_17;
                    throw BreakLab28();
                }
            } on BreakLab28 catch(_) {}
            try {//lab29
                var v_18 = cursor;
                try {//lab30
                    if (!r_Prefix_Step3a_Noun())
                    {
                        throw BreakLab30();
                    }
                    throw BreakLab29();
                } on BreakLab30 catch(_) {}
                cursor = v_18;
                try {//lab31
                    if (!(B_is_noun))
                    {
                        throw BreakLab31();
                    }
                    if (!r_Prefix_Step3b_Noun())
                    {
                        throw BreakLab31();
                    }
                    throw BreakLab29();
                } on BreakLab31 catch(_) {}
                cursor = v_18;
                if (!(B_is_verb))
                {
                    throw BreakLab26();
                }
                var v_19 = cursor;
                try {//lab32
                    if (!r_Prefix_Step3_Verb())
                    {
                        cursor = v_19;
                        throw BreakLab32();
                    }
                } on BreakLab32 catch(_) {}
                if (!r_Prefix_Step4_Verb())
                {
                    throw BreakLab26();
                }
            } on BreakLab29 catch(_) {}
        } on BreakLab26 catch(_) {}
        cursor = v_15;
        r_Normalize_post();
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
class BreakLab22{}
class BreakLab23{}
class BreakLab24{}
class BreakLab25{}
class BreakLab26{}
class BreakLab27{}
class BreakLab28{}
class BreakLab29{}
class BreakLab30{}
class BreakLab31{}
class BreakLab32{}
