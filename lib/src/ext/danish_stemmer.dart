// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class danish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('hed', -1, 1),
         Among('ethed', 0, 1),
         Among('ered', -1, 1),
         Among('e', -1, 1),
         Among('erede', 3, 1),
         Among('ende', 3, 1),
         Among('erende', 5, 1),
         Among('ene', 3, 1),
         Among('erne', 3, 1),
         Among('ere', 3, 1),
         Among('en', -1, 1),
         Among('heden', 10, 1),
         Among('eren', 10, 1),
         Among('er', -1, 1),
         Among('heder', 13, 1),
         Among('erer', 13, 1),
         Among('s', -1, 2),
         Among('heds', 16, 1),
         Among('es', 16, 1),
         Among('endes', 18, 1),
         Among('erendes', 19, 1),
         Among('enes', 18, 1),
         Among('ernes', 18, 1),
         Among('eres', 18, 1),
         Among('ens', 16, 1),
         Among('hedens', 24, 1),
         Among('erens', 24, 1),
         Among('ers', 16, 1),
         Among('ets', 16, 1),
         Among('erets', 28, 1),
         Among('et', -1, 1),
         Among('eret', 30, 1)
    ];

    late final List<Among> a_1 = [
         Among('gd', -1, -1),
         Among('dt', -1, -1),
         Among('gt', -1, -1),
         Among('kt', -1, -1)
    ];

    late final List<Among> a_2 = [
         Among('ig', -1, 1),
         Among('lig', 0, 1),
         Among('elig', 1, 1),
         Among('els', -1, 1),
         Among('l\u00F8st', -1, 2)
    ];

    static final List<int> g_c = [119, 223, 119, 1 ];

    static final List<int> g_v = [17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 128 ];

    static final List<int> g_s_ending = [239, 254, 42, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 ];

    late int I_x;
    late int I_p1;
    late String S_ch = '';


    bool r_mark_regions() {
        I_p1 = limit;
        var v_1 = cursor;
        {
            var c = cursor + 3;
            if (c > limit)
            {
                return false;
            }
            cursor = c;
        }
        I_x = cursor;
        cursor = v_1;
        try { //golab0
            while(true)             {
                var v_2 = cursor;
                try {//lab1
                    if (!(in_grouping(g_v, 97, 248)))
                    {
                        throw BreakLab1();
                    }
                    cursor = v_2;
                    throw BreakLab0();
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab0 catch(_) {}
        try { //golab2
            while(true)             {
                try {//lab3
                    if (!(out_grouping(g_v, 97, 248)))
                    {
                        throw BreakLab3();
                    }
                    throw BreakLab2();
                } on BreakLab3 catch(_) {}
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab2 catch(_) {}
        I_p1 = cursor;
        try {//lab4
            if (!(I_p1 < I_x))
            {
                throw BreakLab4();
            }
            I_p1 = I_x;
        } on BreakLab4 catch(_) {}
        return true;
    }

    bool r_main_suffix() {
        var among_var;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        among_var = find_among_b(a_0);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                if (!(in_grouping_b(g_s_ending, 97, 229)))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_consonant_pair() {
        var v_1 = limit - cursor;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_3 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            limit_backward = v_3;
            return false;
        }
        bra = cursor;
        limit_backward = v_3;
        cursor = limit - v_1;
        if (cursor <= limit_backward)
        {
            return false;
        }
        cursor--;
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_other_suffix() {
        var among_var;
        var v_1 = limit - cursor;
        try {//lab0
            ket = cursor;
            if (!(eq_s_b('st')))
            {
                throw BreakLab0();
            }
            bra = cursor;
            if (!(eq_s_b('ig')))
            {
                throw BreakLab0();
            }
            slice_del();
        } on BreakLab0 catch(_) {}
        cursor = limit - v_1;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_3 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            limit_backward = v_3;
            return false;
        }
        bra = cursor;
        limit_backward = v_3;
        switch (among_var) {
            case 1:
                slice_del();
                var v_4 = limit - cursor;
                r_consonant_pair();
                cursor = limit - v_4;
                break;
            case 2:
                slice_from('l\u00F8s');
                break;
        }
        return true;
    }

    bool r_undouble() {
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        if (!(in_grouping_b(g_c, 98, 122)))
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        S_ch = slice_to(S_ch);
        limit_backward = v_2;
        if (!(eq_s_b(S_ch)))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_mark_regions();
        cursor = v_1;
        limit_backward = cursor;
        cursor = limit;
        var v_2 = limit - cursor;
        r_main_suffix();
        cursor = limit - v_2;
        var v_3 = limit - cursor;
        r_consonant_pair();
        cursor = limit - v_3;
        var v_4 = limit - cursor;
        r_other_suffix();
        cursor = limit - v_4;
        var v_5 = limit - cursor;
        r_undouble();
        cursor = limit - v_5;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
