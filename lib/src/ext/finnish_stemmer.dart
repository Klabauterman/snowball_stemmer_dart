// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class finnish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('pa', -1, 1),
         Among('sti', -1, 2),
         Among('kaan', -1, 1),
         Among('han', -1, 1),
         Among('kin', -1, 1),
         Among('h\u00E4n', -1, 1),
         Among('k\u00E4\u00E4n', -1, 1),
         Among('ko', -1, 1),
         Among('p\u00E4', -1, 1),
         Among('k\u00F6', -1, 1)
    ];

    late final List<Among> a_1 = [
         Among('lla', -1, -1),
         Among('na', -1, -1),
         Among('ssa', -1, -1),
         Among('ta', -1, -1),
         Among('lta', 3, -1),
         Among('sta', 3, -1)
    ];

    late final List<Among> a_2 = [
         Among('ll\u00E4', -1, -1),
         Among('n\u00E4', -1, -1),
         Among('ss\u00E4', -1, -1),
         Among('t\u00E4', -1, -1),
         Among('lt\u00E4', 3, -1),
         Among('st\u00E4', 3, -1)
    ];

    late final List<Among> a_3 = [
         Among('lle', -1, -1),
         Among('ine', -1, -1)
    ];

    late final List<Among> a_4 = [
         Among('nsa', -1, 3),
         Among('mme', -1, 3),
         Among('nne', -1, 3),
         Among('ni', -1, 2),
         Among('si', -1, 1),
         Among('an', -1, 4),
         Among('en', -1, 6),
         Among('\u00E4n', -1, 5),
         Among('ns\u00E4', -1, 3)
    ];

    late final List<Among> a_5 = [
         Among('aa', -1, -1),
         Among('ee', -1, -1),
         Among('ii', -1, -1),
         Among('oo', -1, -1),
         Among('uu', -1, -1),
         Among('\u00E4\u00E4', -1, -1),
         Among('\u00F6\u00F6', -1, -1)
    ];

    late final List<Among> a_6 = [
         Among('a', -1, 8),
         Among('lla', 0, -1),
         Among('na', 0, -1),
         Among('ssa', 0, -1),
         Among('ta', 0, -1),
         Among('lta', 4, -1),
         Among('sta', 4, -1),
         Among('tta', 4, 2),
         Among('lle', -1, -1),
         Among('ine', -1, -1),
         Among('ksi', -1, -1),
         Among('n', -1, 7),
         Among('han', 11, 1),
         Among('den', 11, -1, method: r_VI),
         Among('seen', 11, -1, method: r_LONG),
         Among('hen', 11, 2),
         Among('tten', 11, -1, method: r_VI),
         Among('hin', 11, 3),
         Among('siin', 11, -1, method: r_VI),
         Among('hon', 11, 4),
         Among('h\u00E4n', 11, 5),
         Among('h\u00F6n', 11, 6),
         Among('\u00E4', -1, 8),
         Among('ll\u00E4', 22, -1),
         Among('n\u00E4', 22, -1),
         Among('ss\u00E4', 22, -1),
         Among('t\u00E4', 22, -1),
         Among('lt\u00E4', 26, -1),
         Among('st\u00E4', 26, -1),
         Among('tt\u00E4', 26, 2)
    ];

    late final List<Among> a_7 = [
         Among('eja', -1, -1),
         Among('mma', -1, 1),
         Among('imma', 1, -1),
         Among('mpa', -1, 1),
         Among('impa', 3, -1),
         Among('mmi', -1, 1),
         Among('immi', 5, -1),
         Among('mpi', -1, 1),
         Among('impi', 7, -1),
         Among('ej\u00E4', -1, -1),
         Among('mm\u00E4', -1, 1),
         Among('imm\u00E4', 10, -1),
         Among('mp\u00E4', -1, 1),
         Among('imp\u00E4', 12, -1)
    ];

    late final List<Among> a_8 = [
         Among('i', -1, -1),
         Among('j', -1, -1)
    ];

    late final List<Among> a_9 = [
         Among('mma', -1, 1),
         Among('imma', 0, -1)
    ];

    static final List<int> g_AEI = [17, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8 ];

    static final List<int> g_C = [119, 223, 119, 1 ];

    static final List<int> g_V1 = [17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32 ];

    static final List<int> g_V2 = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32 ];

    static final List<int> g_particle_end = [17, 97, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32 ];

    late bool B_ending_removed;
    late String S_x = '';
    late int I_p2;
    late int I_p1;


    bool r_mark_regions() {
        I_p1 = limit;
        I_p2 = limit;
        try { //golab0
            while(true)             {
                var v_1 = cursor;
                try {//lab1
                    if (!(in_grouping(g_V1, 97, 246)))
                    {
                        throw BreakLab1();
                    }
                    cursor = v_1;
                    throw BreakLab0();
                } on BreakLab1 catch(_) {}
                cursor = v_1;
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab0 catch(_) {}
        try { //golab2
            while(true)             {
                try {//lab3
                    if (!(out_grouping(g_V1, 97, 246)))
                    {
                        throw BreakLab3();
                    }
                    throw BreakLab2();
                } on BreakLab3 catch(_) {}
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab2 catch(_) {}
        I_p1 = cursor;
        try { //golab4
            while(true)             {
                var v_3 = cursor;
                try {//lab5
                    if (!(in_grouping(g_V1, 97, 246)))
                    {
                        throw BreakLab5();
                    }
                    cursor = v_3;
                    throw BreakLab4();
                } on BreakLab5 catch(_) {}
                cursor = v_3;
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab4 catch(_) {}
        try { //golab6
            while(true)             {
                try {//lab7
                    if (!(out_grouping(g_V1, 97, 246)))
                    {
                        throw BreakLab7();
                    }
                    throw BreakLab6();
                } on BreakLab7 catch(_) {}
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab6 catch(_) {}
        I_p2 = cursor;
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_particle_etc() {
        var among_var;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        among_var = find_among_b(a_0);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                if (!(in_grouping_b(g_particle_end, 97, 246)))
                {
                    return false;
                }
                break;
            case 2:
                if (!r_R2())
                {
                    return false;
                }
                break;
        }
        slice_del();
        return true;
    }

    bool r_possessive() {
        var among_var;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        among_var = find_among_b(a_4);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                {
                    var v_3 = limit - cursor;
                    try {//lab0
                        if (!(eq_s_b('k')))
                        {
                            throw BreakLab0();
                        }
                        return false;
                    } on BreakLab0 catch(_) {}
                    cursor = limit - v_3;
                }
                slice_del();
                break;
            case 2:
                slice_del();
                ket = cursor;
                if (!(eq_s_b('kse')))
                {
                    return false;
                }
                bra = cursor;
                slice_from('ksi');
                break;
            case 3:
                slice_del();
                break;
            case 4:
                if (find_among_b(a_1) == 0)
                {
                    return false;
                }
                slice_del();
                break;
            case 5:
                if (find_among_b(a_2) == 0)
                {
                    return false;
                }
                slice_del();
                break;
            case 6:
                if (find_among_b(a_3) == 0)
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_LONG() {
        if (find_among_b(a_5) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_VI() {
        if (!(eq_s_b('i')))
        {
            return false;
        }
        if (!(in_grouping_b(g_V2, 97, 246)))
        {
            return false;
        }
        return true;
    }

    bool r_case_ending() {
        var among_var;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        among_var = find_among_b(a_6);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                if (!(eq_s_b('a')))
                {
                    return false;
                }
                break;
            case 2:
                if (!(eq_s_b('e')))
                {
                    return false;
                }
                break;
            case 3:
                if (!(eq_s_b('i')))
                {
                    return false;
                }
                break;
            case 4:
                if (!(eq_s_b('o')))
                {
                    return false;
                }
                break;
            case 5:
                if (!(eq_s_b('\u00E4')))
                {
                    return false;
                }
                break;
            case 6:
                if (!(eq_s_b('\u00F6')))
                {
                    return false;
                }
                break;
            case 7:
                var v_3 = limit - cursor;
                try {//lab0
                    var v_4 = limit - cursor;
                    try {//lab1
                        var v_5 = limit - cursor;
                        try {//lab2
                            if (!r_LONG())
                            {
                                throw BreakLab2();
                            }
                            throw BreakLab1();
                        } on BreakLab2 catch(_) {}
                        cursor = limit - v_5;
                        if (!(eq_s_b('ie')))
                        {
                            cursor = limit - v_3;
                            throw BreakLab0();
                        }
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_4;
                    if (cursor <= limit_backward)
                    {
                        cursor = limit - v_3;
                        throw BreakLab0();
                    }
                    cursor--;
                    bra = cursor;
                } on BreakLab0 catch(_) {}
                break;
            case 8:
                if (!(in_grouping_b(g_V1, 97, 246)))
                {
                    return false;
                }
                if (!(in_grouping_b(g_C, 98, 122)))
                {
                    return false;
                }
                break;
        }
        slice_del();
        B_ending_removed = true;
        return true;
    }

    bool r_other_endings() {
        var among_var;
        if (cursor < I_p2)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p2;
        ket = cursor;
        among_var = find_among_b(a_7);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                {
                    var v_3 = limit - cursor;
                    try {//lab0
                        if (!(eq_s_b('po')))
                        {
                            throw BreakLab0();
                        }
                        return false;
                    } on BreakLab0 catch(_) {}
                    cursor = limit - v_3;
                }
                break;
        }
        slice_del();
        return true;
    }

    bool r_i_plural() {
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        if (find_among_b(a_8) == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        slice_del();
        return true;
    }

    bool r_t_plural() {
        var among_var;
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        if (!(eq_s_b('t')))
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        var v_3 = limit - cursor;
        if (!(in_grouping_b(g_V1, 97, 246)))
        {
            limit_backward = v_2;
            return false;
        }
        cursor = limit - v_3;
        slice_del();
        limit_backward = v_2;
        if (cursor < I_p2)
        {
            return false;
        }
        var v_5 = limit_backward;
        limit_backward = I_p2;
        ket = cursor;
        among_var = find_among_b(a_9);
        if (among_var == 0)
        {
            limit_backward = v_5;
            return false;
        }
        bra = cursor;
        limit_backward = v_5;
        switch (among_var) {
            case 1:
                {
                    var v_6 = limit - cursor;
                    try {//lab0
                        if (!(eq_s_b('po')))
                        {
                            throw BreakLab0();
                        }
                        return false;
                    } on BreakLab0 catch(_) {}
                    cursor = limit - v_6;
                }
                break;
        }
        slice_del();
        return true;
    }

    bool r_tidy() {
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        var v_3 = limit - cursor;
        try {//lab0
            var v_4 = limit - cursor;
            if (!r_LONG())
            {
                throw BreakLab0();
            }
            cursor = limit - v_4;
            ket = cursor;
            if (cursor <= limit_backward)
            {
                throw BreakLab0();
            }
            cursor--;
            bra = cursor;
            slice_del();
        } on BreakLab0 catch(_) {}
        cursor = limit - v_3;
        var v_5 = limit - cursor;
        try {//lab1
            ket = cursor;
            if (!(in_grouping_b(g_AEI, 97, 228)))
            {
                throw BreakLab1();
            }
            bra = cursor;
            if (!(in_grouping_b(g_C, 98, 122)))
            {
                throw BreakLab1();
            }
            slice_del();
        } on BreakLab1 catch(_) {}
        cursor = limit - v_5;
        var v_6 = limit - cursor;
        try {//lab2
            ket = cursor;
            if (!(eq_s_b('j')))
            {
                throw BreakLab2();
            }
            bra = cursor;
            try {//lab3
                var v_7 = limit - cursor;
                try {//lab4
                    if (!(eq_s_b('o')))
                    {
                        throw BreakLab4();
                    }
                    throw BreakLab3();
                } on BreakLab4 catch(_) {}
                cursor = limit - v_7;
                if (!(eq_s_b('u')))
                {
                    throw BreakLab2();
                }
            } on BreakLab3 catch(_) {}
            slice_del();
        } on BreakLab2 catch(_) {}
        cursor = limit - v_6;
        var v_8 = limit - cursor;
        try {//lab5
            ket = cursor;
            if (!(eq_s_b('o')))
            {
                throw BreakLab5();
            }
            bra = cursor;
            if (!(eq_s_b('j')))
            {
                throw BreakLab5();
            }
            slice_del();
        } on BreakLab5 catch(_) {}
        cursor = limit - v_8;
        limit_backward = v_2;
        try { //golab6
            while(true)             {
                var v_9 = limit - cursor;
                try {//lab7
                    if (!(out_grouping_b(g_V1, 97, 246)))
                    {
                        throw BreakLab7();
                    }
                    cursor = limit - v_9;
                    throw BreakLab6();
                } on BreakLab7 catch(_) {}
                cursor = limit - v_9;
                if (cursor <= limit_backward)
                {
                    return false;
                }
                cursor--;
            }
        } on BreakLab6 catch(_) {}
        ket = cursor;
        if (!(in_grouping_b(g_C, 98, 122)))
        {
            return false;
        }
        bra = cursor;
        S_x = slice_to(S_x);
        if (!(eq_s_b(S_x)))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_mark_regions();
        cursor = v_1;
        B_ending_removed = false;
        limit_backward = cursor;
        cursor = limit;
        var v_2 = limit - cursor;
        r_particle_etc();
        cursor = limit - v_2;
        var v_3 = limit - cursor;
        r_possessive();
        cursor = limit - v_3;
        var v_4 = limit - cursor;
        r_case_ending();
        cursor = limit - v_4;
        var v_5 = limit - cursor;
        r_other_endings();
        cursor = limit - v_5;
        try {//lab0
            try {//lab1
                if (!(B_ending_removed))
                {
                    throw BreakLab1();
                }
                var v_7 = limit - cursor;
                r_i_plural();
                cursor = limit - v_7;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            var v_8 = limit - cursor;
            r_t_plural();
            cursor = limit - v_8;
        } on BreakLab0 catch(_) {}
        var v_9 = limit - cursor;
        r_tidy();
        cursor = limit - v_9;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
