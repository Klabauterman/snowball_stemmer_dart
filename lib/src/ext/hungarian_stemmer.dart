// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class hungarian_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('cs', -1, -1),
         Among('dzs', -1, -1),
         Among('gy', -1, -1),
         Among('ly', -1, -1),
         Among('ny', -1, -1),
         Among('sz', -1, -1),
         Among('ty', -1, -1),
         Among('zs', -1, -1)
    ];

    late final List<Among> a_1 = [
         Among('\u00E1', -1, 1),
         Among('\u00E9', -1, 2)
    ];

    late final List<Among> a_2 = [
         Among('bb', -1, -1),
         Among('cc', -1, -1),
         Among('dd', -1, -1),
         Among('ff', -1, -1),
         Among('gg', -1, -1),
         Among('jj', -1, -1),
         Among('kk', -1, -1),
         Among('ll', -1, -1),
         Among('mm', -1, -1),
         Among('nn', -1, -1),
         Among('pp', -1, -1),
         Among('rr', -1, -1),
         Among('ccs', -1, -1),
         Among('ss', -1, -1),
         Among('zzs', -1, -1),
         Among('tt', -1, -1),
         Among('vv', -1, -1),
         Among('ggy', -1, -1),
         Among('lly', -1, -1),
         Among('nny', -1, -1),
         Among('tty', -1, -1),
         Among('ssz', -1, -1),
         Among('zz', -1, -1)
    ];

    late final List<Among> a_3 = [
         Among('al', -1, 1),
         Among('el', -1, 1)
    ];

    late final List<Among> a_4 = [
         Among('ba', -1, -1),
         Among('ra', -1, -1),
         Among('be', -1, -1),
         Among('re', -1, -1),
         Among('ig', -1, -1),
         Among('nak', -1, -1),
         Among('nek', -1, -1),
         Among('val', -1, -1),
         Among('vel', -1, -1),
         Among('ul', -1, -1),
         Among('n\u00E1l', -1, -1),
         Among('n\u00E9l', -1, -1),
         Among('b\u00F3l', -1, -1),
         Among('r\u00F3l', -1, -1),
         Among('t\u00F3l', -1, -1),
         Among('\u00FCl', -1, -1),
         Among('b\u0151l', -1, -1),
         Among('r\u0151l', -1, -1),
         Among('t\u0151l', -1, -1),
         Among('n', -1, -1),
         Among('an', 19, -1),
         Among('ban', 20, -1),
         Among('en', 19, -1),
         Among('ben', 22, -1),
         Among('k\u00E9ppen', 22, -1),
         Among('on', 19, -1),
         Among('\u00F6n', 19, -1),
         Among('k\u00E9pp', -1, -1),
         Among('kor', -1, -1),
         Among('t', -1, -1),
         Among('at', 29, -1),
         Among('et', 29, -1),
         Among('k\u00E9nt', 29, -1),
         Among('ank\u00E9nt', 32, -1),
         Among('enk\u00E9nt', 32, -1),
         Among('onk\u00E9nt', 32, -1),
         Among('ot', 29, -1),
         Among('\u00E9rt', 29, -1),
         Among('\u00F6t', 29, -1),
         Among('hez', -1, -1),
         Among('hoz', -1, -1),
         Among('h\u00F6z', -1, -1),
         Among('v\u00E1', -1, -1),
         Among('v\u00E9', -1, -1)
    ];

    late final List<Among> a_5 = [
         Among('\u00E1n', -1, 2),
         Among('\u00E9n', -1, 1),
         Among('\u00E1nk\u00E9nt', -1, 2)
    ];

    late final List<Among> a_6 = [
         Among('stul', -1, 1),
         Among('astul', 0, 1),
         Among('\u00E1stul', 0, 2),
         Among('st\u00FCl', -1, 1),
         Among('est\u00FCl', 3, 1),
         Among('\u00E9st\u00FCl', 3, 3)
    ];

    late final List<Among> a_7 = [
         Among('\u00E1', -1, 1),
         Among('\u00E9', -1, 1)
    ];

    late final List<Among> a_8 = [
         Among('k', -1, 3),
         Among('ak', 0, 3),
         Among('ek', 0, 3),
         Among('ok', 0, 3),
         Among('\u00E1k', 0, 1),
         Among('\u00E9k', 0, 2),
         Among('\u00F6k', 0, 3)
    ];

    late final List<Among> a_9 = [
         Among('\u00E9i', -1, 1),
         Among('\u00E1\u00E9i', 0, 3),
         Among('\u00E9\u00E9i', 0, 2),
         Among('\u00E9', -1, 1),
         Among('k\u00E9', 3, 1),
         Among('ak\u00E9', 4, 1),
         Among('ek\u00E9', 4, 1),
         Among('ok\u00E9', 4, 1),
         Among('\u00E1k\u00E9', 4, 3),
         Among('\u00E9k\u00E9', 4, 2),
         Among('\u00F6k\u00E9', 4, 1),
         Among('\u00E9\u00E9', 3, 2)
    ];

    late final List<Among> a_10 = [
         Among('a', -1, 1),
         Among('ja', 0, 1),
         Among('d', -1, 1),
         Among('ad', 2, 1),
         Among('ed', 2, 1),
         Among('od', 2, 1),
         Among('\u00E1d', 2, 2),
         Among('\u00E9d', 2, 3),
         Among('\u00F6d', 2, 1),
         Among('e', -1, 1),
         Among('je', 9, 1),
         Among('nk', -1, 1),
         Among('unk', 11, 1),
         Among('\u00E1nk', 11, 2),
         Among('\u00E9nk', 11, 3),
         Among('\u00FCnk', 11, 1),
         Among('uk', -1, 1),
         Among('juk', 16, 1),
         Among('\u00E1juk', 17, 2),
         Among('\u00FCk', -1, 1),
         Among('j\u00FCk', 19, 1),
         Among('\u00E9j\u00FCk', 20, 3),
         Among('m', -1, 1),
         Among('am', 22, 1),
         Among('em', 22, 1),
         Among('om', 22, 1),
         Among('\u00E1m', 22, 2),
         Among('\u00E9m', 22, 3),
         Among('o', -1, 1),
         Among('\u00E1', -1, 2),
         Among('\u00E9', -1, 3)
    ];

    late final List<Among> a_11 = [
         Among('id', -1, 1),
         Among('aid', 0, 1),
         Among('jaid', 1, 1),
         Among('eid', 0, 1),
         Among('jeid', 3, 1),
         Among('\u00E1id', 0, 2),
         Among('\u00E9id', 0, 3),
         Among('i', -1, 1),
         Among('ai', 7, 1),
         Among('jai', 8, 1),
         Among('ei', 7, 1),
         Among('jei', 10, 1),
         Among('\u00E1i', 7, 2),
         Among('\u00E9i', 7, 3),
         Among('itek', -1, 1),
         Among('eitek', 14, 1),
         Among('jeitek', 15, 1),
         Among('\u00E9itek', 14, 3),
         Among('ik', -1, 1),
         Among('aik', 18, 1),
         Among('jaik', 19, 1),
         Among('eik', 18, 1),
         Among('jeik', 21, 1),
         Among('\u00E1ik', 18, 2),
         Among('\u00E9ik', 18, 3),
         Among('ink', -1, 1),
         Among('aink', 25, 1),
         Among('jaink', 26, 1),
         Among('eink', 25, 1),
         Among('jeink', 28, 1),
         Among('\u00E1ink', 25, 2),
         Among('\u00E9ink', 25, 3),
         Among('aitok', -1, 1),
         Among('jaitok', 32, 1),
         Among('\u00E1itok', -1, 2),
         Among('im', -1, 1),
         Among('aim', 35, 1),
         Among('jaim', 36, 1),
         Among('eim', 35, 1),
         Among('jeim', 38, 1),
         Among('\u00E1im', 35, 2),
         Among('\u00E9im', 35, 3)
    ];

    static final List<int> g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 36, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 ];

    late int I_p1;


    bool r_mark_regions() {
        I_p1 = limit;
        try {//lab0
            var v_1 = cursor;
            try {//lab1
                if (!(in_grouping(g_v, 97, 369)))
                {
                    throw BreakLab1();
                }
                try { //golab2
                    while(true)                     {
                        var v_2 = cursor;
                        try {//lab3
                            if (!(out_grouping(g_v, 97, 369)))
                            {
                                throw BreakLab3();
                            }
                            cursor = v_2;
                            throw BreakLab2();
                        } on BreakLab3 catch(_) {}
                        cursor = v_2;
                        if (cursor >= limit)
                        {
                            throw BreakLab1();
                        }
                        cursor++;
                    }
                } on BreakLab2 catch(_) {}
                try {//lab4
                    var v_3 = cursor;
                    try {//lab5
                        if (find_among(a_0) == 0)
                        {
                            throw BreakLab5();
                        }
                        throw BreakLab4();
                    } on BreakLab5 catch(_) {}
                    cursor = v_3;
                    if (cursor >= limit)
                    {
                        throw BreakLab1();
                    }
                    cursor++;
                } on BreakLab4 catch(_) {}
                I_p1 = cursor;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = v_1;
            if (!(out_grouping(g_v, 97, 369)))
            {
                return false;
            }
            try { //golab6
                while(true)                 {
                    try {//lab7
                        if (!(in_grouping(g_v, 97, 369)))
                        {
                            throw BreakLab7();
                        }
                        throw BreakLab6();
                    } on BreakLab7 catch(_) {}
                    if (cursor >= limit)
                    {
                        return false;
                    }
                    cursor++;
                }
            } on BreakLab6 catch(_) {}
            I_p1 = cursor;
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_v_ending() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_1);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_from('a');
                break;
            case 2:
                slice_from('e');
                break;
        }
        return true;
    }

    bool r_double() {
        var v_1 = limit - cursor;
        if (find_among_b(a_2) == 0)
        {
            return false;
        }
        cursor = limit - v_1;
        return true;
    }

    bool r_undouble() {
        if (cursor <= limit_backward)
        {
            return false;
        }
        cursor--;
        ket = cursor;
        {
            var c = cursor - 1;
            if (c < limit_backward)
            {
                return false;
            }
            cursor = c;
        }
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_instrum() {
        ket = cursor;
        if (find_among_b(a_3) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        if (!r_double())
        {
            return false;
        }
        slice_del();
        if (!r_undouble())
        {
            return false;
        }
        return true;
    }

    bool r_case() {
        ket = cursor;
        if (find_among_b(a_4) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        slice_del();
        if (!r_v_ending())
        {
            return false;
        }
        return true;
    }

    bool r_case_special() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_5);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_from('e');
                break;
            case 2:
                slice_from('a');
                break;
        }
        return true;
    }

    bool r_case_other() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_6);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('a');
                break;
            case 3:
                slice_from('e');
                break;
        }
        return true;
    }

    bool r_factive() {
        ket = cursor;
        if (find_among_b(a_7) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        if (!r_double())
        {
            return false;
        }
        slice_del();
        if (!r_undouble())
        {
            return false;
        }
        return true;
    }

    bool r_plural() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_8);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_from('a');
                break;
            case 2:
                slice_from('e');
                break;
            case 3:
                slice_del();
                break;
        }
        return true;
    }

    bool r_owned() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_9);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('e');
                break;
            case 3:
                slice_from('a');
                break;
        }
        return true;
    }

    bool r_sing_owner() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_10);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('a');
                break;
            case 3:
                slice_from('e');
                break;
        }
        return true;
    }

    bool r_plur_owner() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_11);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('a');
                break;
            case 3:
                slice_from('e');
                break;
        }
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_mark_regions();
        cursor = v_1;
        limit_backward = cursor;
        cursor = limit;
        var v_2 = limit - cursor;
        r_instrum();
        cursor = limit - v_2;
        var v_3 = limit - cursor;
        r_case();
        cursor = limit - v_3;
        var v_4 = limit - cursor;
        r_case_special();
        cursor = limit - v_4;
        var v_5 = limit - cursor;
        r_case_other();
        cursor = limit - v_5;
        var v_6 = limit - cursor;
        r_factive();
        cursor = limit - v_6;
        var v_7 = limit - cursor;
        r_owned();
        cursor = limit - v_7;
        var v_8 = limit - cursor;
        r_sing_owner();
        cursor = limit - v_8;
        var v_9 = limit - cursor;
        r_plur_owner();
        cursor = limit - v_9;
        var v_10 = limit - cursor;
        r_plural();
        cursor = limit - v_10;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
