// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class indonesian_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('kah', -1, 1),
         Among('lah', -1, 1),
         Among('pun', -1, 1)
    ];

    late final List<Among> a_1 = [
         Among('nya', -1, 1),
         Among('ku', -1, 1),
         Among('mu', -1, 1)
    ];

    late final List<Among> a_2 = [
         Among('i', -1, 1, method: r_SUFFIX_I_OK),
         Among('an', -1, 1, method: r_SUFFIX_AN_OK),
         Among('kan', 1, 1, method: r_SUFFIX_KAN_OK)
    ];

    late final List<Among> a_3 = [
         Among('di', -1, 1),
         Among('ke', -1, 2),
         Among('me', -1, 1),
         Among('mem', 2, 5),
         Among('men', 2, 1),
         Among('meng', 4, 1),
         Among('meny', 4, 3, method: r_VOWEL),
         Among('pem', -1, 6),
         Among('pen', -1, 2),
         Among('peng', 8, 2),
         Among('peny', 8, 4, method: r_VOWEL),
         Among('ter', -1, 1)
    ];

    late final List<Among> a_4 = [
         Among('be', -1, 3, method: r_KER),
         Among('belajar', 0, 4),
         Among('ber', 0, 3),
         Among('pe', -1, 1),
         Among('pelajar', 3, 2),
         Among('per', 3, 1)
    ];

    static final List<int> g_vowel = [17, 65, 16 ];

    late int I_prefix;
    late int I_measure;


    bool r_remove_particle() {
        ket = cursor;
        if (find_among_b(a_0) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        I_measure -= 1;
        return true;
    }

    bool r_remove_possessive_pronoun() {
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        I_measure -= 1;
        return true;
    }

    bool r_SUFFIX_KAN_OK() {
        if (!(I_prefix != 3))
        {
            return false;
        }
        if (!(I_prefix != 2))
        {
            return false;
        }
        return true;
    }

    bool r_SUFFIX_AN_OK() {
        if (!(I_prefix != 1))
        {
            return false;
        }
        return true;
    }

    bool r_SUFFIX_I_OK() {
        if (!(I_prefix <= 2))
        {
            return false;
        }
        {
            var v_1 = limit - cursor;
            try {//lab0
                if (!(eq_s_b('s')))
                {
                    throw BreakLab0();
                }
                return false;
            } on BreakLab0 catch(_) {}
            cursor = limit - v_1;
        }
        return true;
    }

    bool r_remove_suffix() {
        ket = cursor;
        if (find_among_b(a_2) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        I_measure -= 1;
        return true;
    }

    bool r_VOWEL() {
        if (!(in_grouping(g_vowel, 97, 117)))
        {
            return false;
        }
        return true;
    }

    bool r_KER() {
        if (!(out_grouping(g_vowel, 97, 117)))
        {
            return false;
        }
        if (!(eq_s('er')))
        {
            return false;
        }
        return true;
    }

    bool r_remove_first_order_prefix() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_3);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                slice_del();
                I_prefix = 1;
                I_measure -= 1;
                break;
            case 2:
                slice_del();
                I_prefix = 3;
                I_measure -= 1;
                break;
            case 3:
                I_prefix = 1;
                slice_from('s');
                I_measure -= 1;
                break;
            case 4:
                I_prefix = 3;
                slice_from('s');
                I_measure -= 1;
                break;
            case 5:
                I_prefix = 1;
                I_measure -= 1;
                try {//lab0
                    var v_1 = cursor;
                    try {//lab1
                        var v_2 = cursor;
                        if (!(in_grouping(g_vowel, 97, 117)))
                        {
                            throw BreakLab1();
                        }
                        cursor = v_2;
                        slice_from('p');
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = v_1;
                    slice_del();
                } on BreakLab0 catch(_) {}
                break;
            case 6:
                I_prefix = 3;
                I_measure -= 1;
                try {//lab2
                    var v_3 = cursor;
                    try {//lab3
                        var v_4 = cursor;
                        if (!(in_grouping(g_vowel, 97, 117)))
                        {
                            throw BreakLab3();
                        }
                        cursor = v_4;
                        slice_from('p');
                        throw BreakLab2();
                    } on BreakLab3 catch(_) {}
                    cursor = v_3;
                    slice_del();
                } on BreakLab2 catch(_) {}
                break;
        }
        return true;
    }

    bool r_remove_second_order_prefix() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_4);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                slice_del();
                I_prefix = 2;
                I_measure -= 1;
                break;
            case 2:
                slice_from('ajar');
                I_measure -= 1;
                break;
            case 3:
                slice_del();
                I_prefix = 4;
                I_measure -= 1;
                break;
            case 4:
                slice_from('ajar');
                I_prefix = 4;
                I_measure -= 1;
                break;
        }
        return true;
    }

    bool stem() {
        I_measure = 0;
        var v_1 = cursor;
        try {//lab0
            while(true)
            {
                var v_2 = cursor;
                try {//lab1
                    try { //golab2
                        while(true)                         {
                            try {//lab3
                                if (!(in_grouping(g_vowel, 97, 117)))
                                {
                                    throw BreakLab3();
                                }
                                throw BreakLab2();
                            } on BreakLab3 catch(_) {}
                            if (cursor >= limit)
                            {
                                throw BreakLab1();
                            }
                            cursor++;
                        }
                    } on BreakLab2 catch(_) {}
                    I_measure += 1;
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        if (!(I_measure > 2))
        {
            return false;
        }
        I_prefix = 0;
        limit_backward = cursor;
        cursor = limit;
        var v_4 = limit - cursor;
        r_remove_particle();
        cursor = limit - v_4;
        if (!(I_measure > 2))
        {
            return false;
        }
        var v_5 = limit - cursor;
        r_remove_possessive_pronoun();
        cursor = limit - v_5;
        cursor = limit_backward;
        if (!(I_measure > 2))
        {
            return false;
        }
        try {//lab4
            var v_6 = cursor;
            try {//lab5
                var v_7 = cursor;
                if (!r_remove_first_order_prefix())
                {
                    throw BreakLab5();
                }
                var v_8 = cursor;
                try {//lab6
                    var v_9 = cursor;
                    if (!(I_measure > 2))
                    {
                        throw BreakLab6();
                    }
                    limit_backward = cursor;
                    cursor = limit;
                    if (!r_remove_suffix())
                    {
                        throw BreakLab6();
                    }
                    cursor = limit_backward;
                    cursor = v_9;
                    if (!(I_measure > 2))
                    {
                        throw BreakLab6();
                    }
                    if (!r_remove_second_order_prefix())
                    {
                        throw BreakLab6();
                    }
                } on BreakLab6 catch(_) {}
                cursor = v_8;
                cursor = v_7;
                throw BreakLab4();
            } on BreakLab5 catch(_) {}
            cursor = v_6;
            var v_10 = cursor;
            r_remove_second_order_prefix();
            cursor = v_10;
            var v_11 = cursor;
            try {//lab7
                if (!(I_measure > 2))
                {
                    throw BreakLab7();
                }
                limit_backward = cursor;
                cursor = limit;
                if (!r_remove_suffix())
                {
                    throw BreakLab7();
                }
                cursor = limit_backward;
            } on BreakLab7 catch(_) {}
            cursor = v_11;
        } on BreakLab4 catch(_) {}
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
