// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class irish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('b\'', -1, 1),
         Among('bh', -1, 4),
         Among('bhf', 1, 2),
         Among('bp', -1, 8),
         Among('ch', -1, 5),
         Among('d\'', -1, 1),
         Among('d\'fh', 5, 2),
         Among('dh', -1, 6),
         Among('dt', -1, 9),
         Among('fh', -1, 2),
         Among('gc', -1, 5),
         Among('gh', -1, 7),
         Among('h-', -1, 1),
         Among('m\'', -1, 1),
         Among('mb', -1, 4),
         Among('mh', -1, 10),
         Among('n-', -1, 1),
         Among('nd', -1, 6),
         Among('ng', -1, 7),
         Among('ph', -1, 8),
         Among('sh', -1, 3),
         Among('t-', -1, 1),
         Among('th', -1, 9),
         Among('ts', -1, 3)
    ];

    late final List<Among> a_1 = [
         Among('\u00EDochta', -1, 1),
         Among('a\u00EDochta', 0, 1),
         Among('ire', -1, 2),
         Among('aire', 2, 2),
         Among('abh', -1, 1),
         Among('eabh', 4, 1),
         Among('ibh', -1, 1),
         Among('aibh', 6, 1),
         Among('amh', -1, 1),
         Among('eamh', 8, 1),
         Among('imh', -1, 1),
         Among('aimh', 10, 1),
         Among('\u00EDocht', -1, 1),
         Among('a\u00EDocht', 12, 1),
         Among('ir\u00ED', -1, 2),
         Among('air\u00ED', 14, 2)
    ];

    late final List<Among> a_2 = [
         Among('\u00F3ideacha', -1, 6),
         Among('patacha', -1, 5),
         Among('achta', -1, 1),
         Among('arcachta', 2, 2),
         Among('eachta', 2, 1),
         Among('grafa\u00EDochta', -1, 4),
         Among('paite', -1, 5),
         Among('ach', -1, 1),
         Among('each', 7, 1),
         Among('\u00F3ideach', 8, 6),
         Among('gineach', 8, 3),
         Among('patach', 7, 5),
         Among('grafa\u00EDoch', -1, 4),
         Among('pataigh', -1, 5),
         Among('\u00F3idigh', -1, 6),
         Among('acht\u00FAil', -1, 1),
         Among('eacht\u00FAil', 15, 1),
         Among('gineas', -1, 3),
         Among('ginis', -1, 3),
         Among('acht', -1, 1),
         Among('arcacht', 19, 2),
         Among('eacht', 19, 1),
         Among('grafa\u00EDocht', -1, 4),
         Among('arcachta\u00ED', -1, 2),
         Among('grafa\u00EDochta\u00ED', -1, 4)
    ];

    late final List<Among> a_3 = [
         Among('imid', -1, 1),
         Among('aimid', 0, 1),
         Among('\u00EDmid', -1, 1),
         Among('a\u00EDmid', 2, 1),
         Among('adh', -1, 2),
         Among('eadh', 4, 2),
         Among('faidh', -1, 1),
         Among('fidh', -1, 1),
         Among('\u00E1il', -1, 2),
         Among('ain', -1, 2),
         Among('tear', -1, 2),
         Among('tar', -1, 2)
    ];

    static final List<int> g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 2 ];

    late int I_p2;
    late int I_p1;
    late int I_pV;


    bool r_mark_regions() {
        I_pV = limit;
        I_p1 = limit;
        I_p2 = limit;
        var v_1 = cursor;
        try {//lab0
            try { //golab1
                while(true)                 {
                    try {//lab2
                        if (!(in_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab2();
                        }
                        throw BreakLab1();
                    } on BreakLab2 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab1 catch(_) {}
            I_pV = cursor;
            try { //golab3
                while(true)                 {
                    try {//lab4
                        if (!(out_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab4();
                        }
                        throw BreakLab3();
                    } on BreakLab4 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab3 catch(_) {}
            I_p1 = cursor;
            try { //golab5
                while(true)                 {
                    try {//lab6
                        if (!(in_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab6();
                        }
                        throw BreakLab5();
                    } on BreakLab6 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab5 catch(_) {}
            try { //golab7
                while(true)                 {
                    try {//lab8
                        if (!(out_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab8();
                        }
                        throw BreakLab7();
                    } on BreakLab8 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab7 catch(_) {}
            I_p2 = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        return true;
    }

    bool r_initial_morph() {
        var among_var;
        bra = cursor;
        among_var = find_among(a_0);
        if (among_var == 0)
        {
            return false;
        }
        ket = cursor;
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('f');
                break;
            case 3:
                slice_from('s');
                break;
            case 4:
                slice_from('b');
                break;
            case 5:
                slice_from('c');
                break;
            case 6:
                slice_from('d');
                break;
            case 7:
                slice_from('g');
                break;
            case 8:
                slice_from('p');
                break;
            case 9:
                slice_from('t');
                break;
            case 10:
                slice_from('m');
                break;
        }
        return true;
    }

    bool r_RV() {
        if (!(I_pV <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_noun_sfx() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_1);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R1())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_deriv() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                slice_from('arc');
                break;
            case 3:
                slice_from('gin');
                break;
            case 4:
                slice_from('graf');
                break;
            case 5:
                slice_from('paite');
                break;
            case 6:
                slice_from('\u00F3id');
                break;
        }
        return true;
    }

    bool r_verb_sfx() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_3);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_R1())
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_initial_morph();
        cursor = v_1;
        r_mark_regions();
        limit_backward = cursor;
        cursor = limit;
        var v_3 = limit - cursor;
        r_noun_sfx();
        cursor = limit - v_3;
        var v_4 = limit - cursor;
        r_deriv();
        cursor = limit - v_4;
        var v_5 = limit - cursor;
        r_verb_sfx();
        cursor = limit - v_5;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
