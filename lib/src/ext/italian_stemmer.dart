// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class italian_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('', -1, 7),
         Among('qu', 0, 6),
         Among('\u00E1', 0, 1),
         Among('\u00E9', 0, 2),
         Among('\u00ED', 0, 3),
         Among('\u00F3', 0, 4),
         Among('\u00FA', 0, 5)
    ];

    late final List<Among> a_1 = [
         Among('', -1, 3),
         Among('I', 0, 1),
         Among('U', 0, 2)
    ];

    late final List<Among> a_2 = [
         Among('la', -1, -1),
         Among('cela', 0, -1),
         Among('gliela', 0, -1),
         Among('mela', 0, -1),
         Among('tela', 0, -1),
         Among('vela', 0, -1),
         Among('le', -1, -1),
         Among('cele', 6, -1),
         Among('gliele', 6, -1),
         Among('mele', 6, -1),
         Among('tele', 6, -1),
         Among('vele', 6, -1),
         Among('ne', -1, -1),
         Among('cene', 12, -1),
         Among('gliene', 12, -1),
         Among('mene', 12, -1),
         Among('sene', 12, -1),
         Among('tene', 12, -1),
         Among('vene', 12, -1),
         Among('ci', -1, -1),
         Among('li', -1, -1),
         Among('celi', 20, -1),
         Among('glieli', 20, -1),
         Among('meli', 20, -1),
         Among('teli', 20, -1),
         Among('veli', 20, -1),
         Among('gli', 20, -1),
         Among('mi', -1, -1),
         Among('si', -1, -1),
         Among('ti', -1, -1),
         Among('vi', -1, -1),
         Among('lo', -1, -1),
         Among('celo', 31, -1),
         Among('glielo', 31, -1),
         Among('melo', 31, -1),
         Among('telo', 31, -1),
         Among('velo', 31, -1)
    ];

    late final List<Among> a_3 = [
         Among('ando', -1, 1),
         Among('endo', -1, 1),
         Among('ar', -1, 2),
         Among('er', -1, 2),
         Among('ir', -1, 2)
    ];

    late final List<Among> a_4 = [
         Among('ic', -1, -1),
         Among('abil', -1, -1),
         Among('os', -1, -1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_5 = [
         Among('ic', -1, 1),
         Among('abil', -1, 1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_6 = [
         Among('ica', -1, 1),
         Among('logia', -1, 3),
         Among('osa', -1, 1),
         Among('ista', -1, 1),
         Among('iva', -1, 9),
         Among('anza', -1, 1),
         Among('enza', -1, 5),
         Among('ice', -1, 1),
         Among('atrice', 7, 1),
         Among('iche', -1, 1),
         Among('logie', -1, 3),
         Among('abile', -1, 1),
         Among('ibile', -1, 1),
         Among('usione', -1, 4),
         Among('azione', -1, 2),
         Among('uzione', -1, 4),
         Among('atore', -1, 2),
         Among('ose', -1, 1),
         Among('ante', -1, 1),
         Among('mente', -1, 1),
         Among('amente', 19, 7),
         Among('iste', -1, 1),
         Among('ive', -1, 9),
         Among('anze', -1, 1),
         Among('enze', -1, 5),
         Among('ici', -1, 1),
         Among('atrici', 25, 1),
         Among('ichi', -1, 1),
         Among('abili', -1, 1),
         Among('ibili', -1, 1),
         Among('ismi', -1, 1),
         Among('usioni', -1, 4),
         Among('azioni', -1, 2),
         Among('uzioni', -1, 4),
         Among('atori', -1, 2),
         Among('osi', -1, 1),
         Among('anti', -1, 1),
         Among('amenti', -1, 6),
         Among('imenti', -1, 6),
         Among('isti', -1, 1),
         Among('ivi', -1, 9),
         Among('ico', -1, 1),
         Among('ismo', -1, 1),
         Among('oso', -1, 1),
         Among('amento', -1, 6),
         Among('imento', -1, 6),
         Among('ivo', -1, 9),
         Among('it\u00E0', -1, 8),
         Among('ist\u00E0', -1, 1),
         Among('ist\u00E8', -1, 1),
         Among('ist\u00EC', -1, 1)
    ];

    late final List<Among> a_7 = [
         Among('isca', -1, 1),
         Among('enda', -1, 1),
         Among('ata', -1, 1),
         Among('ita', -1, 1),
         Among('uta', -1, 1),
         Among('ava', -1, 1),
         Among('eva', -1, 1),
         Among('iva', -1, 1),
         Among('erebbe', -1, 1),
         Among('irebbe', -1, 1),
         Among('isce', -1, 1),
         Among('ende', -1, 1),
         Among('are', -1, 1),
         Among('ere', -1, 1),
         Among('ire', -1, 1),
         Among('asse', -1, 1),
         Among('ate', -1, 1),
         Among('avate', 16, 1),
         Among('evate', 16, 1),
         Among('ivate', 16, 1),
         Among('ete', -1, 1),
         Among('erete', 20, 1),
         Among('irete', 20, 1),
         Among('ite', -1, 1),
         Among('ereste', -1, 1),
         Among('ireste', -1, 1),
         Among('ute', -1, 1),
         Among('erai', -1, 1),
         Among('irai', -1, 1),
         Among('isci', -1, 1),
         Among('endi', -1, 1),
         Among('erei', -1, 1),
         Among('irei', -1, 1),
         Among('assi', -1, 1),
         Among('ati', -1, 1),
         Among('iti', -1, 1),
         Among('eresti', -1, 1),
         Among('iresti', -1, 1),
         Among('uti', -1, 1),
         Among('avi', -1, 1),
         Among('evi', -1, 1),
         Among('ivi', -1, 1),
         Among('isco', -1, 1),
         Among('ando', -1, 1),
         Among('endo', -1, 1),
         Among('Yamo', -1, 1),
         Among('iamo', -1, 1),
         Among('avamo', -1, 1),
         Among('evamo', -1, 1),
         Among('ivamo', -1, 1),
         Among('eremo', -1, 1),
         Among('iremo', -1, 1),
         Among('assimo', -1, 1),
         Among('ammo', -1, 1),
         Among('emmo', -1, 1),
         Among('eremmo', 54, 1),
         Among('iremmo', 54, 1),
         Among('immo', -1, 1),
         Among('ano', -1, 1),
         Among('iscano', 58, 1),
         Among('avano', 58, 1),
         Among('evano', 58, 1),
         Among('ivano', 58, 1),
         Among('eranno', -1, 1),
         Among('iranno', -1, 1),
         Among('ono', -1, 1),
         Among('iscono', 65, 1),
         Among('arono', 65, 1),
         Among('erono', 65, 1),
         Among('irono', 65, 1),
         Among('erebbero', -1, 1),
         Among('irebbero', -1, 1),
         Among('assero', -1, 1),
         Among('essero', -1, 1),
         Among('issero', -1, 1),
         Among('ato', -1, 1),
         Among('ito', -1, 1),
         Among('uto', -1, 1),
         Among('avo', -1, 1),
         Among('evo', -1, 1),
         Among('ivo', -1, 1),
         Among('ar', -1, 1),
         Among('ir', -1, 1),
         Among('er\u00E0', -1, 1),
         Among('ir\u00E0', -1, 1),
         Among('er\u00F2', -1, 1),
         Among('ir\u00F2', -1, 1)
    ];

    static final List<int> g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2, 1 ];

    static final List<int> g_AEIO = [17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2 ];

    static final List<int> g_CG = [17 ];

    late int I_p2;
    late int I_p1;
    late int I_pV;


    bool r_prelude() {
        var among_var;
        var v_1 = cursor;
        while(true)
        {
            var v_2 = cursor;
            try {//lab0
                bra = cursor;
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    throw BreakLab0();
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from('\u00E0');
                        break;
                    case 2:
                        slice_from('\u00E8');
                        break;
                    case 3:
                        slice_from('\u00EC');
                        break;
                    case 4:
                        slice_from('\u00F2');
                        break;
                    case 5:
                        slice_from('\u00F9');
                        break;
                    case 6:
                        slice_from('qU');
                        break;
                    case 7:
                        if (cursor >= limit)
                        {
                            throw BreakLab0();
                        }
                        cursor++;
                        break;
                }
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_2;
            break;
        }
        cursor = v_1;
        while(true)
        {
            var v_3 = cursor;
            try {//lab1
                try { //golab2
                    while(true)                     {
                        var v_4 = cursor;
                        try {//lab3
                            if (!(in_grouping(g_v, 97, 249)))
                            {
                                throw BreakLab3();
                            }
                            bra = cursor;
                            try {//lab4
                                var v_5 = cursor;
                                try {//lab5
                                    if (!(eq_s('u')))
                                    {
                                        throw BreakLab5();
                                    }
                                    ket = cursor;
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        throw BreakLab5();
                                    }
                                    slice_from('U');
                                    throw BreakLab4();
                                } on BreakLab5 catch(_) {}
                                cursor = v_5;
                                if (!(eq_s('i')))
                                {
                                    throw BreakLab3();
                                }
                                ket = cursor;
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    throw BreakLab3();
                                }
                                slice_from('I');
                            } on BreakLab4 catch(_) {}
                            cursor = v_4;
                            throw BreakLab2();
                        } on BreakLab3 catch(_) {}
                        cursor = v_4;
                        if (cursor >= limit)
                        {
                            throw BreakLab1();
                        }
                        cursor++;
                    }
                } on BreakLab2 catch(_) {}
                continue;
            } on BreakLab1 catch(_) {}
            cursor = v_3;
            break;
        }
        return true;
    }

    bool r_mark_regions() {
        I_pV = limit;
        I_p1 = limit;
        I_p2 = limit;
        var v_1 = cursor;
        try {//lab0
            try {//lab1
                var v_2 = cursor;
                try {//lab2
                    if (!(in_grouping(g_v, 97, 249)))
                    {
                        throw BreakLab2();
                    }
                    try {//lab3
                        var v_3 = cursor;
                        try {//lab4
                            if (!(out_grouping(g_v, 97, 249)))
                            {
                                throw BreakLab4();
                            }
                            try { //golab5
                                while(true)                                 {
                                    try {//lab6
                                        if (!(in_grouping(g_v, 97, 249)))
                                        {
                                            throw BreakLab6();
                                        }
                                        throw BreakLab5();
                                    } on BreakLab6 catch(_) {}
                                    if (cursor >= limit)
                                    {
                                        throw BreakLab4();
                                    }
                                    cursor++;
                                }
                            } on BreakLab5 catch(_) {}
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = v_3;
                        if (!(in_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab2();
                        }
                        try { //golab7
                            while(true)                             {
                                try {//lab8
                                    if (!(out_grouping(g_v, 97, 249)))
                                    {
                                        throw BreakLab8();
                                    }
                                    throw BreakLab7();
                                } on BreakLab8 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab2();
                                }
                                cursor++;
                            }
                        } on BreakLab7 catch(_) {}
                    } on BreakLab3 catch(_) {}
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = v_2;
                if (!(out_grouping(g_v, 97, 249)))
                {
                    throw BreakLab0();
                }
                try {//lab9
                    var v_6 = cursor;
                    try {//lab10
                        if (!(out_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab10();
                        }
                        try { //golab11
                            while(true)                             {
                                try {//lab12
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        throw BreakLab12();
                                    }
                                    throw BreakLab11();
                                } on BreakLab12 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab10();
                                }
                                cursor++;
                            }
                        } on BreakLab11 catch(_) {}
                        throw BreakLab9();
                    } on BreakLab10 catch(_) {}
                    cursor = v_6;
                    if (!(in_grouping(g_v, 97, 249)))
                    {
                        throw BreakLab0();
                    }
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                } on BreakLab9 catch(_) {}
            } on BreakLab1 catch(_) {}
            I_pV = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_8 = cursor;
        try {//lab13
            try { //golab14
                while(true)                 {
                    try {//lab15
                        if (!(in_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab15();
                        }
                        throw BreakLab14();
                    } on BreakLab15 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab14 catch(_) {}
            try { //golab16
                while(true)                 {
                    try {//lab17
                        if (!(out_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab17();
                        }
                        throw BreakLab16();
                    } on BreakLab17 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab16 catch(_) {}
            I_p1 = cursor;
            try { //golab18
                while(true)                 {
                    try {//lab19
                        if (!(in_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab19();
                        }
                        throw BreakLab18();
                    } on BreakLab19 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab18 catch(_) {}
            try { //golab20
                while(true)                 {
                    try {//lab21
                        if (!(out_grouping(g_v, 97, 249)))
                        {
                            throw BreakLab21();
                        }
                        throw BreakLab20();
                    } on BreakLab21 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab20 catch(_) {}
            I_p2 = cursor;
        } on BreakLab13 catch(_) {}
        cursor = v_8;
        return true;
    }

    bool r_postlude() {
        var among_var;
        while(true)
        {
            var v_1 = cursor;
            try {//lab0
                bra = cursor;
                among_var = find_among(a_1);
                if (among_var == 0)
                {
                    throw BreakLab0();
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from('i');
                        break;
                    case 2:
                        slice_from('u');
                        break;
                    case 3:
                        if (cursor >= limit)
                        {
                            throw BreakLab0();
                        }
                        cursor++;
                        break;
                }
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
            break;
        }
        return true;
    }

    bool r_RV() {
        if (!(I_pV <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_attached_pronoun() {
        var among_var;
        ket = cursor;
        if (find_among_b(a_2) == 0)
        {
            return false;
        }
        bra = cursor;
        among_var = find_among_b(a_3);
        if (among_var == 0)
        {
            return false;
        }
        if (!r_RV())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                slice_from('e');
                break;
        }
        return true;
    }

    bool r_standard_suffix() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_6);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_1 = limit - cursor;
                try {//lab0
                    ket = cursor;
                    if (!(eq_s_b('ic')))
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    slice_del();
                } on BreakLab0 catch(_) {}
                break;
            case 3:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('log');
                break;
            case 4:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('u');
                break;
            case 5:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('ente');
                break;
            case 6:
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                break;
            case 7:
                if (!r_R1())
                {
                    return false;
                }
                slice_del();
                var v_2 = limit - cursor;
                try {//lab1
                    ket = cursor;
                    among_var = find_among_b(a_4);
                    if (among_var == 0)
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    slice_del();
                    switch (among_var) {
                        case 1:
                            ket = cursor;
                            if (!(eq_s_b('at')))
                            {
                                cursor = limit - v_2;
                                throw BreakLab1();
                            }
                            bra = cursor;
                            if (!r_R2())
                            {
                                cursor = limit - v_2;
                                throw BreakLab1();
                            }
                            slice_del();
                            break;
                    }
                } on BreakLab1 catch(_) {}
                break;
            case 8:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_3 = limit - cursor;
                try {//lab2
                    ket = cursor;
                    if (find_among_b(a_5) == 0)
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    slice_del();
                } on BreakLab2 catch(_) {}
                break;
            case 9:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_4 = limit - cursor;
                try {//lab3
                    ket = cursor;
                    if (!(eq_s_b('at')))
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    slice_del();
                    ket = cursor;
                    if (!(eq_s_b('ic')))
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    slice_del();
                } on BreakLab3 catch(_) {}
                break;
        }
        return true;
    }

    bool r_verb_suffix() {
        if (cursor < I_pV)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_pV;
        ket = cursor;
        if (find_among_b(a_7) == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        slice_del();
        limit_backward = v_2;
        return true;
    }

    bool r_vowel_suffix() {
        var v_1 = limit - cursor;
        try {//lab0
            ket = cursor;
            if (!(in_grouping_b(g_AEIO, 97, 242)))
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
            bra = cursor;
            if (!r_RV())
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
            slice_del();
            ket = cursor;
            if (!(eq_s_b('i')))
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
            bra = cursor;
            if (!r_RV())
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
            slice_del();
        } on BreakLab0 catch(_) {}
        var v_2 = limit - cursor;
        try {//lab1
            ket = cursor;
            if (!(eq_s_b('h')))
            {
                cursor = limit - v_2;
                throw BreakLab1();
            }
            bra = cursor;
            if (!(in_grouping_b(g_CG, 99, 103)))
            {
                cursor = limit - v_2;
                throw BreakLab1();
            }
            if (!r_RV())
            {
                cursor = limit - v_2;
                throw BreakLab1();
            }
            slice_del();
        } on BreakLab1 catch(_) {}
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_prelude();
        cursor = v_1;
        r_mark_regions();
        limit_backward = cursor;
        cursor = limit;
        var v_3 = limit - cursor;
        r_attached_pronoun();
        cursor = limit - v_3;
        var v_4 = limit - cursor;
        try {//lab0
            try {//lab1
                var v_5 = limit - cursor;
                try {//lab2
                    if (!r_standard_suffix())
                    {
                        throw BreakLab2();
                    }
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = limit - v_5;
                if (!r_verb_suffix())
                {
                    throw BreakLab0();
                }
            } on BreakLab1 catch(_) {}
        } on BreakLab0 catch(_) {}
        cursor = limit - v_4;
        var v_6 = limit - cursor;
        r_vowel_suffix();
        cursor = limit - v_6;
        cursor = limit_backward;
        var v_7 = cursor;
        r_postlude();
        cursor = v_7;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
