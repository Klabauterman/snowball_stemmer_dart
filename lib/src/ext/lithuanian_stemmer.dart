// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class lithuanian_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('a', -1, -1),
         Among('ia', 0, -1),
         Among('eria', 1, -1),
         Among('osna', 0, -1),
         Among('iosna', 3, -1),
         Among('uosna', 3, -1),
         Among('iuosna', 5, -1),
         Among('ysna', 0, -1),
         Among('\u0117sna', 0, -1),
         Among('e', -1, -1),
         Among('ie', 9, -1),
         Among('enie', 10, -1),
         Among('erie', 10, -1),
         Among('oje', 9, -1),
         Among('ioje', 13, -1),
         Among('uje', 9, -1),
         Among('iuje', 15, -1),
         Among('yje', 9, -1),
         Among('enyje', 17, -1),
         Among('eryje', 17, -1),
         Among('\u0117je', 9, -1),
         Among('ame', 9, -1),
         Among('iame', 21, -1),
         Among('sime', 9, -1),
         Among('ome', 9, -1),
         Among('\u0117me', 9, -1),
         Among('tum\u0117me', 25, -1),
         Among('ose', 9, -1),
         Among('iose', 27, -1),
         Among('uose', 27, -1),
         Among('iuose', 29, -1),
         Among('yse', 9, -1),
         Among('enyse', 31, -1),
         Among('eryse', 31, -1),
         Among('\u0117se', 9, -1),
         Among('ate', 9, -1),
         Among('iate', 35, -1),
         Among('ite', 9, -1),
         Among('kite', 37, -1),
         Among('site', 37, -1),
         Among('ote', 9, -1),
         Among('tute', 9, -1),
         Among('\u0117te', 9, -1),
         Among('tum\u0117te', 42, -1),
         Among('i', -1, -1),
         Among('ai', 44, -1),
         Among('iai', 45, -1),
         Among('eriai', 46, -1),
         Among('ei', 44, -1),
         Among('tumei', 48, -1),
         Among('ki', 44, -1),
         Among('imi', 44, -1),
         Among('erimi', 51, -1),
         Among('umi', 44, -1),
         Among('iumi', 53, -1),
         Among('si', 44, -1),
         Among('asi', 55, -1),
         Among('iasi', 56, -1),
         Among('esi', 55, -1),
         Among('iesi', 58, -1),
         Among('siesi', 59, -1),
         Among('isi', 55, -1),
         Among('aisi', 61, -1),
         Among('eisi', 61, -1),
         Among('tumeisi', 63, -1),
         Among('uisi', 61, -1),
         Among('osi', 55, -1),
         Among('\u0117josi', 66, -1),
         Among('uosi', 66, -1),
         Among('iuosi', 68, -1),
         Among('siuosi', 69, -1),
         Among('usi', 55, -1),
         Among('ausi', 71, -1),
         Among('\u010Diausi', 72, -1),
         Among('\u0105si', 55, -1),
         Among('\u0117si', 55, -1),
         Among('\u0173si', 55, -1),
         Among('t\u0173si', 76, -1),
         Among('ti', 44, -1),
         Among('enti', 78, -1),
         Among('inti', 78, -1),
         Among('oti', 78, -1),
         Among('ioti', 81, -1),
         Among('uoti', 81, -1),
         Among('iuoti', 83, -1),
         Among('auti', 78, -1),
         Among('iauti', 85, -1),
         Among('yti', 78, -1),
         Among('\u0117ti', 78, -1),
         Among('tel\u0117ti', 88, -1),
         Among('in\u0117ti', 88, -1),
         Among('ter\u0117ti', 88, -1),
         Among('ui', 44, -1),
         Among('iui', 92, -1),
         Among('eniui', 93, -1),
         Among('oj', -1, -1),
         Among('\u0117j', -1, -1),
         Among('k', -1, -1),
         Among('am', -1, -1),
         Among('iam', 98, -1),
         Among('iem', -1, -1),
         Among('im', -1, -1),
         Among('sim', 101, -1),
         Among('om', -1, -1),
         Among('tum', -1, -1),
         Among('\u0117m', -1, -1),
         Among('tum\u0117m', 105, -1),
         Among('an', -1, -1),
         Among('on', -1, -1),
         Among('ion', 108, -1),
         Among('un', -1, -1),
         Among('iun', 110, -1),
         Among('\u0117n', -1, -1),
         Among('o', -1, -1),
         Among('io', 113, -1),
         Among('enio', 114, -1),
         Among('\u0117jo', 113, -1),
         Among('uo', 113, -1),
         Among('s', -1, -1),
         Among('as', 118, -1),
         Among('ias', 119, -1),
         Among('es', 118, -1),
         Among('ies', 121, -1),
         Among('is', 118, -1),
         Among('ais', 123, -1),
         Among('iais', 124, -1),
         Among('tumeis', 123, -1),
         Among('imis', 123, -1),
         Among('enimis', 127, -1),
         Among('omis', 123, -1),
         Among('iomis', 129, -1),
         Among('umis', 123, -1),
         Among('\u0117mis', 123, -1),
         Among('enis', 123, -1),
         Among('asis', 123, -1),
         Among('ysis', 123, -1),
         Among('ams', 118, -1),
         Among('iams', 136, -1),
         Among('iems', 118, -1),
         Among('ims', 118, -1),
         Among('enims', 139, -1),
         Among('erims', 139, -1),
         Among('oms', 118, -1),
         Among('ioms', 142, -1),
         Among('ums', 118, -1),
         Among('\u0117ms', 118, -1),
         Among('ens', 118, -1),
         Among('os', 118, -1),
         Among('ios', 147, -1),
         Among('uos', 147, -1),
         Among('iuos', 149, -1),
         Among('ers', 118, -1),
         Among('us', 118, -1),
         Among('aus', 152, -1),
         Among('iaus', 153, -1),
         Among('ius', 152, -1),
         Among('ys', 118, -1),
         Among('enys', 156, -1),
         Among('erys', 156, -1),
         Among('\u0105s', 118, -1),
         Among('i\u0105s', 159, -1),
         Among('\u0117s', 118, -1),
         Among('am\u0117s', 161, -1),
         Among('iam\u0117s', 162, -1),
         Among('im\u0117s', 161, -1),
         Among('kim\u0117s', 164, -1),
         Among('sim\u0117s', 164, -1),
         Among('om\u0117s', 161, -1),
         Among('\u0117m\u0117s', 161, -1),
         Among('tum\u0117m\u0117s', 168, -1),
         Among('at\u0117s', 161, -1),
         Among('iat\u0117s', 170, -1),
         Among('sit\u0117s', 161, -1),
         Among('ot\u0117s', 161, -1),
         Among('\u0117t\u0117s', 161, -1),
         Among('tum\u0117t\u0117s', 174, -1),
         Among('\u012Fs', 118, -1),
         Among('\u016Bs', 118, -1),
         Among('t\u0173s', 118, -1),
         Among('at', -1, -1),
         Among('iat', 179, -1),
         Among('it', -1, -1),
         Among('sit', 181, -1),
         Among('ot', -1, -1),
         Among('\u0117t', -1, -1),
         Among('tum\u0117t', 184, -1),
         Among('u', -1, -1),
         Among('au', 186, -1),
         Among('iau', 187, -1),
         Among('\u010Diau', 188, -1),
         Among('iu', 186, -1),
         Among('eniu', 190, -1),
         Among('siu', 190, -1),
         Among('y', -1, -1),
         Among('\u0105', -1, -1),
         Among('i\u0105', 194, -1),
         Among('\u0117', -1, -1),
         Among('\u0119', -1, -1),
         Among('\u012F', -1, -1),
         Among('en\u012F', 198, -1),
         Among('er\u012F', 198, -1),
         Among('\u0173', -1, -1),
         Among('i\u0173', 201, -1),
         Among('er\u0173', 201, -1)
    ];

    late final List<Among> a_1 = [
         Among('ing', -1, -1),
         Among('aj', -1, -1),
         Among('iaj', 1, -1),
         Among('iej', -1, -1),
         Among('oj', -1, -1),
         Among('ioj', 4, -1),
         Among('uoj', 4, -1),
         Among('iuoj', 6, -1),
         Among('auj', -1, -1),
         Among('\u0105j', -1, -1),
         Among('i\u0105j', 9, -1),
         Among('\u0117j', -1, -1),
         Among('\u0173j', -1, -1),
         Among('i\u0173j', 12, -1),
         Among('ok', -1, -1),
         Among('iok', 14, -1),
         Among('iuk', -1, -1),
         Among('uliuk', 16, -1),
         Among('u\u010Diuk', 16, -1),
         Among('i\u0161k', -1, -1),
         Among('iul', -1, -1),
         Among('yl', -1, -1),
         Among('\u0117l', -1, -1),
         Among('am', -1, -1),
         Among('dam', 23, -1),
         Among('jam', 23, -1),
         Among('zgan', -1, -1),
         Among('ain', -1, -1),
         Among('esn', -1, -1),
         Among('op', -1, -1),
         Among('iop', 29, -1),
         Among('ias', -1, -1),
         Among('ies', -1, -1),
         Among('ais', -1, -1),
         Among('iais', 33, -1),
         Among('os', -1, -1),
         Among('ios', 35, -1),
         Among('uos', 35, -1),
         Among('iuos', 37, -1),
         Among('aus', -1, -1),
         Among('iaus', 39, -1),
         Among('\u0105s', -1, -1),
         Among('i\u0105s', 41, -1),
         Among('\u0119s', -1, -1),
         Among('ut\u0117ait', -1, -1),
         Among('ant', -1, -1),
         Among('iant', 45, -1),
         Among('siant', 46, -1),
         Among('int', -1, -1),
         Among('ot', -1, -1),
         Among('uot', 49, -1),
         Among('iuot', 50, -1),
         Among('yt', -1, -1),
         Among('\u0117t', -1, -1),
         Among('yk\u0161t', -1, -1),
         Among('iau', -1, -1),
         Among('dav', -1, -1),
         Among('sv', -1, -1),
         Among('\u0161v', -1, -1),
         Among('yk\u0161\u010D', -1, -1),
         Among('\u0119', -1, -1),
         Among('\u0117j\u0119', 60, -1)
    ];

    late final List<Among> a_2 = [
         Among('ojime', -1, 7),
         Among('\u0117jime', -1, 3),
         Among('avime', -1, 6),
         Among('okate', -1, 8),
         Among('aite', -1, 1),
         Among('uote', -1, 2),
         Among('asius', -1, 5),
         Among('okat\u0117s', -1, 8),
         Among('ait\u0117s', -1, 1),
         Among('uot\u0117s', -1, 2),
         Among('esiu', -1, 4)
    ];

    late final List<Among> a_3 = [
         Among('\u010D', -1, 1),
         Among('d\u017E', -1, 2)
    ];

    late final List<Among> a_4 = [
         Among('gd', -1, 1)
    ];

    static final List<int> g_v = [17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 64, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 4 ];

    late int I_p1;


    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_step1() {
        if (cursor < I_p1)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_p1;
        ket = cursor;
        if (find_among_b(a_0) == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        if (!r_R1())
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_step2() {
        while(true)
        {
            var v_1 = limit - cursor;
            try {//lab0
                if (cursor < I_p1)
                {
                    throw BreakLab0();
                }
                var v_3 = limit_backward;
                limit_backward = I_p1;
                ket = cursor;
                if (find_among_b(a_1) == 0)
                {
                    limit_backward = v_3;
                    throw BreakLab0();
                }
                bra = cursor;
                limit_backward = v_3;
                slice_del();
                continue;
            } on BreakLab0 catch(_) {}
            cursor = limit - v_1;
            break;
        }
        return true;
    }

    bool r_fix_conflicts() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_from('ait\u0117');
                break;
            case 2:
                slice_from('uot\u0117');
                break;
            case 3:
                slice_from('\u0117jimas');
                break;
            case 4:
                slice_from('esys');
                break;
            case 5:
                slice_from('asys');
                break;
            case 6:
                slice_from('avimas');
                break;
            case 7:
                slice_from('ojimas');
                break;
            case 8:
                slice_from('okat\u0117');
                break;
        }
        return true;
    }

    bool r_fix_chdz() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_3);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_from('t');
                break;
            case 2:
                slice_from('d');
                break;
        }
        return true;
    }

    bool r_fix_gd() {
        ket = cursor;
        if (find_among_b(a_4) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_from('g');
        return true;
    }

    bool stem() {
        I_p1 = limit;
        var v_1 = cursor;
        try {//lab0
            var v_2 = cursor;
            try {//lab1
                var v_3 = cursor;
                if (!(eq_s('a')))
                {
                    cursor = v_2;
                    throw BreakLab1();
                }
                cursor = v_3;
                if (!(current.length > 6))
                {
                    cursor = v_2;
                    throw BreakLab1();
                }
                {
                    var c = cursor + 1;
                    if (c > limit)
                    {
                        cursor = v_2;
                        throw BreakLab1();
                    }
                    cursor = c;
                }
            } on BreakLab1 catch(_) {}
            try { //golab2
                while(true)                 {
                    try {//lab3
                        if (!(in_grouping(g_v, 97, 371)))
                        {
                            throw BreakLab3();
                        }
                        throw BreakLab2();
                    } on BreakLab3 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab2 catch(_) {}
            try { //golab4
                while(true)                 {
                    try {//lab5
                        if (!(out_grouping(g_v, 97, 371)))
                        {
                            throw BreakLab5();
                        }
                        throw BreakLab4();
                    } on BreakLab5 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab4 catch(_) {}
            I_p1 = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        limit_backward = cursor;
        cursor = limit;
        var v_6 = limit - cursor;
        r_fix_conflicts();
        cursor = limit - v_6;
        var v_7 = limit - cursor;
        r_step1();
        cursor = limit - v_7;
        var v_8 = limit - cursor;
        r_fix_chdz();
        cursor = limit - v_8;
        var v_9 = limit - cursor;
        r_step2();
        cursor = limit - v_9;
        var v_10 = limit - cursor;
        r_fix_chdz();
        cursor = limit - v_10;
        var v_11 = limit - cursor;
        r_fix_gd();
        cursor = limit - v_11;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
