// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class nepali_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('\u0932\u093E\u0907', -1, 1),
         Among('\u0932\u093E\u0908', -1, 1),
         Among('\u0938\u0901\u0917', -1, 1),
         Among('\u0938\u0902\u0917', -1, 1),
         Among('\u092E\u093E\u0930\u094D\u092B\u0924', -1, 1),
         Among('\u0930\u0924', -1, 1),
         Among('\u0915\u093E', -1, 2),
         Among('\u092E\u093E', -1, 1),
         Among('\u0926\u094D\u0935\u093E\u0930\u093E', -1, 1),
         Among('\u0915\u093F', -1, 2),
         Among('\u092A\u091B\u093F', -1, 1),
         Among('\u0915\u0940', -1, 2),
         Among('\u0932\u0947', -1, 1),
         Among('\u0915\u0948', -1, 2),
         Among('\u0938\u0901\u0917\u0948', -1, 1),
         Among('\u092E\u0948', -1, 1),
         Among('\u0915\u094B', -1, 2)
    ];

    late final List<Among> a_1 = [
         Among('\u0901', -1, -1),
         Among('\u0902', -1, -1),
         Among('\u0948', -1, -1)
    ];

    late final List<Among> a_2 = [
         Among('\u0901', -1, 1),
         Among('\u0902', -1, 1),
         Among('\u0948', -1, 2)
    ];

    late final List<Among> a_3 = [
         Among('\u0925\u093F\u090F', -1, 1),
         Among('\u091B', -1, 1),
         Among('\u0907\u091B', 1, 1),
         Among('\u090F\u091B', 1, 1),
         Among('\u093F\u091B', 1, 1),
         Among('\u0947\u091B', 1, 1),
         Among('\u0928\u0947\u091B', 5, 1),
         Among('\u0939\u0941\u0928\u0947\u091B', 6, 1),
         Among('\u0907\u0928\u094D\u091B', 1, 1),
         Among('\u093F\u0928\u094D\u091B', 1, 1),
         Among('\u0939\u0941\u0928\u094D\u091B', 1, 1),
         Among('\u090F\u0915\u093E', -1, 1),
         Among('\u0907\u090F\u0915\u093E', 11, 1),
         Among('\u093F\u090F\u0915\u093E', 11, 1),
         Among('\u0947\u0915\u093E', -1, 1),
         Among('\u0928\u0947\u0915\u093E', 14, 1),
         Among('\u0926\u093E', -1, 1),
         Among('\u0907\u0926\u093E', 16, 1),
         Among('\u093F\u0926\u093E', 16, 1),
         Among('\u0926\u0947\u0916\u093F', -1, 1),
         Among('\u092E\u093E\u0925\u093F', -1, 1),
         Among('\u090F\u0915\u0940', -1, 1),
         Among('\u0907\u090F\u0915\u0940', 21, 1),
         Among('\u093F\u090F\u0915\u0940', 21, 1),
         Among('\u0947\u0915\u0940', -1, 1),
         Among('\u0926\u0947\u0916\u0940', -1, 1),
         Among('\u0925\u0940', -1, 1),
         Among('\u0926\u0940', -1, 1),
         Among('\u091B\u0941', -1, 1),
         Among('\u090F\u091B\u0941', 28, 1),
         Among('\u0947\u091B\u0941', 28, 1),
         Among('\u0928\u0947\u091B\u0941', 30, 1),
         Among('\u0928\u0941', -1, 1),
         Among('\u0939\u0930\u0941', -1, 1),
         Among('\u0939\u0930\u0942', -1, 1),
         Among('\u091B\u0947', -1, 1),
         Among('\u0925\u0947', -1, 1),
         Among('\u0928\u0947', -1, 1),
         Among('\u090F\u0915\u0948', -1, 1),
         Among('\u0947\u0915\u0948', -1, 1),
         Among('\u0928\u0947\u0915\u0948', 39, 1),
         Among('\u0926\u0948', -1, 1),
         Among('\u0907\u0926\u0948', 41, 1),
         Among('\u093F\u0926\u0948', 41, 1),
         Among('\u090F\u0915\u094B', -1, 1),
         Among('\u0907\u090F\u0915\u094B', 44, 1),
         Among('\u093F\u090F\u0915\u094B', 44, 1),
         Among('\u0947\u0915\u094B', -1, 1),
         Among('\u0928\u0947\u0915\u094B', 47, 1),
         Among('\u0926\u094B', -1, 1),
         Among('\u0907\u0926\u094B', 49, 1),
         Among('\u093F\u0926\u094B', 49, 1),
         Among('\u092F\u094B', -1, 1),
         Among('\u0907\u092F\u094B', 52, 1),
         Among('\u092D\u092F\u094B', 52, 1),
         Among('\u093F\u092F\u094B', 52, 1),
         Among('\u0925\u093F\u092F\u094B', 55, 1),
         Among('\u0926\u093F\u092F\u094B', 55, 1),
         Among('\u0925\u094D\u092F\u094B', 52, 1),
         Among('\u091B\u094C', -1, 1),
         Among('\u0907\u091B\u094C', 59, 1),
         Among('\u090F\u091B\u094C', 59, 1),
         Among('\u093F\u091B\u094C', 59, 1),
         Among('\u0947\u091B\u094C', 59, 1),
         Among('\u0928\u0947\u091B\u094C', 63, 1),
         Among('\u092F\u094C', -1, 1),
         Among('\u0925\u093F\u092F\u094C', 65, 1),
         Among('\u091B\u094D\u092F\u094C', 65, 1),
         Among('\u0925\u094D\u092F\u094C', 65, 1),
         Among('\u091B\u0928\u094D', -1, 1),
         Among('\u0907\u091B\u0928\u094D', 69, 1),
         Among('\u090F\u091B\u0928\u094D', 69, 1),
         Among('\u093F\u091B\u0928\u094D', 69, 1),
         Among('\u0947\u091B\u0928\u094D', 69, 1),
         Among('\u0928\u0947\u091B\u0928\u094D', 73, 1),
         Among('\u0932\u093E\u0928\u094D', -1, 1),
         Among('\u091B\u093F\u0928\u094D', -1, 1),
         Among('\u0925\u093F\u0928\u094D', -1, 1),
         Among('\u092A\u0930\u094D', -1, 1),
         Among('\u0907\u0938\u094D', -1, 1),
         Among('\u0925\u093F\u0907\u0938\u094D', 79, 1),
         Among('\u091B\u0938\u094D', -1, 1),
         Among('\u0907\u091B\u0938\u094D', 81, 1),
         Among('\u090F\u091B\u0938\u094D', 81, 1),
         Among('\u093F\u091B\u0938\u094D', 81, 1),
         Among('\u0947\u091B\u0938\u094D', 81, 1),
         Among('\u0928\u0947\u091B\u0938\u094D', 85, 1),
         Among('\u093F\u0938\u094D', -1, 1),
         Among('\u0925\u093F\u0938\u094D', 87, 1),
         Among('\u091B\u0947\u0938\u094D', -1, 1),
         Among('\u0939\u094B\u0938\u094D', -1, 1)
    ];



    bool r_remove_category_1() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_0);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        try {//lab2
                            var v_2 = limit - cursor;
                            try {//lab3
                                if (!(eq_s_b('\u090F')))
                                {
                                    throw BreakLab3();
                                }
                                throw BreakLab2();
                            } on BreakLab3 catch(_) {}
                            cursor = limit - v_2;
                            if (!(eq_s_b('\u0947')))
                            {
                                throw BreakLab1();
                            }
                        } on BreakLab2 catch(_) {}
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    slice_del();
                } on BreakLab0 catch(_) {}
                break;
        }
        return true;
    }

    bool r_check_category_2() {
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            return false;
        }
        bra = cursor;
        return true;
    }

    bool r_remove_category_2() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        if (!(eq_s_b('\u092F\u094C')))
                        {
                            throw BreakLab1();
                        }
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    try {//lab2
                        if (!(eq_s_b('\u091B\u094C')))
                        {
                            throw BreakLab2();
                        }
                        throw BreakLab0();
                    } on BreakLab2 catch(_) {}
                    cursor = limit - v_1;
                    try {//lab3
                        if (!(eq_s_b('\u0928\u094C')))
                        {
                            throw BreakLab3();
                        }
                        throw BreakLab0();
                    } on BreakLab3 catch(_) {}
                    cursor = limit - v_1;
                    if (!(eq_s_b('\u0925\u0947')))
                    {
                        return false;
                    }
                } on BreakLab0 catch(_) {}
                slice_del();
                break;
            case 2:
                if (!(eq_s_b('\u0924\u094D\u0930')))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_remove_category_3() {
        ket = cursor;
        if (find_among_b(a_3) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        return true;
    }

    bool stem() {
        limit_backward = cursor;
        cursor = limit;
        var v_1 = limit - cursor;
        r_remove_category_1();
        cursor = limit - v_1;
        var v_2 = limit - cursor;
        try {//lab0
            while(true)
            {
                var v_3 = limit - cursor;
                try {//lab1
                    var v_4 = limit - cursor;
                    try {//lab2
                        var v_5 = limit - cursor;
                        if (!r_check_category_2())
                        {
                            throw BreakLab2();
                        }
                        cursor = limit - v_5;
                        if (!r_remove_category_2())
                        {
                            throw BreakLab2();
                        }
                    } on BreakLab2 catch(_) {}
                    cursor = limit - v_4;
                    if (!r_remove_category_3())
                    {
                        throw BreakLab1();
                    }
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = limit - v_3;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = limit - v_2;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
