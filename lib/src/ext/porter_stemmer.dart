// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class porter_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('s', -1, 3),
         Among('ies', 0, 2),
         Among('sses', 0, 1),
         Among('ss', 0, -1)
    ];

    late final List<Among> a_1 = [
         Among('', -1, 3),
         Among('bb', 0, 2),
         Among('dd', 0, 2),
         Among('ff', 0, 2),
         Among('gg', 0, 2),
         Among('bl', 0, 1),
         Among('mm', 0, 2),
         Among('nn', 0, 2),
         Among('pp', 0, 2),
         Among('rr', 0, 2),
         Among('at', 0, 1),
         Among('tt', 0, 2),
         Among('iz', 0, 1)
    ];

    late final List<Among> a_2 = [
         Among('ed', -1, 2),
         Among('eed', 0, 1),
         Among('ing', -1, 2)
    ];

    late final List<Among> a_3 = [
         Among('anci', -1, 3),
         Among('enci', -1, 2),
         Among('abli', -1, 4),
         Among('eli', -1, 6),
         Among('alli', -1, 9),
         Among('ousli', -1, 11),
         Among('entli', -1, 5),
         Among('aliti', -1, 9),
         Among('biliti', -1, 13),
         Among('iviti', -1, 12),
         Among('tional', -1, 1),
         Among('ational', 10, 8),
         Among('alism', -1, 9),
         Among('ation', -1, 8),
         Among('ization', 13, 7),
         Among('izer', -1, 7),
         Among('ator', -1, 8),
         Among('iveness', -1, 12),
         Among('fulness', -1, 10),
         Among('ousness', -1, 11)
    ];

    late final List<Among> a_4 = [
         Among('icate', -1, 2),
         Among('ative', -1, 3),
         Among('alize', -1, 1),
         Among('iciti', -1, 2),
         Among('ical', -1, 2),
         Among('ful', -1, 3),
         Among('ness', -1, 3)
    ];

    late final List<Among> a_5 = [
         Among('ic', -1, 1),
         Among('ance', -1, 1),
         Among('ence', -1, 1),
         Among('able', -1, 1),
         Among('ible', -1, 1),
         Among('ate', -1, 1),
         Among('ive', -1, 1),
         Among('ize', -1, 1),
         Among('iti', -1, 1),
         Among('al', -1, 1),
         Among('ism', -1, 1),
         Among('ion', -1, 2),
         Among('er', -1, 1),
         Among('ous', -1, 1),
         Among('ant', -1, 1),
         Among('ent', -1, 1),
         Among('ment', 15, 1),
         Among('ement', 16, 1),
         Among('ou', -1, 1)
    ];

    static final List<int> g_v = [17, 65, 16, 1 ];

    static final List<int> g_v_WXY = [1, 17, 65, 208, 1 ];

    late bool B_Y_found;
    late int I_p2;
    late int I_p1;


    bool r_shortv() {
        if (!(out_grouping_b(g_v_WXY, 89, 121)))
        {
            return false;
        }
        if (!(in_grouping_b(g_v, 97, 121)))
        {
            return false;
        }
        if (!(out_grouping_b(g_v, 97, 121)))
        {
            return false;
        }
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_Step_1a() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_0);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_from('ss');
                break;
            case 2:
                slice_from('i');
                break;
            case 3:
                slice_del();
                break;
        }
        return true;
    }

    bool r_Step_1b() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R1())
                {
                    return false;
                }
                slice_from('ee');
                break;
            case 2:
                var v_1 = limit - cursor;
                try { //golab0
                    while(true)                     {
                        try {//lab1
                            if (!(in_grouping_b(g_v, 97, 121)))
                            {
                                throw BreakLab1();
                            }
                            throw BreakLab0();
                        } on BreakLab1 catch(_) {}
                        if (cursor <= limit_backward)
                        {
                            return false;
                        }
                        cursor--;
                    }
                } on BreakLab0 catch(_) {}
                cursor = limit - v_1;
                slice_del();
                var v_3 = limit - cursor;
                among_var = find_among_b(a_1);
                if (among_var == 0)
                {
                    return false;
                }
                cursor = limit - v_3;
                switch (among_var) {
                    case 1:
                        {
                            var c = cursor;
                            insert(cursor, cursor, 'e');
                            cursor = c;
                        }
                        break;
                    case 2:
                        ket = cursor;
                        if (cursor <= limit_backward)
                        {
                            return false;
                        }
                        cursor--;
                        bra = cursor;
                        slice_del();
                        break;
                    case 3:
                        if (cursor != I_p1)
                        {
                            return false;
                        }
                        var v_4 = limit - cursor;
                        if (!r_shortv())
                        {
                            return false;
                        }
                        cursor = limit - v_4;
                        {
                            var c = cursor;
                            insert(cursor, cursor, 'e');
                            cursor = c;
                        }
                        break;
                }
                break;
        }
        return true;
    }

    bool r_Step_1c() {
        ket = cursor;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!(eq_s_b('y')))
                {
                    throw BreakLab1();
                }
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            if (!(eq_s_b('Y')))
            {
                return false;
            }
        } on BreakLab0 catch(_) {}
        bra = cursor;
        try { //golab2
            while(true)             {
                try {//lab3
                    if (!(in_grouping_b(g_v, 97, 121)))
                    {
                        throw BreakLab3();
                    }
                    throw BreakLab2();
                } on BreakLab3 catch(_) {}
                if (cursor <= limit_backward)
                {
                    return false;
                }
                cursor--;
            }
        } on BreakLab2 catch(_) {}
        slice_from('i');
        return true;
    }

    bool r_Step_2() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_3);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_from('tion');
                break;
            case 2:
                slice_from('ence');
                break;
            case 3:
                slice_from('ance');
                break;
            case 4:
                slice_from('able');
                break;
            case 5:
                slice_from('ent');
                break;
            case 6:
                slice_from('e');
                break;
            case 7:
                slice_from('ize');
                break;
            case 8:
                slice_from('ate');
                break;
            case 9:
                slice_from('al');
                break;
            case 10:
                slice_from('ful');
                break;
            case 11:
                slice_from('ous');
                break;
            case 12:
                slice_from('ive');
                break;
            case 13:
                slice_from('ble');
                break;
        }
        return true;
    }

    bool r_Step_3() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_4);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_from('al');
                break;
            case 2:
                slice_from('ic');
                break;
            case 3:
                slice_del();
                break;
        }
        return true;
    }

    bool r_Step_4() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_5);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R2())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                slice_del();
                break;
            case 2:
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        if (!(eq_s_b('s')))
                        {
                            throw BreakLab1();
                        }
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    if (!(eq_s_b('t')))
                    {
                        return false;
                    }
                } on BreakLab0 catch(_) {}
                slice_del();
                break;
        }
        return true;
    }

    bool r_Step_5a() {
        ket = cursor;
        if (!(eq_s_b('e')))
        {
            return false;
        }
        bra = cursor;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!r_R2())
                {
                    throw BreakLab1();
                }
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            if (!r_R1())
            {
                return false;
            }
            {
                var v_2 = limit - cursor;
                try {//lab2
                    if (!r_shortv())
                    {
                        throw BreakLab2();
                    }
                    return false;
                } on BreakLab2 catch(_) {}
                cursor = limit - v_2;
            }
        } on BreakLab0 catch(_) {}
        slice_del();
        return true;
    }

    bool r_Step_5b() {
        ket = cursor;
        if (!(eq_s_b('l')))
        {
            return false;
        }
        bra = cursor;
        if (!r_R2())
        {
            return false;
        }
        if (!(eq_s_b('l')))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool stem() {
        B_Y_found = false;
        var v_1 = cursor;
        try {//lab0
            bra = cursor;
            if (!(eq_s('y')))
            {
                throw BreakLab0();
            }
            ket = cursor;
            slice_from('Y');
            B_Y_found = true;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_2 = cursor;
        try {//lab1
            while(true)
            {
                var v_3 = cursor;
                try {//lab2
                    try { //golab3
                        while(true)                         {
                            var v_4 = cursor;
                            try {//lab4
                                if (!(in_grouping(g_v, 97, 121)))
                                {
                                    throw BreakLab4();
                                }
                                bra = cursor;
                                if (!(eq_s('y')))
                                {
                                    throw BreakLab4();
                                }
                                ket = cursor;
                                cursor = v_4;
                                throw BreakLab3();
                            } on BreakLab4 catch(_) {}
                            cursor = v_4;
                            if (cursor >= limit)
                            {
                                throw BreakLab2();
                            }
                            cursor++;
                        }
                    } on BreakLab3 catch(_) {}
                    slice_from('Y');
                    B_Y_found = true;
                    continue;
                } on BreakLab2 catch(_) {}
                cursor = v_3;
                break;
            }
        } on BreakLab1 catch(_) {}
        cursor = v_2;
        I_p1 = limit;
        I_p2 = limit;
        var v_5 = cursor;
        try {//lab5
            try { //golab6
                while(true)                 {
                    try {//lab7
                        if (!(in_grouping(g_v, 97, 121)))
                        {
                            throw BreakLab7();
                        }
                        throw BreakLab6();
                    } on BreakLab7 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab5();
                    }
                    cursor++;
                }
            } on BreakLab6 catch(_) {}
            try { //golab8
                while(true)                 {
                    try {//lab9
                        if (!(out_grouping(g_v, 97, 121)))
                        {
                            throw BreakLab9();
                        }
                        throw BreakLab8();
                    } on BreakLab9 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab5();
                    }
                    cursor++;
                }
            } on BreakLab8 catch(_) {}
            I_p1 = cursor;
            try { //golab10
                while(true)                 {
                    try {//lab11
                        if (!(in_grouping(g_v, 97, 121)))
                        {
                            throw BreakLab11();
                        }
                        throw BreakLab10();
                    } on BreakLab11 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab5();
                    }
                    cursor++;
                }
            } on BreakLab10 catch(_) {}
            try { //golab12
                while(true)                 {
                    try {//lab13
                        if (!(out_grouping(g_v, 97, 121)))
                        {
                            throw BreakLab13();
                        }
                        throw BreakLab12();
                    } on BreakLab13 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab5();
                    }
                    cursor++;
                }
            } on BreakLab12 catch(_) {}
            I_p2 = cursor;
        } on BreakLab5 catch(_) {}
        cursor = v_5;
        limit_backward = cursor;
        cursor = limit;
        var v_10 = limit - cursor;
        r_Step_1a();
        cursor = limit - v_10;
        var v_11 = limit - cursor;
        r_Step_1b();
        cursor = limit - v_11;
        var v_12 = limit - cursor;
        r_Step_1c();
        cursor = limit - v_12;
        var v_13 = limit - cursor;
        r_Step_2();
        cursor = limit - v_13;
        var v_14 = limit - cursor;
        r_Step_3();
        cursor = limit - v_14;
        var v_15 = limit - cursor;
        r_Step_4();
        cursor = limit - v_15;
        var v_16 = limit - cursor;
        r_Step_5a();
        cursor = limit - v_16;
        var v_17 = limit - cursor;
        r_Step_5b();
        cursor = limit - v_17;
        cursor = limit_backward;
        var v_18 = cursor;
        try {//lab14
            if (!(B_Y_found))
            {
                throw BreakLab14();
            }
            while(true)
            {
                var v_19 = cursor;
                try {//lab15
                    try { //golab16
                        while(true)                         {
                            var v_20 = cursor;
                            try {//lab17
                                bra = cursor;
                                if (!(eq_s('Y')))
                                {
                                    throw BreakLab17();
                                }
                                ket = cursor;
                                cursor = v_20;
                                throw BreakLab16();
                            } on BreakLab17 catch(_) {}
                            cursor = v_20;
                            if (cursor >= limit)
                            {
                                throw BreakLab15();
                            }
                            cursor++;
                        }
                    } on BreakLab16 catch(_) {}
                    slice_from('y');
                    continue;
                } on BreakLab15 catch(_) {}
                cursor = v_19;
                break;
            }
        } on BreakLab14 catch(_) {}
        cursor = v_18;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
