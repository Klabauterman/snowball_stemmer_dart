// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class portuguese_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('', -1, 3),
         Among('\u00E3', 0, 1),
         Among('\u00F5', 0, 2)
    ];

    late final List<Among> a_1 = [
         Among('', -1, 3),
         Among('a~', 0, 1),
         Among('o~', 0, 2)
    ];

    late final List<Among> a_2 = [
         Among('ic', -1, -1),
         Among('ad', -1, -1),
         Among('os', -1, -1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_3 = [
         Among('ante', -1, 1),
         Among('avel', -1, 1),
         Among('\u00EDvel', -1, 1)
    ];

    late final List<Among> a_4 = [
         Among('ic', -1, 1),
         Among('abil', -1, 1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_5 = [
         Among('ica', -1, 1),
         Among('\u00E2ncia', -1, 1),
         Among('\u00EAncia', -1, 4),
         Among('logia', -1, 2),
         Among('ira', -1, 9),
         Among('adora', -1, 1),
         Among('osa', -1, 1),
         Among('ista', -1, 1),
         Among('iva', -1, 8),
         Among('eza', -1, 1),
         Among('idade', -1, 7),
         Among('ante', -1, 1),
         Among('mente', -1, 6),
         Among('amente', 12, 5),
         Among('\u00E1vel', -1, 1),
         Among('\u00EDvel', -1, 1),
         Among('ico', -1, 1),
         Among('ismo', -1, 1),
         Among('oso', -1, 1),
         Among('amento', -1, 1),
         Among('imento', -1, 1),
         Among('ivo', -1, 8),
         Among('a\u00E7a~o', -1, 1),
         Among('u\u00E7a~o', -1, 3),
         Among('ador', -1, 1),
         Among('icas', -1, 1),
         Among('\u00EAncias', -1, 4),
         Among('logias', -1, 2),
         Among('iras', -1, 9),
         Among('adoras', -1, 1),
         Among('osas', -1, 1),
         Among('istas', -1, 1),
         Among('ivas', -1, 8),
         Among('ezas', -1, 1),
         Among('idades', -1, 7),
         Among('adores', -1, 1),
         Among('antes', -1, 1),
         Among('a\u00E7o~es', -1, 1),
         Among('u\u00E7o~es', -1, 3),
         Among('icos', -1, 1),
         Among('ismos', -1, 1),
         Among('osos', -1, 1),
         Among('amentos', -1, 1),
         Among('imentos', -1, 1),
         Among('ivos', -1, 8)
    ];

    late final List<Among> a_6 = [
         Among('ada', -1, 1),
         Among('ida', -1, 1),
         Among('ia', -1, 1),
         Among('aria', 2, 1),
         Among('eria', 2, 1),
         Among('iria', 2, 1),
         Among('ara', -1, 1),
         Among('era', -1, 1),
         Among('ira', -1, 1),
         Among('ava', -1, 1),
         Among('asse', -1, 1),
         Among('esse', -1, 1),
         Among('isse', -1, 1),
         Among('aste', -1, 1),
         Among('este', -1, 1),
         Among('iste', -1, 1),
         Among('ei', -1, 1),
         Among('arei', 16, 1),
         Among('erei', 16, 1),
         Among('irei', 16, 1),
         Among('am', -1, 1),
         Among('iam', 20, 1),
         Among('ariam', 21, 1),
         Among('eriam', 21, 1),
         Among('iriam', 21, 1),
         Among('aram', 20, 1),
         Among('eram', 20, 1),
         Among('iram', 20, 1),
         Among('avam', 20, 1),
         Among('em', -1, 1),
         Among('arem', 29, 1),
         Among('erem', 29, 1),
         Among('irem', 29, 1),
         Among('assem', 29, 1),
         Among('essem', 29, 1),
         Among('issem', 29, 1),
         Among('ado', -1, 1),
         Among('ido', -1, 1),
         Among('ando', -1, 1),
         Among('endo', -1, 1),
         Among('indo', -1, 1),
         Among('ara~o', -1, 1),
         Among('era~o', -1, 1),
         Among('ira~o', -1, 1),
         Among('ar', -1, 1),
         Among('er', -1, 1),
         Among('ir', -1, 1),
         Among('as', -1, 1),
         Among('adas', 47, 1),
         Among('idas', 47, 1),
         Among('ias', 47, 1),
         Among('arias', 50, 1),
         Among('erias', 50, 1),
         Among('irias', 50, 1),
         Among('aras', 47, 1),
         Among('eras', 47, 1),
         Among('iras', 47, 1),
         Among('avas', 47, 1),
         Among('es', -1, 1),
         Among('ardes', 58, 1),
         Among('erdes', 58, 1),
         Among('irdes', 58, 1),
         Among('ares', 58, 1),
         Among('eres', 58, 1),
         Among('ires', 58, 1),
         Among('asses', 58, 1),
         Among('esses', 58, 1),
         Among('isses', 58, 1),
         Among('astes', 58, 1),
         Among('estes', 58, 1),
         Among('istes', 58, 1),
         Among('is', -1, 1),
         Among('ais', 71, 1),
         Among('eis', 71, 1),
         Among('areis', 73, 1),
         Among('ereis', 73, 1),
         Among('ireis', 73, 1),
         Among('\u00E1reis', 73, 1),
         Among('\u00E9reis', 73, 1),
         Among('\u00EDreis', 73, 1),
         Among('\u00E1sseis', 73, 1),
         Among('\u00E9sseis', 73, 1),
         Among('\u00EDsseis', 73, 1),
         Among('\u00E1veis', 73, 1),
         Among('\u00EDeis', 73, 1),
         Among('ar\u00EDeis', 84, 1),
         Among('er\u00EDeis', 84, 1),
         Among('ir\u00EDeis', 84, 1),
         Among('ados', -1, 1),
         Among('idos', -1, 1),
         Among('amos', -1, 1),
         Among('\u00E1ramos', 90, 1),
         Among('\u00E9ramos', 90, 1),
         Among('\u00EDramos', 90, 1),
         Among('\u00E1vamos', 90, 1),
         Among('\u00EDamos', 90, 1),
         Among('ar\u00EDamos', 95, 1),
         Among('er\u00EDamos', 95, 1),
         Among('ir\u00EDamos', 95, 1),
         Among('emos', -1, 1),
         Among('aremos', 99, 1),
         Among('eremos', 99, 1),
         Among('iremos', 99, 1),
         Among('\u00E1ssemos', 99, 1),
         Among('\u00EAssemos', 99, 1),
         Among('\u00EDssemos', 99, 1),
         Among('imos', -1, 1),
         Among('armos', -1, 1),
         Among('ermos', -1, 1),
         Among('irmos', -1, 1),
         Among('\u00E1mos', -1, 1),
         Among('ar\u00E1s', -1, 1),
         Among('er\u00E1s', -1, 1),
         Among('ir\u00E1s', -1, 1),
         Among('eu', -1, 1),
         Among('iu', -1, 1),
         Among('ou', -1, 1),
         Among('ar\u00E1', -1, 1),
         Among('er\u00E1', -1, 1),
         Among('ir\u00E1', -1, 1)
    ];

    late final List<Among> a_7 = [
         Among('a', -1, 1),
         Among('i', -1, 1),
         Among('o', -1, 1),
         Among('os', -1, 1),
         Among('\u00E1', -1, 1),
         Among('\u00ED', -1, 1),
         Among('\u00F3', -1, 1)
    ];

    late final List<Among> a_8 = [
         Among('e', -1, 1),
         Among('\u00E7', -1, 2),
         Among('\u00E9', -1, 1),
         Among('\u00EA', -1, 1)
    ];

    static final List<int> g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 19, 12, 2 ];

    late int I_p2;
    late int I_p1;
    late int I_pV;


    bool r_prelude() {
        var among_var;
        while(true)
        {
            var v_1 = cursor;
            try {//lab0
                bra = cursor;
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    throw BreakLab0();
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from('a~');
                        break;
                    case 2:
                        slice_from('o~');
                        break;
                    case 3:
                        if (cursor >= limit)
                        {
                            throw BreakLab0();
                        }
                        cursor++;
                        break;
                }
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
            break;
        }
        return true;
    }

    bool r_mark_regions() {
        I_pV = limit;
        I_p1 = limit;
        I_p2 = limit;
        var v_1 = cursor;
        try {//lab0
            try {//lab1
                var v_2 = cursor;
                try {//lab2
                    if (!(in_grouping(g_v, 97, 250)))
                    {
                        throw BreakLab2();
                    }
                    try {//lab3
                        var v_3 = cursor;
                        try {//lab4
                            if (!(out_grouping(g_v, 97, 250)))
                            {
                                throw BreakLab4();
                            }
                            try { //golab5
                                while(true)                                 {
                                    try {//lab6
                                        if (!(in_grouping(g_v, 97, 250)))
                                        {
                                            throw BreakLab6();
                                        }
                                        throw BreakLab5();
                                    } on BreakLab6 catch(_) {}
                                    if (cursor >= limit)
                                    {
                                        throw BreakLab4();
                                    }
                                    cursor++;
                                }
                            } on BreakLab5 catch(_) {}
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = v_3;
                        if (!(in_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab2();
                        }
                        try { //golab7
                            while(true)                             {
                                try {//lab8
                                    if (!(out_grouping(g_v, 97, 250)))
                                    {
                                        throw BreakLab8();
                                    }
                                    throw BreakLab7();
                                } on BreakLab8 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab2();
                                }
                                cursor++;
                            }
                        } on BreakLab7 catch(_) {}
                    } on BreakLab3 catch(_) {}
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = v_2;
                if (!(out_grouping(g_v, 97, 250)))
                {
                    throw BreakLab0();
                }
                try {//lab9
                    var v_6 = cursor;
                    try {//lab10
                        if (!(out_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab10();
                        }
                        try { //golab11
                            while(true)                             {
                                try {//lab12
                                    if (!(in_grouping(g_v, 97, 250)))
                                    {
                                        throw BreakLab12();
                                    }
                                    throw BreakLab11();
                                } on BreakLab12 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab10();
                                }
                                cursor++;
                            }
                        } on BreakLab11 catch(_) {}
                        throw BreakLab9();
                    } on BreakLab10 catch(_) {}
                    cursor = v_6;
                    if (!(in_grouping(g_v, 97, 250)))
                    {
                        throw BreakLab0();
                    }
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                } on BreakLab9 catch(_) {}
            } on BreakLab1 catch(_) {}
            I_pV = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_8 = cursor;
        try {//lab13
            try { //golab14
                while(true)                 {
                    try {//lab15
                        if (!(in_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab15();
                        }
                        throw BreakLab14();
                    } on BreakLab15 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab14 catch(_) {}
            try { //golab16
                while(true)                 {
                    try {//lab17
                        if (!(out_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab17();
                        }
                        throw BreakLab16();
                    } on BreakLab17 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab16 catch(_) {}
            I_p1 = cursor;
            try { //golab18
                while(true)                 {
                    try {//lab19
                        if (!(in_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab19();
                        }
                        throw BreakLab18();
                    } on BreakLab19 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab18 catch(_) {}
            try { //golab20
                while(true)                 {
                    try {//lab21
                        if (!(out_grouping(g_v, 97, 250)))
                        {
                            throw BreakLab21();
                        }
                        throw BreakLab20();
                    } on BreakLab21 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab20 catch(_) {}
            I_p2 = cursor;
        } on BreakLab13 catch(_) {}
        cursor = v_8;
        return true;
    }

    bool r_postlude() {
        var among_var;
        while(true)
        {
            var v_1 = cursor;
            try {//lab0
                bra = cursor;
                among_var = find_among(a_1);
                if (among_var == 0)
                {
                    throw BreakLab0();
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from('\u00E3');
                        break;
                    case 2:
                        slice_from('\u00F5');
                        break;
                    case 3:
                        if (cursor >= limit)
                        {
                            throw BreakLab0();
                        }
                        cursor++;
                        break;
                }
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
            break;
        }
        return true;
    }

    bool r_RV() {
        if (!(I_pV <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_standard_suffix() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_5);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('log');
                break;
            case 3:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('u');
                break;
            case 4:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('ente');
                break;
            case 5:
                if (!r_R1())
                {
                    return false;
                }
                slice_del();
                var v_1 = limit - cursor;
                try {//lab0
                    ket = cursor;
                    among_var = find_among_b(a_2);
                    if (among_var == 0)
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    slice_del();
                    switch (among_var) {
                        case 1:
                            ket = cursor;
                            if (!(eq_s_b('at')))
                            {
                                cursor = limit - v_1;
                                throw BreakLab0();
                            }
                            bra = cursor;
                            if (!r_R2())
                            {
                                cursor = limit - v_1;
                                throw BreakLab0();
                            }
                            slice_del();
                            break;
                    }
                } on BreakLab0 catch(_) {}
                break;
            case 6:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_2 = limit - cursor;
                try {//lab1
                    ket = cursor;
                    if (find_among_b(a_3) == 0)
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    slice_del();
                } on BreakLab1 catch(_) {}
                break;
            case 7:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_3 = limit - cursor;
                try {//lab2
                    ket = cursor;
                    if (find_among_b(a_4) == 0)
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    slice_del();
                } on BreakLab2 catch(_) {}
                break;
            case 8:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_4 = limit - cursor;
                try {//lab3
                    ket = cursor;
                    if (!(eq_s_b('at')))
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    slice_del();
                } on BreakLab3 catch(_) {}
                break;
            case 9:
                if (!r_RV())
                {
                    return false;
                }
                if (!(eq_s_b('e')))
                {
                    return false;
                }
                slice_from('ir');
                break;
        }
        return true;
    }

    bool r_verb_suffix() {
        if (cursor < I_pV)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_pV;
        ket = cursor;
        if (find_among_b(a_6) == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        slice_del();
        limit_backward = v_2;
        return true;
    }

    bool r_residual_suffix() {
        ket = cursor;
        if (find_among_b(a_7) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_RV())
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_residual_form() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_8);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                ket = cursor;
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        if (!(eq_s_b('u')))
                        {
                            throw BreakLab1();
                        }
                        bra = cursor;
                        var v_2 = limit - cursor;
                        if (!(eq_s_b('g')))
                        {
                            throw BreakLab1();
                        }
                        cursor = limit - v_2;
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    if (!(eq_s_b('i')))
                    {
                        return false;
                    }
                    bra = cursor;
                    var v_3 = limit - cursor;
                    if (!(eq_s_b('c')))
                    {
                        return false;
                    }
                    cursor = limit - v_3;
                } on BreakLab0 catch(_) {}
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                slice_from('c');
                break;
        }
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        r_prelude();
        cursor = v_1;
        r_mark_regions();
        limit_backward = cursor;
        cursor = limit;
        var v_3 = limit - cursor;
        try {//lab0
            try {//lab1
                var v_4 = limit - cursor;
                try {//lab2
                    var v_5 = limit - cursor;
                    try {//lab3
                        var v_6 = limit - cursor;
                        try {//lab4
                            if (!r_standard_suffix())
                            {
                                throw BreakLab4();
                            }
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = limit - v_6;
                        if (!r_verb_suffix())
                        {
                            throw BreakLab2();
                        }
                    } on BreakLab3 catch(_) {}
                    cursor = limit - v_5;
                    var v_7 = limit - cursor;
                    try {//lab5
                        ket = cursor;
                        if (!(eq_s_b('i')))
                        {
                            throw BreakLab5();
                        }
                        bra = cursor;
                        var v_8 = limit - cursor;
                        if (!(eq_s_b('c')))
                        {
                            throw BreakLab5();
                        }
                        cursor = limit - v_8;
                        if (!r_RV())
                        {
                            throw BreakLab5();
                        }
                        slice_del();
                    } on BreakLab5 catch(_) {}
                    cursor = limit - v_7;
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = limit - v_4;
                if (!r_residual_suffix())
                {
                    throw BreakLab0();
                }
            } on BreakLab1 catch(_) {}
        } on BreakLab0 catch(_) {}
        cursor = limit - v_3;
        var v_9 = limit - cursor;
        r_residual_form();
        cursor = limit - v_9;
        cursor = limit_backward;
        var v_10 = cursor;
        r_postlude();
        cursor = v_10;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
