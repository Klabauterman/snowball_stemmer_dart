// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class russian_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('\u0432', -1, 1),
         Among('\u0438\u0432', 0, 2),
         Among('\u044B\u0432', 0, 2),
         Among('\u0432\u0448\u0438', -1, 1),
         Among('\u0438\u0432\u0448\u0438', 3, 2),
         Among('\u044B\u0432\u0448\u0438', 3, 2),
         Among('\u0432\u0448\u0438\u0441\u044C', -1, 1),
         Among('\u0438\u0432\u0448\u0438\u0441\u044C', 6, 2),
         Among('\u044B\u0432\u0448\u0438\u0441\u044C', 6, 2)
    ];

    late final List<Among> a_1 = [
         Among('\u0435\u0435', -1, 1),
         Among('\u0438\u0435', -1, 1),
         Among('\u043E\u0435', -1, 1),
         Among('\u044B\u0435', -1, 1),
         Among('\u0438\u043C\u0438', -1, 1),
         Among('\u044B\u043C\u0438', -1, 1),
         Among('\u0435\u0439', -1, 1),
         Among('\u0438\u0439', -1, 1),
         Among('\u043E\u0439', -1, 1),
         Among('\u044B\u0439', -1, 1),
         Among('\u0435\u043C', -1, 1),
         Among('\u0438\u043C', -1, 1),
         Among('\u043E\u043C', -1, 1),
         Among('\u044B\u043C', -1, 1),
         Among('\u0435\u0433\u043E', -1, 1),
         Among('\u043E\u0433\u043E', -1, 1),
         Among('\u0435\u043C\u0443', -1, 1),
         Among('\u043E\u043C\u0443', -1, 1),
         Among('\u0438\u0445', -1, 1),
         Among('\u044B\u0445', -1, 1),
         Among('\u0435\u044E', -1, 1),
         Among('\u043E\u044E', -1, 1),
         Among('\u0443\u044E', -1, 1),
         Among('\u044E\u044E', -1, 1),
         Among('\u0430\u044F', -1, 1),
         Among('\u044F\u044F', -1, 1)
    ];

    late final List<Among> a_2 = [
         Among('\u0435\u043C', -1, 1),
         Among('\u043D\u043D', -1, 1),
         Among('\u0432\u0448', -1, 1),
         Among('\u0438\u0432\u0448', 2, 2),
         Among('\u044B\u0432\u0448', 2, 2),
         Among('\u0449', -1, 1),
         Among('\u044E\u0449', 5, 1),
         Among('\u0443\u044E\u0449', 6, 2)
    ];

    late final List<Among> a_3 = [
         Among('\u0441\u044C', -1, 1),
         Among('\u0441\u044F', -1, 1)
    ];

    late final List<Among> a_4 = [
         Among('\u043B\u0430', -1, 1),
         Among('\u0438\u043B\u0430', 0, 2),
         Among('\u044B\u043B\u0430', 0, 2),
         Among('\u043D\u0430', -1, 1),
         Among('\u0435\u043D\u0430', 3, 2),
         Among('\u0435\u0442\u0435', -1, 1),
         Among('\u0438\u0442\u0435', -1, 2),
         Among('\u0439\u0442\u0435', -1, 1),
         Among('\u0435\u0439\u0442\u0435', 7, 2),
         Among('\u0443\u0439\u0442\u0435', 7, 2),
         Among('\u043B\u0438', -1, 1),
         Among('\u0438\u043B\u0438', 10, 2),
         Among('\u044B\u043B\u0438', 10, 2),
         Among('\u0439', -1, 1),
         Among('\u0435\u0439', 13, 2),
         Among('\u0443\u0439', 13, 2),
         Among('\u043B', -1, 1),
         Among('\u0438\u043B', 16, 2),
         Among('\u044B\u043B', 16, 2),
         Among('\u0435\u043C', -1, 1),
         Among('\u0438\u043C', -1, 2),
         Among('\u044B\u043C', -1, 2),
         Among('\u043D', -1, 1),
         Among('\u0435\u043D', 22, 2),
         Among('\u043B\u043E', -1, 1),
         Among('\u0438\u043B\u043E', 24, 2),
         Among('\u044B\u043B\u043E', 24, 2),
         Among('\u043D\u043E', -1, 1),
         Among('\u0435\u043D\u043E', 27, 2),
         Among('\u043D\u043D\u043E', 27, 1),
         Among('\u0435\u0442', -1, 1),
         Among('\u0443\u0435\u0442', 30, 2),
         Among('\u0438\u0442', -1, 2),
         Among('\u044B\u0442', -1, 2),
         Among('\u044E\u0442', -1, 1),
         Among('\u0443\u044E\u0442', 34, 2),
         Among('\u044F\u0442', -1, 2),
         Among('\u043D\u044B', -1, 1),
         Among('\u0435\u043D\u044B', 37, 2),
         Among('\u0442\u044C', -1, 1),
         Among('\u0438\u0442\u044C', 39, 2),
         Among('\u044B\u0442\u044C', 39, 2),
         Among('\u0435\u0448\u044C', -1, 1),
         Among('\u0438\u0448\u044C', -1, 2),
         Among('\u044E', -1, 2),
         Among('\u0443\u044E', 44, 2)
    ];

    late final List<Among> a_5 = [
         Among('\u0430', -1, 1),
         Among('\u0435\u0432', -1, 1),
         Among('\u043E\u0432', -1, 1),
         Among('\u0435', -1, 1),
         Among('\u0438\u0435', 3, 1),
         Among('\u044C\u0435', 3, 1),
         Among('\u0438', -1, 1),
         Among('\u0435\u0438', 6, 1),
         Among('\u0438\u0438', 6, 1),
         Among('\u0430\u043C\u0438', 6, 1),
         Among('\u044F\u043C\u0438', 6, 1),
         Among('\u0438\u044F\u043C\u0438', 10, 1),
         Among('\u0439', -1, 1),
         Among('\u0435\u0439', 12, 1),
         Among('\u0438\u0435\u0439', 13, 1),
         Among('\u0438\u0439', 12, 1),
         Among('\u043E\u0439', 12, 1),
         Among('\u0430\u043C', -1, 1),
         Among('\u0435\u043C', -1, 1),
         Among('\u0438\u0435\u043C', 18, 1),
         Among('\u043E\u043C', -1, 1),
         Among('\u044F\u043C', -1, 1),
         Among('\u0438\u044F\u043C', 21, 1),
         Among('\u043E', -1, 1),
         Among('\u0443', -1, 1),
         Among('\u0430\u0445', -1, 1),
         Among('\u044F\u0445', -1, 1),
         Among('\u0438\u044F\u0445', 26, 1),
         Among('\u044B', -1, 1),
         Among('\u044C', -1, 1),
         Among('\u044E', -1, 1),
         Among('\u0438\u044E', 30, 1),
         Among('\u044C\u044E', 30, 1),
         Among('\u044F', -1, 1),
         Among('\u0438\u044F', 33, 1),
         Among('\u044C\u044F', 33, 1)
    ];

    late final List<Among> a_6 = [
         Among('\u043E\u0441\u0442', -1, 1),
         Among('\u043E\u0441\u0442\u044C', -1, 1)
    ];

    late final List<Among> a_7 = [
         Among('\u0435\u0439\u0448\u0435', -1, 1),
         Among('\u043D', -1, 2),
         Among('\u0435\u0439\u0448', -1, 1),
         Among('\u044C', -1, 3)
    ];

    static final List<int> g_v = [33, 65, 8, 232 ];

    late int I_p2;
    late int I_pV;


    bool r_mark_regions() {
        I_pV = limit;
        I_p2 = limit;
        var v_1 = cursor;
        try {//lab0
            try { //golab1
                while(true)                 {
                    try {//lab2
                        if (!(in_grouping(g_v, 1072, 1103)))
                        {
                            throw BreakLab2();
                        }
                        throw BreakLab1();
                    } on BreakLab2 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab1 catch(_) {}
            I_pV = cursor;
            try { //golab3
                while(true)                 {
                    try {//lab4
                        if (!(out_grouping(g_v, 1072, 1103)))
                        {
                            throw BreakLab4();
                        }
                        throw BreakLab3();
                    } on BreakLab4 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab3 catch(_) {}
            try { //golab5
                while(true)                 {
                    try {//lab6
                        if (!(in_grouping(g_v, 1072, 1103)))
                        {
                            throw BreakLab6();
                        }
                        throw BreakLab5();
                    } on BreakLab6 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab5 catch(_) {}
            try { //golab7
                while(true)                 {
                    try {//lab8
                        if (!(out_grouping(g_v, 1072, 1103)))
                        {
                            throw BreakLab8();
                        }
                        throw BreakLab7();
                    } on BreakLab8 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                }
            } on BreakLab7 catch(_) {}
            I_p2 = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_perfective_gerund() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_0);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        if (!(eq_s_b('\u0430')))
                        {
                            throw BreakLab1();
                        }
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    if (!(eq_s_b('\u044F')))
                    {
                        return false;
                    }
                } on BreakLab0 catch(_) {}
                slice_del();
                break;
            case 2:
                slice_del();
                break;
        }
        return true;
    }

    bool r_adjective() {
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_adjectival() {
        var among_var;
        if (!r_adjective())
        {
            return false;
        }
        var v_1 = limit - cursor;
        try {//lab0
            ket = cursor;
            among_var = find_among_b(a_2);
            if (among_var == 0)
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
            bra = cursor;
            switch (among_var) {
                case 1:
                    try {//lab1
                        var v_2 = limit - cursor;
                        try {//lab2
                            if (!(eq_s_b('\u0430')))
                            {
                                throw BreakLab2();
                            }
                            throw BreakLab1();
                        } on BreakLab2 catch(_) {}
                        cursor = limit - v_2;
                        if (!(eq_s_b('\u044F')))
                        {
                            cursor = limit - v_1;
                            throw BreakLab0();
                        }
                    } on BreakLab1 catch(_) {}
                    slice_del();
                    break;
                case 2:
                    slice_del();
                    break;
            }
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_reflexive() {
        ket = cursor;
        if (find_among_b(a_3) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_verb() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_4);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                try {//lab0
                    var v_1 = limit - cursor;
                    try {//lab1
                        if (!(eq_s_b('\u0430')))
                        {
                            throw BreakLab1();
                        }
                        throw BreakLab0();
                    } on BreakLab1 catch(_) {}
                    cursor = limit - v_1;
                    if (!(eq_s_b('\u044F')))
                    {
                        return false;
                    }
                } on BreakLab0 catch(_) {}
                slice_del();
                break;
            case 2:
                slice_del();
                break;
        }
        return true;
    }

    bool r_noun() {
        ket = cursor;
        if (find_among_b(a_5) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_derivational() {
        ket = cursor;
        if (find_among_b(a_6) == 0)
        {
            return false;
        }
        bra = cursor;
        if (!r_R2())
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_tidy_up() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_7);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_del();
                ket = cursor;
                if (!(eq_s_b('\u043D')))
                {
                    return false;
                }
                bra = cursor;
                if (!(eq_s_b('\u043D')))
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!(eq_s_b('\u043D')))
                {
                    return false;
                }
                slice_del();
                break;
            case 3:
                slice_del();
                break;
        }
        return true;
    }

    bool stem() {
        var v_1 = cursor;
        try {//lab0
            while(true)
            {
                var v_2 = cursor;
                try {//lab1
                    try { //golab2
                        while(true)                         {
                            var v_3 = cursor;
                            try {//lab3
                                bra = cursor;
                                if (!(eq_s('\u0451')))
                                {
                                    throw BreakLab3();
                                }
                                ket = cursor;
                                cursor = v_3;
                                throw BreakLab2();
                            } on BreakLab3 catch(_) {}
                            cursor = v_3;
                            if (cursor >= limit)
                            {
                                throw BreakLab1();
                            }
                            cursor++;
                        }
                    } on BreakLab2 catch(_) {}
                    slice_from('\u0435');
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        r_mark_regions();
        limit_backward = cursor;
        cursor = limit;
        if (cursor < I_pV)
        {
            return false;
        }
        var v_6 = limit_backward;
        limit_backward = I_pV;
        var v_7 = limit - cursor;
        try {//lab4
            try {//lab5
                var v_8 = limit - cursor;
                try {//lab6
                    if (!r_perfective_gerund())
                    {
                        throw BreakLab6();
                    }
                    throw BreakLab5();
                } on BreakLab6 catch(_) {}
                cursor = limit - v_8;
                var v_9 = limit - cursor;
                try {//lab7
                    if (!r_reflexive())
                    {
                        cursor = limit - v_9;
                        throw BreakLab7();
                    }
                } on BreakLab7 catch(_) {}
                try {//lab8
                    var v_10 = limit - cursor;
                    try {//lab9
                        if (!r_adjectival())
                        {
                            throw BreakLab9();
                        }
                        throw BreakLab8();
                    } on BreakLab9 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab10
                        if (!r_verb())
                        {
                            throw BreakLab10();
                        }
                        throw BreakLab8();
                    } on BreakLab10 catch(_) {}
                    cursor = limit - v_10;
                    if (!r_noun())
                    {
                        throw BreakLab4();
                    }
                } on BreakLab8 catch(_) {}
            } on BreakLab5 catch(_) {}
        } on BreakLab4 catch(_) {}
        cursor = limit - v_7;
        var v_11 = limit - cursor;
        try {//lab11
            ket = cursor;
            if (!(eq_s_b('\u0438')))
            {
                cursor = limit - v_11;
                throw BreakLab11();
            }
            bra = cursor;
            slice_del();
        } on BreakLab11 catch(_) {}
        var v_12 = limit - cursor;
        r_derivational();
        cursor = limit - v_12;
        var v_13 = limit - cursor;
        r_tidy_up();
        cursor = limit - v_13;
        limit_backward = v_6;
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
