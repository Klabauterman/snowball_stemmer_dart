// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class spanish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('', -1, 6),
         Among('\u00E1', 0, 1),
         Among('\u00E9', 0, 2),
         Among('\u00ED', 0, 3),
         Among('\u00F3', 0, 4),
         Among('\u00FA', 0, 5)
    ];

    late final List<Among> a_1 = [
         Among('la', -1, -1),
         Among('sela', 0, -1),
         Among('le', -1, -1),
         Among('me', -1, -1),
         Among('se', -1, -1),
         Among('lo', -1, -1),
         Among('selo', 5, -1),
         Among('las', -1, -1),
         Among('selas', 7, -1),
         Among('les', -1, -1),
         Among('los', -1, -1),
         Among('selos', 10, -1),
         Among('nos', -1, -1)
    ];

    late final List<Among> a_2 = [
         Among('ando', -1, 6),
         Among('iendo', -1, 6),
         Among('yendo', -1, 7),
         Among('\u00E1ndo', -1, 2),
         Among('i\u00E9ndo', -1, 1),
         Among('ar', -1, 6),
         Among('er', -1, 6),
         Among('ir', -1, 6),
         Among('\u00E1r', -1, 3),
         Among('\u00E9r', -1, 4),
         Among('\u00EDr', -1, 5)
    ];

    late final List<Among> a_3 = [
         Among('ic', -1, -1),
         Among('ad', -1, -1),
         Among('os', -1, -1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_4 = [
         Among('able', -1, 1),
         Among('ible', -1, 1),
         Among('ante', -1, 1)
    ];

    late final List<Among> a_5 = [
         Among('ic', -1, 1),
         Among('abil', -1, 1),
         Among('iv', -1, 1)
    ];

    late final List<Among> a_6 = [
         Among('ica', -1, 1),
         Among('ancia', -1, 2),
         Among('encia', -1, 5),
         Among('adora', -1, 2),
         Among('osa', -1, 1),
         Among('ista', -1, 1),
         Among('iva', -1, 9),
         Among('anza', -1, 1),
         Among('log\u00EDa', -1, 3),
         Among('idad', -1, 8),
         Among('able', -1, 1),
         Among('ible', -1, 1),
         Among('ante', -1, 2),
         Among('mente', -1, 7),
         Among('amente', 13, 6),
         Among('aci\u00F3n', -1, 2),
         Among('uci\u00F3n', -1, 4),
         Among('ico', -1, 1),
         Among('ismo', -1, 1),
         Among('oso', -1, 1),
         Among('amiento', -1, 1),
         Among('imiento', -1, 1),
         Among('ivo', -1, 9),
         Among('ador', -1, 2),
         Among('icas', -1, 1),
         Among('ancias', -1, 2),
         Among('encias', -1, 5),
         Among('adoras', -1, 2),
         Among('osas', -1, 1),
         Among('istas', -1, 1),
         Among('ivas', -1, 9),
         Among('anzas', -1, 1),
         Among('log\u00EDas', -1, 3),
         Among('idades', -1, 8),
         Among('ables', -1, 1),
         Among('ibles', -1, 1),
         Among('aciones', -1, 2),
         Among('uciones', -1, 4),
         Among('adores', -1, 2),
         Among('antes', -1, 2),
         Among('icos', -1, 1),
         Among('ismos', -1, 1),
         Among('osos', -1, 1),
         Among('amientos', -1, 1),
         Among('imientos', -1, 1),
         Among('ivos', -1, 9)
    ];

    late final List<Among> a_7 = [
         Among('ya', -1, 1),
         Among('ye', -1, 1),
         Among('yan', -1, 1),
         Among('yen', -1, 1),
         Among('yeron', -1, 1),
         Among('yendo', -1, 1),
         Among('yo', -1, 1),
         Among('yas', -1, 1),
         Among('yes', -1, 1),
         Among('yais', -1, 1),
         Among('yamos', -1, 1),
         Among('y\u00F3', -1, 1)
    ];

    late final List<Among> a_8 = [
         Among('aba', -1, 2),
         Among('ada', -1, 2),
         Among('ida', -1, 2),
         Among('ara', -1, 2),
         Among('iera', -1, 2),
         Among('\u00EDa', -1, 2),
         Among('ar\u00EDa', 5, 2),
         Among('er\u00EDa', 5, 2),
         Among('ir\u00EDa', 5, 2),
         Among('ad', -1, 2),
         Among('ed', -1, 2),
         Among('id', -1, 2),
         Among('ase', -1, 2),
         Among('iese', -1, 2),
         Among('aste', -1, 2),
         Among('iste', -1, 2),
         Among('an', -1, 2),
         Among('aban', 16, 2),
         Among('aran', 16, 2),
         Among('ieran', 16, 2),
         Among('\u00EDan', 16, 2),
         Among('ar\u00EDan', 20, 2),
         Among('er\u00EDan', 20, 2),
         Among('ir\u00EDan', 20, 2),
         Among('en', -1, 1),
         Among('asen', 24, 2),
         Among('iesen', 24, 2),
         Among('aron', -1, 2),
         Among('ieron', -1, 2),
         Among('ar\u00E1n', -1, 2),
         Among('er\u00E1n', -1, 2),
         Among('ir\u00E1n', -1, 2),
         Among('ado', -1, 2),
         Among('ido', -1, 2),
         Among('ando', -1, 2),
         Among('iendo', -1, 2),
         Among('ar', -1, 2),
         Among('er', -1, 2),
         Among('ir', -1, 2),
         Among('as', -1, 2),
         Among('abas', 39, 2),
         Among('adas', 39, 2),
         Among('idas', 39, 2),
         Among('aras', 39, 2),
         Among('ieras', 39, 2),
         Among('\u00EDas', 39, 2),
         Among('ar\u00EDas', 45, 2),
         Among('er\u00EDas', 45, 2),
         Among('ir\u00EDas', 45, 2),
         Among('es', -1, 1),
         Among('ases', 49, 2),
         Among('ieses', 49, 2),
         Among('abais', -1, 2),
         Among('arais', -1, 2),
         Among('ierais', -1, 2),
         Among('\u00EDais', -1, 2),
         Among('ar\u00EDais', 55, 2),
         Among('er\u00EDais', 55, 2),
         Among('ir\u00EDais', 55, 2),
         Among('aseis', -1, 2),
         Among('ieseis', -1, 2),
         Among('asteis', -1, 2),
         Among('isteis', -1, 2),
         Among('\u00E1is', -1, 2),
         Among('\u00E9is', -1, 1),
         Among('ar\u00E9is', 64, 2),
         Among('er\u00E9is', 64, 2),
         Among('ir\u00E9is', 64, 2),
         Among('ados', -1, 2),
         Among('idos', -1, 2),
         Among('amos', -1, 2),
         Among('\u00E1bamos', 70, 2),
         Among('\u00E1ramos', 70, 2),
         Among('i\u00E9ramos', 70, 2),
         Among('\u00EDamos', 70, 2),
         Among('ar\u00EDamos', 74, 2),
         Among('er\u00EDamos', 74, 2),
         Among('ir\u00EDamos', 74, 2),
         Among('emos', -1, 1),
         Among('aremos', 78, 2),
         Among('eremos', 78, 2),
         Among('iremos', 78, 2),
         Among('\u00E1semos', 78, 2),
         Among('i\u00E9semos', 78, 2),
         Among('imos', -1, 2),
         Among('ar\u00E1s', -1, 2),
         Among('er\u00E1s', -1, 2),
         Among('ir\u00E1s', -1, 2),
         Among('\u00EDs', -1, 2),
         Among('ar\u00E1', -1, 2),
         Among('er\u00E1', -1, 2),
         Among('ir\u00E1', -1, 2),
         Among('ar\u00E9', -1, 2),
         Among('er\u00E9', -1, 2),
         Among('ir\u00E9', -1, 2),
         Among('i\u00F3', -1, 2)
    ];

    late final List<Among> a_9 = [
         Among('a', -1, 1),
         Among('e', -1, 2),
         Among('o', -1, 1),
         Among('os', -1, 1),
         Among('\u00E1', -1, 1),
         Among('\u00E9', -1, 2),
         Among('\u00ED', -1, 1),
         Among('\u00F3', -1, 1)
    ];

    static final List<int> g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 10 ];

    late int I_p2;
    late int I_p1;
    late int I_pV;


    bool r_mark_regions() {
        I_pV = limit;
        I_p1 = limit;
        I_p2 = limit;
        var v_1 = cursor;
        try {//lab0
            try {//lab1
                var v_2 = cursor;
                try {//lab2
                    if (!(in_grouping(g_v, 97, 252)))
                    {
                        throw BreakLab2();
                    }
                    try {//lab3
                        var v_3 = cursor;
                        try {//lab4
                            if (!(out_grouping(g_v, 97, 252)))
                            {
                                throw BreakLab4();
                            }
                            try { //golab5
                                while(true)                                 {
                                    try {//lab6
                                        if (!(in_grouping(g_v, 97, 252)))
                                        {
                                            throw BreakLab6();
                                        }
                                        throw BreakLab5();
                                    } on BreakLab6 catch(_) {}
                                    if (cursor >= limit)
                                    {
                                        throw BreakLab4();
                                    }
                                    cursor++;
                                }
                            } on BreakLab5 catch(_) {}
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = v_3;
                        if (!(in_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab2();
                        }
                        try { //golab7
                            while(true)                             {
                                try {//lab8
                                    if (!(out_grouping(g_v, 97, 252)))
                                    {
                                        throw BreakLab8();
                                    }
                                    throw BreakLab7();
                                } on BreakLab8 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab2();
                                }
                                cursor++;
                            }
                        } on BreakLab7 catch(_) {}
                    } on BreakLab3 catch(_) {}
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = v_2;
                if (!(out_grouping(g_v, 97, 252)))
                {
                    throw BreakLab0();
                }
                try {//lab9
                    var v_6 = cursor;
                    try {//lab10
                        if (!(out_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab10();
                        }
                        try { //golab11
                            while(true)                             {
                                try {//lab12
                                    if (!(in_grouping(g_v, 97, 252)))
                                    {
                                        throw BreakLab12();
                                    }
                                    throw BreakLab11();
                                } on BreakLab12 catch(_) {}
                                if (cursor >= limit)
                                {
                                    throw BreakLab10();
                                }
                                cursor++;
                            }
                        } on BreakLab11 catch(_) {}
                        throw BreakLab9();
                    } on BreakLab10 catch(_) {}
                    cursor = v_6;
                    if (!(in_grouping(g_v, 97, 252)))
                    {
                        throw BreakLab0();
                    }
                    if (cursor >= limit)
                    {
                        throw BreakLab0();
                    }
                    cursor++;
                } on BreakLab9 catch(_) {}
            } on BreakLab1 catch(_) {}
            I_pV = cursor;
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_8 = cursor;
        try {//lab13
            try { //golab14
                while(true)                 {
                    try {//lab15
                        if (!(in_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab15();
                        }
                        throw BreakLab14();
                    } on BreakLab15 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab14 catch(_) {}
            try { //golab16
                while(true)                 {
                    try {//lab17
                        if (!(out_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab17();
                        }
                        throw BreakLab16();
                    } on BreakLab17 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab16 catch(_) {}
            I_p1 = cursor;
            try { //golab18
                while(true)                 {
                    try {//lab19
                        if (!(in_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab19();
                        }
                        throw BreakLab18();
                    } on BreakLab19 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab18 catch(_) {}
            try { //golab20
                while(true)                 {
                    try {//lab21
                        if (!(out_grouping(g_v, 97, 252)))
                        {
                            throw BreakLab21();
                        }
                        throw BreakLab20();
                    } on BreakLab21 catch(_) {}
                    if (cursor >= limit)
                    {
                        throw BreakLab13();
                    }
                    cursor++;
                }
            } on BreakLab20 catch(_) {}
            I_p2 = cursor;
        } on BreakLab13 catch(_) {}
        cursor = v_8;
        return true;
    }

    bool r_postlude() {
        var among_var;
        while(true)
        {
            var v_1 = cursor;
            try {//lab0
                bra = cursor;
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    throw BreakLab0();
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from('a');
                        break;
                    case 2:
                        slice_from('e');
                        break;
                    case 3:
                        slice_from('i');
                        break;
                    case 4:
                        slice_from('o');
                        break;
                    case 5:
                        slice_from('u');
                        break;
                    case 6:
                        if (cursor >= limit)
                        {
                            throw BreakLab0();
                        }
                        cursor++;
                        break;
                }
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
            break;
        }
        return true;
    }

    bool r_RV() {
        if (!(I_pV <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R2() {
        if (!(I_p2 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_attached_pronoun() {
        var among_var;
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            return false;
        }
        bra = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        if (!r_RV())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                bra = cursor;
                slice_from('iendo');
                break;
            case 2:
                bra = cursor;
                slice_from('ando');
                break;
            case 3:
                bra = cursor;
                slice_from('ar');
                break;
            case 4:
                bra = cursor;
                slice_from('er');
                break;
            case 5:
                bra = cursor;
                slice_from('ir');
                break;
            case 6:
                slice_del();
                break;
            case 7:
                if (!(eq_s_b('u')))
                {
                    return false;
                }
                slice_del();
                break;
        }
        return true;
    }

    bool r_standard_suffix() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_6);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_1 = limit - cursor;
                try {//lab0
                    ket = cursor;
                    if (!(eq_s_b('ic')))
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    slice_del();
                } on BreakLab0 catch(_) {}
                break;
            case 3:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('log');
                break;
            case 4:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('u');
                break;
            case 5:
                if (!r_R2())
                {
                    return false;
                }
                slice_from('ente');
                break;
            case 6:
                if (!r_R1())
                {
                    return false;
                }
                slice_del();
                var v_2 = limit - cursor;
                try {//lab1
                    ket = cursor;
                    among_var = find_among_b(a_3);
                    if (among_var == 0)
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_2;
                        throw BreakLab1();
                    }
                    slice_del();
                    switch (among_var) {
                        case 1:
                            ket = cursor;
                            if (!(eq_s_b('at')))
                            {
                                cursor = limit - v_2;
                                throw BreakLab1();
                            }
                            bra = cursor;
                            if (!r_R2())
                            {
                                cursor = limit - v_2;
                                throw BreakLab1();
                            }
                            slice_del();
                            break;
                    }
                } on BreakLab1 catch(_) {}
                break;
            case 7:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_3 = limit - cursor;
                try {//lab2
                    ket = cursor;
                    if (find_among_b(a_4) == 0)
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_3;
                        throw BreakLab2();
                    }
                    slice_del();
                } on BreakLab2 catch(_) {}
                break;
            case 8:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_4 = limit - cursor;
                try {//lab3
                    ket = cursor;
                    if (find_among_b(a_5) == 0)
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_4;
                        throw BreakLab3();
                    }
                    slice_del();
                } on BreakLab3 catch(_) {}
                break;
            case 9:
                if (!r_R2())
                {
                    return false;
                }
                slice_del();
                var v_5 = limit - cursor;
                try {//lab4
                    ket = cursor;
                    if (!(eq_s_b('at')))
                    {
                        cursor = limit - v_5;
                        throw BreakLab4();
                    }
                    bra = cursor;
                    if (!r_R2())
                    {
                        cursor = limit - v_5;
                        throw BreakLab4();
                    }
                    slice_del();
                } on BreakLab4 catch(_) {}
                break;
        }
        return true;
    }

    bool r_y_verb_suffix() {
        if (cursor < I_pV)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_pV;
        ket = cursor;
        if (find_among_b(a_7) == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        if (!(eq_s_b('u')))
        {
            return false;
        }
        slice_del();
        return true;
    }

    bool r_verb_suffix() {
        var among_var;
        if (cursor < I_pV)
        {
            return false;
        }
        var v_2 = limit_backward;
        limit_backward = I_pV;
        ket = cursor;
        among_var = find_among_b(a_8);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        bra = cursor;
        limit_backward = v_2;
        switch (among_var) {
            case 1:
                var v_3 = limit - cursor;
                try {//lab0
                    if (!(eq_s_b('u')))
                    {
                        cursor = limit - v_3;
                        throw BreakLab0();
                    }
                    var v_4 = limit - cursor;
                    if (!(eq_s_b('g')))
                    {
                        cursor = limit - v_3;
                        throw BreakLab0();
                    }
                    cursor = limit - v_4;
                } on BreakLab0 catch(_) {}
                bra = cursor;
                slice_del();
                break;
            case 2:
                slice_del();
                break;
        }
        return true;
    }

    bool r_residual_suffix() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_9);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                break;
            case 2:
                if (!r_RV())
                {
                    return false;
                }
                slice_del();
                var v_1 = limit - cursor;
                try {//lab0
                    ket = cursor;
                    if (!(eq_s_b('u')))
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    bra = cursor;
                    var v_2 = limit - cursor;
                    if (!(eq_s_b('g')))
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    cursor = limit - v_2;
                    if (!r_RV())
                    {
                        cursor = limit - v_1;
                        throw BreakLab0();
                    }
                    slice_del();
                } on BreakLab0 catch(_) {}
                break;
        }
        return true;
    }

    bool stem() {
        r_mark_regions();
        limit_backward = cursor;
        cursor = limit;
        var v_2 = limit - cursor;
        r_attached_pronoun();
        cursor = limit - v_2;
        var v_3 = limit - cursor;
        try {//lab0
            try {//lab1
                var v_4 = limit - cursor;
                try {//lab2
                    if (!r_standard_suffix())
                    {
                        throw BreakLab2();
                    }
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = limit - v_4;
                try {//lab3
                    if (!r_y_verb_suffix())
                    {
                        throw BreakLab3();
                    }
                    throw BreakLab1();
                } on BreakLab3 catch(_) {}
                cursor = limit - v_4;
                if (!r_verb_suffix())
                {
                    throw BreakLab0();
                }
            } on BreakLab1 catch(_) {}
        } on BreakLab0 catch(_) {}
        cursor = limit - v_3;
        var v_5 = limit - cursor;
        r_residual_suffix();
        cursor = limit - v_5;
        cursor = limit_backward;
        var v_6 = cursor;
        r_postlude();
        cursor = v_6;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
