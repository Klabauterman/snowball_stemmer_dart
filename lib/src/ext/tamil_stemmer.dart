// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class tamil_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('\u0B95', -1, -1),
         Among('\u0B99', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9E', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BA8', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BAE', -1, -1),
         Among('\u0BAF', -1, -1),
         Among('\u0BB5', -1, -1)
    ];

    late final List<Among> a_1 = [
         Among('\u0BA8\u0BCD\u0BA4', -1, -1),
         Among('\u0BA8\u0BCD\u0BA4\u0BCD', -1, -1),
         Among('\u0BA8\u0BCD', -1, -1)
    ];

    late final List<Among> a_2 = [
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_3 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_4 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_5 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_6 = [
         Among('\u0BAF', -1, -1),
         Among('\u0BB0', -1, -1),
         Among('\u0BB2', -1, -1),
         Among('\u0BB3', -1, -1),
         Among('\u0BB4', -1, -1),
         Among('\u0BB5', -1, -1)
    ];

    late final List<Among> a_7 = [
         Among('\u0B99', -1, -1),
         Among('\u0B9E', -1, -1),
         Among('\u0BA3', -1, -1),
         Among('\u0BA8', -1, -1),
         Among('\u0BA9', -1, -1),
         Among('\u0BAE', -1, -1)
    ];

    late final List<Among> a_8 = [
         Among('\u0BAF', -1, -1),
         Among('\u0BB5', -1, -1),
         Among('\u0BB5\u0BCD', -1, -1)
    ];

    late final List<Among> a_9 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_10 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_11 = [
         Among('\u0B85', -1, -1),
         Among('\u0B87', -1, -1),
         Among('\u0B89', -1, -1)
    ];

    late final List<Among> a_12 = [
         Among('\u0B95', -1, -1),
         Among('\u0B99', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9E', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BA8', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BAE', -1, -1),
         Among('\u0BAF', -1, -1),
         Among('\u0BB5', -1, -1)
    ];

    late final List<Among> a_13 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_14 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BCB', -1, -1)
    ];

    late final List<Among> a_15 = [
         Among('\u0BAA\u0BBF', -1, -1),
         Among('\u0BB5\u0BBF', -1, -1)
    ];

    late final List<Among> a_16 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_17 = [
         Among('\u0BAA\u0B9F\u0BCD\u0B9F', -1, -1),
         Among('\u0BAA\u0B9F\u0BCD\u0B9F\u0BA3', -1, -1),
         Among('\u0BA4\u0BBE\u0BA9', -1, -1),
         Among('\u0BAA\u0B9F\u0BBF\u0BA4\u0BBE\u0BA9', 2, -1),
         Among('\u0B95\u0BC1\u0BB0\u0BBF\u0BAF', -1, -1),
         Among('\u0BAA\u0B9F\u0BBF', -1, -1),
         Among('\u0BAA\u0BB1\u0BCD\u0BB1\u0BBF', -1, -1),
         Among('\u0BAA\u0B9F\u0BC1', -1, -1),
         Among('\u0BB5\u0BBF\u0B9F\u0BC1', -1, -1),
         Among('\u0BAA\u0B9F\u0BCD\u0B9F\u0BC1', -1, -1),
         Among('\u0BB5\u0BBF\u0B9F\u0BCD\u0B9F\u0BC1', -1, -1),
         Among('\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1', -1, -1),
         Among('\u0BC6\u0BB2\u0BCD\u0BB2\u0BBE\u0BAE\u0BCD', -1, -1)
    ];

    late final List<Among> a_18 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_19 = [
         Among('\u0B95', -1, -1),
         Among('\u0B9A', -1, -1),
         Among('\u0B9F', -1, -1),
         Among('\u0BA4', -1, -1),
         Among('\u0BAA', -1, -1),
         Among('\u0BB1', -1, -1)
    ];

    late final List<Among> a_20 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_21 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_22 = [
         Among('\u0BAA\u0B9F\u0BC1', -1, -1),
         Among('\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BCD', -1, -1)
    ];

    late final List<Among> a_23 = [
         Among('\u0B85', -1, -1),
         Among('\u0B86', -1, -1),
         Among('\u0B87', -1, -1),
         Among('\u0B88', -1, -1),
         Among('\u0B89', -1, -1),
         Among('\u0B8A', -1, -1),
         Among('\u0B8E', -1, -1),
         Among('\u0B8F', -1, -1),
         Among('\u0B90', -1, -1),
         Among('\u0B92', -1, -1),
         Among('\u0B93', -1, -1),
         Among('\u0B94', -1, -1)
    ];

    late final List<Among> a_24 = [
         Among('\u0BBE', -1, -1),
         Among('\u0BBF', -1, -1),
         Among('\u0BC0', -1, -1),
         Among('\u0BC1', -1, -1),
         Among('\u0BC2', -1, -1),
         Among('\u0BC6', -1, -1),
         Among('\u0BC7', -1, -1),
         Among('\u0BC8', -1, -1)
    ];

    late final List<Among> a_25 = [
         Among('\u0B95\u0BBF\u0BB1', -1, -1),
         Among('\u0B95\u0BBF\u0BA9\u0BCD\u0BB1', -1, -1),
         Among('\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1', -1, -1),
         Among('\u0B95\u0BBF\u0BB1\u0BCD', -1, -1),
         Among('\u0B95\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD', -1, -1),
         Among('\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD', -1, -1)
    ];

    late bool B_found_vetrumai_urupu;
    late bool B_found_a_match;


    bool r_has_min_length() {
        if (!(current.length > 4))
        {
            return false;
        }
        return true;
    }

    bool r_fix_va_start() {
        try {//lab0
            var v_1 = cursor;
            try {//lab1
                var v_2 = cursor;
                var v_3 = cursor;
                try {//lab2
                    if (!(eq_s('\u0BB5\u0BCB')))
                    {
                        cursor = v_3;
                        throw BreakLab2();
                    }
                } on BreakLab2 catch(_) {}
                cursor = v_2;
                bra = cursor;
                if (!(eq_s('\u0BB5\u0BCB')))
                {
                    throw BreakLab1();
                }
                ket = cursor;
                slice_from('\u0B93');
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = v_1;
            try {//lab3
                var v_4 = cursor;
                var v_5 = cursor;
                try {//lab4
                    if (!(eq_s('\u0BB5\u0BCA')))
                    {
                        cursor = v_5;
                        throw BreakLab4();
                    }
                } on BreakLab4 catch(_) {}
                cursor = v_4;
                bra = cursor;
                if (!(eq_s('\u0BB5\u0BCA')))
                {
                    throw BreakLab3();
                }
                ket = cursor;
                slice_from('\u0B92');
                throw BreakLab0();
            } on BreakLab3 catch(_) {}
            cursor = v_1;
            try {//lab5
                var v_6 = cursor;
                var v_7 = cursor;
                try {//lab6
                    if (!(eq_s('\u0BB5\u0BC1')))
                    {
                        cursor = v_7;
                        throw BreakLab6();
                    }
                } on BreakLab6 catch(_) {}
                cursor = v_6;
                bra = cursor;
                if (!(eq_s('\u0BB5\u0BC1')))
                {
                    throw BreakLab5();
                }
                ket = cursor;
                slice_from('\u0B89');
                throw BreakLab0();
            } on BreakLab5 catch(_) {}
            cursor = v_1;
            var v_8 = cursor;
            var v_9 = cursor;
            try {//lab7
                if (!(eq_s('\u0BB5\u0BC2')))
                {
                    cursor = v_9;
                    throw BreakLab7();
                }
            } on BreakLab7 catch(_) {}
            cursor = v_8;
            bra = cursor;
            if (!(eq_s('\u0BB5\u0BC2')))
            {
                return false;
            }
            ket = cursor;
            slice_from('\u0B8A');
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_fix_endings() {
        var v_1 = cursor;
        try {//lab0
            while(true)
            {
                var v_2 = cursor;
                try {//lab1
                    if (!r_fix_ending())
                    {
                        throw BreakLab1();
                    }
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        return true;
    }

    bool r_remove_question_prefixes() {
        bra = cursor;
        if (!(eq_s('\u0B8E')))
        {
            return false;
        }
        if (find_among(a_0) == 0)
        {
            return false;
        }
        if (!(eq_s('\u0BCD')))
        {
            return false;
        }
        ket = cursor;
        slice_del();
        var v_1 = cursor;
        r_fix_va_start();
        cursor = v_1;
        return true;
    }

    bool r_fix_ending() {
        if (!(current.length > 3))
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                ket = cursor;
                if (find_among_b(a_1) == 0)
                {
                    throw BreakLab1();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab2
                ket = cursor;
                if (!(eq_s_b('\u0BAF\u0BCD')))
                {
                    throw BreakLab2();
                }
                var v_2 = limit - cursor;
                if (find_among_b(a_2) == 0)
                {
                    throw BreakLab2();
                }
                cursor = limit - v_2;
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab2 catch(_) {}
            cursor = limit - v_1;
            try {//lab3
                ket = cursor;
                try {//lab4
                    var v_3 = limit - cursor;
                    try {//lab5
                        if (!(eq_s_b('\u0B9F\u0BCD\u0BAA\u0BCD')))
                        {
                            throw BreakLab5();
                        }
                        throw BreakLab4();
                    } on BreakLab5 catch(_) {}
                    cursor = limit - v_3;
                    if (!(eq_s_b('\u0B9F\u0BCD\u0B95\u0BCD')))
                    {
                        throw BreakLab3();
                    }
                } on BreakLab4 catch(_) {}
                bra = cursor;
                slice_from('\u0BB3\u0BCD');
                throw BreakLab0();
            } on BreakLab3 catch(_) {}
            cursor = limit - v_1;
            try {//lab6
                ket = cursor;
                if (!(eq_s_b('\u0BA9\u0BCD\u0BB1\u0BCD')))
                {
                    throw BreakLab6();
                }
                bra = cursor;
                slice_from('\u0BB2\u0BCD');
                throw BreakLab0();
            } on BreakLab6 catch(_) {}
            cursor = limit - v_1;
            try {//lab7
                ket = cursor;
                if (!(eq_s_b('\u0BB1\u0BCD\u0B95\u0BCD')))
                {
                    throw BreakLab7();
                }
                bra = cursor;
                slice_from('\u0BB2\u0BCD');
                throw BreakLab0();
            } on BreakLab7 catch(_) {}
            cursor = limit - v_1;
            try {//lab8
                ket = cursor;
                if (!(eq_s_b('\u0B9F\u0BCD\u0B9F\u0BCD')))
                {
                    throw BreakLab8();
                }
                bra = cursor;
                slice_from('\u0B9F\u0BC1');
                throw BreakLab0();
            } on BreakLab8 catch(_) {}
            cursor = limit - v_1;
            try {//lab9
                if (!(B_found_vetrumai_urupu))
                {
                    throw BreakLab9();
                }
                ket = cursor;
                if (!(eq_s_b('\u0BA4\u0BCD\u0BA4\u0BCD')))
                {
                    throw BreakLab9();
                }
                var v_4 = limit - cursor;
                {
                    var v_5 = limit - cursor;
                    try {//lab10
                        if (!(eq_s_b('\u0BC8')))
                        {
                            throw BreakLab10();
                        }
                        throw BreakLab9();
                    } on BreakLab10 catch(_) {}
                    cursor = limit - v_5;
                }
                cursor = limit - v_4;
                bra = cursor;
                slice_from('\u0BAE\u0BCD');
                bra = cursor;
                throw BreakLab0();
            } on BreakLab9 catch(_) {}
            cursor = limit - v_1;
            try {//lab11
                ket = cursor;
                try {//lab12
                    var v_6 = limit - cursor;
                    try {//lab13
                        if (!(eq_s_b('\u0BC1\u0B95\u0BCD')))
                        {
                            throw BreakLab13();
                        }
                        throw BreakLab12();
                    } on BreakLab13 catch(_) {}
                    cursor = limit - v_6;
                    if (!(eq_s_b('\u0BC1\u0B95\u0BCD\u0B95\u0BCD')))
                    {
                        throw BreakLab11();
                    }
                } on BreakLab12 catch(_) {}
                bra = cursor;
                slice_from('\u0BCD');
                throw BreakLab0();
            } on BreakLab11 catch(_) {}
            cursor = limit - v_1;
            try {//lab14
                ket = cursor;
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab14();
                }
                if (find_among_b(a_3) == 0)
                {
                    throw BreakLab14();
                }
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab14();
                }
                if (find_among_b(a_4) == 0)
                {
                    throw BreakLab14();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab14 catch(_) {}
            cursor = limit - v_1;
            try {//lab15
                ket = cursor;
                if (!(eq_s_b('\u0BC1\u0B95\u0BCD')))
                {
                    throw BreakLab15();
                }
                bra = cursor;
                slice_from('\u0BCD');
                throw BreakLab0();
            } on BreakLab15 catch(_) {}
            cursor = limit - v_1;
            try {//lab16
                ket = cursor;
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab16();
                }
                if (find_among_b(a_5) == 0)
                {
                    throw BreakLab16();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab16 catch(_) {}
            cursor = limit - v_1;
            try {//lab17
                ket = cursor;
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab17();
                }
                try {//lab18
                    var v_7 = limit - cursor;
                    try {//lab19
                        if (find_among_b(a_6) == 0)
                        {
                            throw BreakLab19();
                        }
                        throw BreakLab18();
                    } on BreakLab19 catch(_) {}
                    cursor = limit - v_7;
                    if (find_among_b(a_7) == 0)
                    {
                        throw BreakLab17();
                    }
                } on BreakLab18 catch(_) {}
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab17();
                }
                bra = cursor;
                slice_from('\u0BCD');
                throw BreakLab0();
            } on BreakLab17 catch(_) {}
            cursor = limit - v_1;
            try {//lab20
                ket = cursor;
                if (find_among_b(a_8) == 0)
                {
                    throw BreakLab20();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab20 catch(_) {}
            cursor = limit - v_1;
            try {//lab21
                ket = cursor;
                if (!(eq_s_b('\u0BA9\u0BC1')))
                {
                    throw BreakLab21();
                }
                var v_8 = limit - cursor;
                {
                    var v_9 = limit - cursor;
                    try {//lab22
                        if (find_among_b(a_9) == 0)
                        {
                            throw BreakLab22();
                        }
                        throw BreakLab21();
                    } on BreakLab22 catch(_) {}
                    cursor = limit - v_9;
                }
                cursor = limit - v_8;
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab21 catch(_) {}
            cursor = limit - v_1;
            try {//lab23
                ket = cursor;
                if (!(eq_s_b('\u0B99\u0BCD')))
                {
                    throw BreakLab23();
                }
                var v_10 = limit - cursor;
                {
                    var v_11 = limit - cursor;
                    try {//lab24
                        if (!(eq_s_b('\u0BC8')))
                        {
                            throw BreakLab24();
                        }
                        throw BreakLab23();
                    } on BreakLab24 catch(_) {}
                    cursor = limit - v_11;
                }
                cursor = limit - v_10;
                bra = cursor;
                slice_from('\u0BAE\u0BCD');
                throw BreakLab0();
            } on BreakLab23 catch(_) {}
            cursor = limit - v_1;
            try {//lab25
                ket = cursor;
                if (!(eq_s_b('\u0B99\u0BCD')))
                {
                    throw BreakLab25();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab25 catch(_) {}
            cursor = limit - v_1;
            ket = cursor;
            if (!(eq_s_b('\u0BCD')))
            {
                return false;
            }
            var v_12 = limit - cursor;
            try {//lab26
                var v_13 = limit - cursor;
                try {//lab27
                    if (find_among_b(a_10) == 0)
                    {
                        throw BreakLab27();
                    }
                    throw BreakLab26();
                } on BreakLab27 catch(_) {}
                cursor = limit - v_13;
                if (!(eq_s_b('\u0BCD')))
                {
                    return false;
                }
            } on BreakLab26 catch(_) {}
            cursor = limit - v_12;
            bra = cursor;
            slice_del();
        } on BreakLab0 catch(_) {}
        cursor = limit_backward;
        return true;
    }

    bool r_remove_pronoun_prefixes() {
        B_found_a_match = false;
        bra = cursor;
        if (find_among(a_11) == 0)
        {
            return false;
        }
        if (find_among(a_12) == 0)
        {
            return false;
        }
        if (!(eq_s('\u0BCD')))
        {
            return false;
        }
        ket = cursor;
        slice_del();
        B_found_a_match = true;
        var v_1 = cursor;
        r_fix_va_start();
        cursor = v_1;
        return true;
    }

    bool r_remove_plural_suffix() {
        B_found_a_match = false;
        limit_backward = cursor;
        cursor = limit;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                ket = cursor;
                if (!(eq_s_b('\u0BC1\u0B99\u0BCD\u0B95\u0BB3\u0BCD')))
                {
                    throw BreakLab1();
                }
                var v_2 = limit - cursor;
                {
                    var v_3 = limit - cursor;
                    try {//lab2
                        if (find_among_b(a_13) == 0)
                        {
                            throw BreakLab2();
                        }
                        throw BreakLab1();
                    } on BreakLab2 catch(_) {}
                    cursor = limit - v_3;
                }
                cursor = limit - v_2;
                bra = cursor;
                slice_from('\u0BCD');
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab3
                ket = cursor;
                if (!(eq_s_b('\u0BB1\u0BCD\u0B95\u0BB3\u0BCD')))
                {
                    throw BreakLab3();
                }
                bra = cursor;
                slice_from('\u0BB2\u0BCD');
                throw BreakLab0();
            } on BreakLab3 catch(_) {}
            cursor = limit - v_1;
            try {//lab4
                ket = cursor;
                if (!(eq_s_b('\u0B9F\u0BCD\u0B95\u0BB3\u0BCD')))
                {
                    throw BreakLab4();
                }
                bra = cursor;
                slice_from('\u0BB3\u0BCD');
                throw BreakLab0();
            } on BreakLab4 catch(_) {}
            cursor = limit - v_1;
            ket = cursor;
            if (!(eq_s_b('\u0B95\u0BB3\u0BCD')))
            {
                return false;
            }
            bra = cursor;
            slice_del();
        } on BreakLab0 catch(_) {}
        B_found_a_match = true;
        cursor = limit_backward;
        return true;
    }

    bool r_remove_question_suffixes() {
        if (!r_has_min_length())
        {
            return false;
        }
        B_found_a_match = false;
        limit_backward = cursor;
        cursor = limit;
        var v_1 = limit - cursor;
        try {//lab0
            ket = cursor;
            if (find_among_b(a_14) == 0)
            {
                throw BreakLab0();
            }
            bra = cursor;
            slice_from('\u0BCD');
            B_found_a_match = true;
        } on BreakLab0 catch(_) {}
        cursor = limit - v_1;
        cursor = limit_backward;
        r_fix_endings();
        return true;
    }

    bool r_remove_command_suffixes() {
        if (!r_has_min_length())
        {
            return false;
        }
        B_found_a_match = false;
        limit_backward = cursor;
        cursor = limit;
        ket = cursor;
        if (find_among_b(a_15) == 0)
        {
            return false;
        }
        bra = cursor;
        slice_del();
        B_found_a_match = true;
        cursor = limit_backward;
        return true;
    }

    bool r_remove_um() {
        B_found_a_match = false;
        if (!r_has_min_length())
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        ket = cursor;
        if (!(eq_s_b('\u0BC1\u0BAE\u0BCD')))
        {
            return false;
        }
        bra = cursor;
        slice_from('\u0BCD');
        B_found_a_match = true;
        cursor = limit_backward;
        var v_1 = cursor;
        r_fix_ending();
        cursor = v_1;
        return true;
    }

    bool r_remove_common_word_endings() {
        B_found_a_match = false;
        if (!r_has_min_length())
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                var v_2 = limit - cursor;
                ket = cursor;
                try {//lab2
                    var v_3 = limit - cursor;
                    try {//lab3
                        if (!(eq_s_b('\u0BC1\u0B9F\u0BA9\u0BCD')))
                        {
                            throw BreakLab3();
                        }
                        throw BreakLab2();
                    } on BreakLab3 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab4
                        if (!(eq_s_b('\u0BBF\u0BB2\u0BCD\u0BB2\u0BC8')))
                        {
                            throw BreakLab4();
                        }
                        throw BreakLab2();
                    } on BreakLab4 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab5
                        if (!(eq_s_b('\u0BBF\u0B9F\u0BAE\u0BCD')))
                        {
                            throw BreakLab5();
                        }
                        throw BreakLab2();
                    } on BreakLab5 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab6
                        if (!(eq_s_b('\u0BBF\u0BA9\u0BCD\u0BB1\u0BBF')))
                        {
                            throw BreakLab6();
                        }
                        throw BreakLab2();
                    } on BreakLab6 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab7
                        if (!(eq_s_b('\u0BBE\u0B95\u0BBF')))
                        {
                            throw BreakLab7();
                        }
                        throw BreakLab2();
                    } on BreakLab7 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab8
                        if (!(eq_s_b('\u0BBE\u0B95\u0BBF\u0BAF')))
                        {
                            throw BreakLab8();
                        }
                        throw BreakLab2();
                    } on BreakLab8 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab9
                        if (!(eq_s_b('\u0BC6\u0BA9\u0BCD\u0BB1\u0BC1')))
                        {
                            throw BreakLab9();
                        }
                        throw BreakLab2();
                    } on BreakLab9 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab10
                        if (!(eq_s_b('\u0BC1\u0BB3\u0BCD\u0BB3')))
                        {
                            throw BreakLab10();
                        }
                        throw BreakLab2();
                    } on BreakLab10 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab11
                        if (!(eq_s_b('\u0BC1\u0B9F\u0BC8\u0BAF')))
                        {
                            throw BreakLab11();
                        }
                        throw BreakLab2();
                    } on BreakLab11 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab12
                        if (!(eq_s_b('\u0BC1\u0B9F\u0BC8')))
                        {
                            throw BreakLab12();
                        }
                        throw BreakLab2();
                    } on BreakLab12 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab13
                        if (!(eq_s_b('\u0BC6\u0BA9\u0BC1\u0BAE\u0BCD')))
                        {
                            throw BreakLab13();
                        }
                        throw BreakLab2();
                    } on BreakLab13 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab14
                        if (!(eq_s_b('\u0BB2\u0BCD\u0BB2')))
                        {
                            throw BreakLab14();
                        }
                        var v_4 = limit - cursor;
                        {
                            var v_5 = limit - cursor;
                            try {//lab15
                                if (find_among_b(a_16) == 0)
                                {
                                    throw BreakLab15();
                                }
                                throw BreakLab14();
                            } on BreakLab15 catch(_) {}
                            cursor = limit - v_5;
                        }
                        cursor = limit - v_4;
                        throw BreakLab2();
                    } on BreakLab14 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab16
                        if (!(eq_s_b('\u0BC6\u0BA9')))
                        {
                            throw BreakLab16();
                        }
                        throw BreakLab2();
                    } on BreakLab16 catch(_) {}
                    cursor = limit - v_3;
                    if (!(eq_s_b('\u0BBE\u0B95\u0BBF')))
                    {
                        throw BreakLab1();
                    }
                } on BreakLab2 catch(_) {}
                bra = cursor;
                slice_from('\u0BCD');
                B_found_a_match = true;
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            var v_6 = limit - cursor;
            ket = cursor;
            if (find_among_b(a_17) == 0)
            {
                return false;
            }
            bra = cursor;
            slice_del();
            B_found_a_match = true;
            cursor = limit - v_6;
        } on BreakLab0 catch(_) {}
        cursor = limit_backward;
        r_fix_endings();
        return true;
    }

    bool r_remove_vetrumai_urupukal() {
        B_found_a_match = false;
        B_found_vetrumai_urupu = false;
        if (!r_has_min_length())
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                var v_2 = limit - cursor;
                ket = cursor;
                if (!(eq_s_b('\u0BA9\u0BC8')))
                {
                    throw BreakLab1();
                }
                bra = cursor;
                slice_del();
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab2
                var v_3 = limit - cursor;
                ket = cursor;
                try {//lab3
                    var v_4 = limit - cursor;
                    try {//lab4
                        try {//lab5
                            var v_5 = limit - cursor;
                            try {//lab6
                                if (!(eq_s_b('\u0BBF\u0BA9\u0BC8')))
                                {
                                    throw BreakLab6();
                                }
                                throw BreakLab5();
                            } on BreakLab6 catch(_) {}
                            cursor = limit - v_5;
                            if (!(eq_s_b('\u0BC8')))
                            {
                                throw BreakLab4();
                            }
                        } on BreakLab5 catch(_) {}
                        var v_6 = limit - cursor;
                        {
                            var v_7 = limit - cursor;
                            try {//lab7
                                if (find_among_b(a_18) == 0)
                                {
                                    throw BreakLab7();
                                }
                                throw BreakLab4();
                            } on BreakLab7 catch(_) {}
                            cursor = limit - v_7;
                        }
                        cursor = limit - v_6;
                        throw BreakLab3();
                    } on BreakLab4 catch(_) {}
                    cursor = limit - v_4;
                    if (!(eq_s_b('\u0BC8')))
                    {
                        throw BreakLab2();
                    }
                    var v_8 = limit - cursor;
                    if (find_among_b(a_19) == 0)
                    {
                        throw BreakLab2();
                    }
                    if (!(eq_s_b('\u0BCD')))
                    {
                        throw BreakLab2();
                    }
                    cursor = limit - v_8;
                } on BreakLab3 catch(_) {}
                bra = cursor;
                slice_from('\u0BCD');
                cursor = limit - v_3;
                throw BreakLab0();
            } on BreakLab2 catch(_) {}
            cursor = limit - v_1;
            try {//lab8
                var v_9 = limit - cursor;
                ket = cursor;
                try {//lab9
                    var v_10 = limit - cursor;
                    try {//lab10
                        if (!(eq_s_b('\u0BCA\u0B9F\u0BC1')))
                        {
                            throw BreakLab10();
                        }
                        throw BreakLab9();
                    } on BreakLab10 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab11
                        if (!(eq_s_b('\u0BCB\u0B9F\u0BC1')))
                        {
                            throw BreakLab11();
                        }
                        throw BreakLab9();
                    } on BreakLab11 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab12
                        if (!(eq_s_b('\u0BBF\u0BB2\u0BCD')))
                        {
                            throw BreakLab12();
                        }
                        throw BreakLab9();
                    } on BreakLab12 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab13
                        if (!(eq_s_b('\u0BBF\u0BB1\u0BCD')))
                        {
                            throw BreakLab13();
                        }
                        throw BreakLab9();
                    } on BreakLab13 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab14
                        if (!(eq_s_b('\u0BBF\u0BA9\u0BCD')))
                        {
                            throw BreakLab14();
                        }
                        var v_11 = limit - cursor;
                        {
                            var v_12 = limit - cursor;
                            try {//lab15
                                if (!(eq_s_b('\u0BAE')))
                                {
                                    throw BreakLab15();
                                }
                                throw BreakLab14();
                            } on BreakLab15 catch(_) {}
                            cursor = limit - v_12;
                        }
                        cursor = limit - v_11;
                        throw BreakLab9();
                    } on BreakLab14 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab16
                        if (!(eq_s_b('\u0BBF\u0BA9\u0BCD\u0BB1\u0BC1')))
                        {
                            throw BreakLab16();
                        }
                        throw BreakLab9();
                    } on BreakLab16 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab17
                        if (!(eq_s_b('\u0BBF\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4\u0BC1')))
                        {
                            throw BreakLab17();
                        }
                        throw BreakLab9();
                    } on BreakLab17 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab18
                        if (!(eq_s_b('\u0BB5\u0BBF\u0B9F')))
                        {
                            throw BreakLab18();
                        }
                        throw BreakLab9();
                    } on BreakLab18 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab19
                        if (!(current.length >= 7))
                        {
                            throw BreakLab19();
                        }
                        if (!(eq_s_b('\u0BBF\u0B9F\u0BAE\u0BCD')))
                        {
                            throw BreakLab19();
                        }
                        throw BreakLab9();
                    } on BreakLab19 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab20
                        if (!(eq_s_b('\u0BBE\u0BB2\u0BCD')))
                        {
                            throw BreakLab20();
                        }
                        throw BreakLab9();
                    } on BreakLab20 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab21
                        if (!(eq_s_b('\u0BC1\u0B9F\u0BC8')))
                        {
                            throw BreakLab21();
                        }
                        throw BreakLab9();
                    } on BreakLab21 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab22
                        if (!(eq_s_b('\u0BBE\u0BAE\u0BB2\u0BCD')))
                        {
                            throw BreakLab22();
                        }
                        throw BreakLab9();
                    } on BreakLab22 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab23
                        if (!(eq_s_b('\u0BB2\u0BCD')))
                        {
                            throw BreakLab23();
                        }
                        var v_13 = limit - cursor;
                        {
                            var v_14 = limit - cursor;
                            try {//lab24
                                if (find_among_b(a_20) == 0)
                                {
                                    throw BreakLab24();
                                }
                                throw BreakLab23();
                            } on BreakLab24 catch(_) {}
                            cursor = limit - v_14;
                        }
                        cursor = limit - v_13;
                        throw BreakLab9();
                    } on BreakLab23 catch(_) {}
                    cursor = limit - v_10;
                    if (!(eq_s_b('\u0BC1\u0BB3\u0BCD')))
                    {
                        throw BreakLab8();
                    }
                } on BreakLab9 catch(_) {}
                bra = cursor;
                slice_from('\u0BCD');
                cursor = limit - v_9;
                throw BreakLab0();
            } on BreakLab8 catch(_) {}
            cursor = limit - v_1;
            try {//lab25
                var v_15 = limit - cursor;
                ket = cursor;
                try {//lab26
                    var v_16 = limit - cursor;
                    try {//lab27
                        if (!(eq_s_b('\u0B95\u0BA3\u0BCD')))
                        {
                            throw BreakLab27();
                        }
                        throw BreakLab26();
                    } on BreakLab27 catch(_) {}
                    cursor = limit - v_16;
                    try {//lab28
                        if (!(eq_s_b('\u0BAE\u0BC1\u0BA9\u0BCD')))
                        {
                            throw BreakLab28();
                        }
                        throw BreakLab26();
                    } on BreakLab28 catch(_) {}
                    cursor = limit - v_16;
                    try {//lab29
                        if (!(eq_s_b('\u0BAE\u0BC7\u0BB2\u0BCD')))
                        {
                            throw BreakLab29();
                        }
                        throw BreakLab26();
                    } on BreakLab29 catch(_) {}
                    cursor = limit - v_16;
                    try {//lab30
                        if (!(eq_s_b('\u0BAE\u0BC7\u0BB1\u0BCD')))
                        {
                            throw BreakLab30();
                        }
                        throw BreakLab26();
                    } on BreakLab30 catch(_) {}
                    cursor = limit - v_16;
                    try {//lab31
                        if (!(eq_s_b('\u0B95\u0BC0\u0BB4\u0BCD')))
                        {
                            throw BreakLab31();
                        }
                        throw BreakLab26();
                    } on BreakLab31 catch(_) {}
                    cursor = limit - v_16;
                    try {//lab32
                        if (!(eq_s_b('\u0BAA\u0BBF\u0BA9\u0BCD')))
                        {
                            throw BreakLab32();
                        }
                        throw BreakLab26();
                    } on BreakLab32 catch(_) {}
                    cursor = limit - v_16;
                    if (!(eq_s_b('\u0BA4\u0BC1')))
                    {
                        throw BreakLab25();
                    }
                    var v_17 = limit - cursor;
                    {
                        var v_18 = limit - cursor;
                        try {//lab33
                            if (find_among_b(a_21) == 0)
                            {
                                throw BreakLab33();
                            }
                            throw BreakLab25();
                        } on BreakLab33 catch(_) {}
                        cursor = limit - v_18;
                    }
                    cursor = limit - v_17;
                } on BreakLab26 catch(_) {}
                bra = cursor;
                slice_del();
                cursor = limit - v_15;
                throw BreakLab0();
            } on BreakLab25 catch(_) {}
            cursor = limit - v_1;
            var v_19 = limit - cursor;
            ket = cursor;
            if (!(eq_s_b('\u0BC0')))
            {
                return false;
            }
            bra = cursor;
            slice_from('\u0BBF');
            cursor = limit - v_19;
        } on BreakLab0 catch(_) {}
        B_found_a_match = true;
        B_found_vetrumai_urupu = true;
        var v_20 = limit - cursor;
        try {//lab34
            ket = cursor;
            if (!(eq_s_b('\u0BBF\u0BA9\u0BCD')))
            {
                throw BreakLab34();
            }
            bra = cursor;
            slice_from('\u0BCD');
        } on BreakLab34 catch(_) {}
        cursor = limit - v_20;
        cursor = limit_backward;
        r_fix_endings();
        return true;
    }

    bool r_remove_tense_suffixes() {
        B_found_a_match = true;
        while(true)
        {
            var v_1 = cursor;
            try {//lab0
                if (!(B_found_a_match))
                {
                    throw BreakLab0();
                }
                var v_2 = cursor;
                r_remove_tense_suffix();
                cursor = v_2;
                continue;
            } on BreakLab0 catch(_) {}
            cursor = v_1;
            break;
        }
        return true;
    }

    bool r_remove_tense_suffix() {
        B_found_a_match = false;
        if (!r_has_min_length())
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        var v_1 = limit - cursor;
        try {//lab0
            try {//lab1
                var v_2 = limit - cursor;
                try {//lab2
                    var v_3 = limit - cursor;
                    ket = cursor;
                    if (find_among_b(a_22) == 0)
                    {
                        throw BreakLab2();
                    }
                    bra = cursor;
                    slice_del();
                    B_found_a_match = true;
                    cursor = limit - v_3;
                    throw BreakLab1();
                } on BreakLab2 catch(_) {}
                cursor = limit - v_2;
                try {//lab3
                    var v_4 = limit - cursor;
                    ket = cursor;
                    try {//lab4
                        var v_5 = limit - cursor;
                        try {//lab5
                            if (!(eq_s_b('\u0BAE\u0BBE\u0BB0\u0BCD')))
                            {
                                throw BreakLab5();
                            }
                            throw BreakLab4();
                        } on BreakLab5 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab6
                            if (!(eq_s_b('\u0BAE\u0BBF\u0BA9\u0BCD')))
                            {
                                throw BreakLab6();
                            }
                            throw BreakLab4();
                        } on BreakLab6 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab7
                            if (!(eq_s_b('\u0BA9\u0BA9\u0BCD')))
                            {
                                throw BreakLab7();
                            }
                            throw BreakLab4();
                        } on BreakLab7 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab8
                            if (!(eq_s_b('\u0BA9\u0BBE\u0BA9\u0BCD')))
                            {
                                throw BreakLab8();
                            }
                            throw BreakLab4();
                        } on BreakLab8 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab9
                            if (!(eq_s_b('\u0BA9\u0BBE\u0BB3\u0BCD')))
                            {
                                throw BreakLab9();
                            }
                            throw BreakLab4();
                        } on BreakLab9 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab10
                            if (!(eq_s_b('\u0BA9\u0BBE\u0BB0\u0BCD')))
                            {
                                throw BreakLab10();
                            }
                            throw BreakLab4();
                        } on BreakLab10 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab11
                            if (!(eq_s_b('\u0BB5\u0BA9\u0BCD')))
                            {
                                throw BreakLab11();
                            }
                            var v_6 = limit - cursor;
                            {
                                var v_7 = limit - cursor;
                                try {//lab12
                                    if (find_among_b(a_23) == 0)
                                    {
                                        throw BreakLab12();
                                    }
                                    throw BreakLab11();
                                } on BreakLab12 catch(_) {}
                                cursor = limit - v_7;
                            }
                            cursor = limit - v_6;
                            throw BreakLab4();
                        } on BreakLab11 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab13
                            if (!(eq_s_b('\u0BA9\u0BB3\u0BCD')))
                            {
                                throw BreakLab13();
                            }
                            throw BreakLab4();
                        } on BreakLab13 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab14
                            if (!(eq_s_b('\u0BB5\u0BB3\u0BCD')))
                            {
                                throw BreakLab14();
                            }
                            throw BreakLab4();
                        } on BreakLab14 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab15
                            if (!(eq_s_b('\u0BA9\u0BB0\u0BCD')))
                            {
                                throw BreakLab15();
                            }
                            throw BreakLab4();
                        } on BreakLab15 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab16
                            if (!(eq_s_b('\u0BB5\u0BB0\u0BCD')))
                            {
                                throw BreakLab16();
                            }
                            throw BreakLab4();
                        } on BreakLab16 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab17
                            if (!(eq_s_b('\u0BA9')))
                            {
                                throw BreakLab17();
                            }
                            throw BreakLab4();
                        } on BreakLab17 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab18
                            if (!(eq_s_b('\u0BAA')))
                            {
                                throw BreakLab18();
                            }
                            throw BreakLab4();
                        } on BreakLab18 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab19
                            if (!(eq_s_b('\u0B95')))
                            {
                                throw BreakLab19();
                            }
                            throw BreakLab4();
                        } on BreakLab19 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab20
                            if (!(eq_s_b('\u0BA4')))
                            {
                                throw BreakLab20();
                            }
                            throw BreakLab4();
                        } on BreakLab20 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab21
                            if (!(eq_s_b('\u0BAF')))
                            {
                                throw BreakLab21();
                            }
                            throw BreakLab4();
                        } on BreakLab21 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab22
                            if (!(eq_s_b('\u0BAA\u0BA9\u0BCD')))
                            {
                                throw BreakLab22();
                            }
                            throw BreakLab4();
                        } on BreakLab22 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab23
                            if (!(eq_s_b('\u0BAA\u0BB3\u0BCD')))
                            {
                                throw BreakLab23();
                            }
                            throw BreakLab4();
                        } on BreakLab23 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab24
                            if (!(eq_s_b('\u0BAA\u0BB0\u0BCD')))
                            {
                                throw BreakLab24();
                            }
                            throw BreakLab4();
                        } on BreakLab24 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab25
                            if (!(eq_s_b('\u0BA4\u0BC1')))
                            {
                                throw BreakLab25();
                            }
                            var v_8 = limit - cursor;
                            {
                                var v_9 = limit - cursor;
                                try {//lab26
                                    if (find_among_b(a_24) == 0)
                                    {
                                        throw BreakLab26();
                                    }
                                    throw BreakLab25();
                                } on BreakLab26 catch(_) {}
                                cursor = limit - v_9;
                            }
                            cursor = limit - v_8;
                            throw BreakLab4();
                        } on BreakLab25 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab27
                            if (!(eq_s_b('\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1')))
                            {
                                throw BreakLab27();
                            }
                            throw BreakLab4();
                        } on BreakLab27 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab28
                            if (!(eq_s_b('\u0BAA\u0BAE\u0BCD')))
                            {
                                throw BreakLab28();
                            }
                            throw BreakLab4();
                        } on BreakLab28 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab29
                            if (!(eq_s_b('\u0BA9\u0BAE\u0BCD')))
                            {
                                throw BreakLab29();
                            }
                            throw BreakLab4();
                        } on BreakLab29 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab30
                            if (!(eq_s_b('\u0BA4\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab30();
                            }
                            throw BreakLab4();
                        } on BreakLab30 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab31
                            if (!(eq_s_b('\u0BB1\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab31();
                            }
                            throw BreakLab4();
                        } on BreakLab31 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab32
                            if (!(eq_s_b('\u0B95\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab32();
                            }
                            throw BreakLab4();
                        } on BreakLab32 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab33
                            if (!(eq_s_b('\u0BA9\u0BC6\u0BA9\u0BCD')))
                            {
                                throw BreakLab33();
                            }
                            throw BreakLab4();
                        } on BreakLab33 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab34
                            if (!(eq_s_b('\u0BA9\u0BC8')))
                            {
                                throw BreakLab34();
                            }
                            throw BreakLab4();
                        } on BreakLab34 catch(_) {}
                        cursor = limit - v_5;
                        if (!(eq_s_b('\u0BB5\u0BC8')))
                        {
                            throw BreakLab3();
                        }
                    } on BreakLab4 catch(_) {}
                    bra = cursor;
                    slice_del();
                    B_found_a_match = true;
                    cursor = limit - v_4;
                    throw BreakLab1();
                } on BreakLab3 catch(_) {}
                cursor = limit - v_2;
                try {//lab35
                    var v_10 = limit - cursor;
                    ket = cursor;
                    try {//lab36
                        var v_11 = limit - cursor;
                        try {//lab37
                            if (!(eq_s_b('\u0BBE\u0BA9\u0BCD')))
                            {
                                throw BreakLab37();
                            }
                            var v_12 = limit - cursor;
                            {
                                var v_13 = limit - cursor;
                                try {//lab38
                                    if (!(eq_s_b('\u0B9A')))
                                    {
                                        throw BreakLab38();
                                    }
                                    throw BreakLab37();
                                } on BreakLab38 catch(_) {}
                                cursor = limit - v_13;
                            }
                            cursor = limit - v_12;
                            throw BreakLab36();
                        } on BreakLab37 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab39
                            if (!(eq_s_b('\u0BBE\u0BB3\u0BCD')))
                            {
                                throw BreakLab39();
                            }
                            throw BreakLab36();
                        } on BreakLab39 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab40
                            if (!(eq_s_b('\u0BBE\u0BB0\u0BCD')))
                            {
                                throw BreakLab40();
                            }
                            throw BreakLab36();
                        } on BreakLab40 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab41
                            if (!(eq_s_b('\u0BC7\u0BA9\u0BCD')))
                            {
                                throw BreakLab41();
                            }
                            throw BreakLab36();
                        } on BreakLab41 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab42
                            if (!(eq_s_b('\u0BBE')))
                            {
                                throw BreakLab42();
                            }
                            throw BreakLab36();
                        } on BreakLab42 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab43
                            if (!(eq_s_b('\u0BBE\u0BAE\u0BCD')))
                            {
                                throw BreakLab43();
                            }
                            throw BreakLab36();
                        } on BreakLab43 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab44
                            if (!(eq_s_b('\u0BC6\u0BAE\u0BCD')))
                            {
                                throw BreakLab44();
                            }
                            throw BreakLab36();
                        } on BreakLab44 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab45
                            if (!(eq_s_b('\u0BC7\u0BAE\u0BCD')))
                            {
                                throw BreakLab45();
                            }
                            throw BreakLab36();
                        } on BreakLab45 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab46
                            if (!(eq_s_b('\u0BCB\u0BAE\u0BCD')))
                            {
                                throw BreakLab46();
                            }
                            throw BreakLab36();
                        } on BreakLab46 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab47
                            if (!(eq_s_b('\u0B95\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab47();
                            }
                            throw BreakLab36();
                        } on BreakLab47 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab48
                            if (!(eq_s_b('\u0BA4\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab48();
                            }
                            throw BreakLab36();
                        } on BreakLab48 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab49
                            if (!(eq_s_b('\u0B9F\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab49();
                            }
                            throw BreakLab36();
                        } on BreakLab49 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab50
                            if (!(eq_s_b('\u0BB1\u0BC1\u0BAE\u0BCD')))
                            {
                                throw BreakLab50();
                            }
                            throw BreakLab36();
                        } on BreakLab50 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab51
                            if (!(eq_s_b('\u0BBE\u0BAF\u0BCD')))
                            {
                                throw BreakLab51();
                            }
                            throw BreakLab36();
                        } on BreakLab51 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab52
                            if (!(eq_s_b('\u0BA9\u0BC6\u0BA9\u0BCD')))
                            {
                                throw BreakLab52();
                            }
                            throw BreakLab36();
                        } on BreakLab52 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab53
                            if (!(eq_s_b('\u0BA9\u0BBF\u0BB0\u0BCD')))
                            {
                                throw BreakLab53();
                            }
                            throw BreakLab36();
                        } on BreakLab53 catch(_) {}
                        cursor = limit - v_11;
                        try {//lab54
                            if (!(eq_s_b('\u0BC0\u0BB0\u0BCD')))
                            {
                                throw BreakLab54();
                            }
                            throw BreakLab36();
                        } on BreakLab54 catch(_) {}
                        cursor = limit - v_11;
                        if (!(eq_s_b('\u0BC0\u0BAF\u0BB0\u0BCD')))
                        {
                            throw BreakLab35();
                        }
                    } on BreakLab36 catch(_) {}
                    bra = cursor;
                    slice_from('\u0BCD');
                    B_found_a_match = true;
                    cursor = limit - v_10;
                    throw BreakLab1();
                } on BreakLab35 catch(_) {}
                cursor = limit - v_2;
                var v_14 = limit - cursor;
                ket = cursor;
                try {//lab55
                    var v_15 = limit - cursor;
                    try {//lab56
                        if (!(eq_s_b('\u0B95\u0BC1')))
                        {
                            throw BreakLab56();
                        }
                        throw BreakLab55();
                    } on BreakLab56 catch(_) {}
                    cursor = limit - v_15;
                    if (!(eq_s_b('\u0BA4\u0BC1')))
                    {
                        throw BreakLab0();
                    }
                } on BreakLab55 catch(_) {}
                var v_16 = limit - cursor;
                if (!(eq_s_b('\u0BCD')))
                {
                    throw BreakLab0();
                }
                cursor = limit - v_16;
                bra = cursor;
                slice_del();
                B_found_a_match = true;
                cursor = limit - v_14;
            } on BreakLab1 catch(_) {}
        } on BreakLab0 catch(_) {}
        cursor = limit - v_1;
        var v_17 = limit - cursor;
        try {//lab57
            ket = cursor;
            if (find_among_b(a_25) == 0)
            {
                throw BreakLab57();
            }
            bra = cursor;
            slice_del();
            B_found_a_match = true;
        } on BreakLab57 catch(_) {}
        cursor = limit - v_17;
        cursor = limit_backward;
        r_fix_endings();
        return true;
    }

    bool stem() {
        B_found_vetrumai_urupu = false;
        var v_1 = cursor;
        r_fix_ending();
        cursor = v_1;
        if (!r_has_min_length())
        {
            return false;
        }
        var v_2 = cursor;
        r_remove_question_prefixes();
        cursor = v_2;
        var v_3 = cursor;
        r_remove_pronoun_prefixes();
        cursor = v_3;
        var v_4 = cursor;
        r_remove_question_suffixes();
        cursor = v_4;
        var v_5 = cursor;
        r_remove_um();
        cursor = v_5;
        var v_6 = cursor;
        r_remove_common_word_endings();
        cursor = v_6;
        var v_7 = cursor;
        r_remove_vetrumai_urupukal();
        cursor = v_7;
        var v_8 = cursor;
        r_remove_plural_suffix();
        cursor = v_8;
        var v_9 = cursor;
        r_remove_command_suffixes();
        cursor = v_9;
        var v_10 = cursor;
        r_remove_tense_suffixes();
        cursor = v_10;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
class BreakLab22{}
class BreakLab23{}
class BreakLab24{}
class BreakLab25{}
class BreakLab26{}
class BreakLab27{}
class BreakLab28{}
class BreakLab29{}
class BreakLab30{}
class BreakLab31{}
class BreakLab32{}
class BreakLab33{}
class BreakLab34{}
class BreakLab35{}
class BreakLab36{}
class BreakLab37{}
class BreakLab38{}
class BreakLab39{}
class BreakLab40{}
class BreakLab41{}
class BreakLab42{}
class BreakLab43{}
class BreakLab44{}
class BreakLab45{}
class BreakLab46{}
class BreakLab47{}
class BreakLab48{}
class BreakLab49{}
class BreakLab50{}
class BreakLab51{}
class BreakLab52{}
class BreakLab53{}
class BreakLab54{}
class BreakLab55{}
class BreakLab56{}
class BreakLab57{}
