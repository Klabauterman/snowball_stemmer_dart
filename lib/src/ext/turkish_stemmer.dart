// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class turkish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('m', -1, -1),
         Among('n', -1, -1),
         Among('miz', -1, -1),
         Among('niz', -1, -1),
         Among('muz', -1, -1),
         Among('nuz', -1, -1),
         Among('m\u00FCz', -1, -1),
         Among('n\u00FCz', -1, -1),
         Among('m\u0131z', -1, -1),
         Among('n\u0131z', -1, -1)
    ];

    late final List<Among> a_1 = [
         Among('leri', -1, -1),
         Among('lar\u0131', -1, -1)
    ];

    late final List<Among> a_2 = [
         Among('ni', -1, -1),
         Among('nu', -1, -1),
         Among('n\u00FC', -1, -1),
         Among('n\u0131', -1, -1)
    ];

    late final List<Among> a_3 = [
         Among('in', -1, -1),
         Among('un', -1, -1),
         Among('\u00FCn', -1, -1),
         Among('\u0131n', -1, -1)
    ];

    late final List<Among> a_4 = [
         Among('a', -1, -1),
         Among('e', -1, -1)
    ];

    late final List<Among> a_5 = [
         Among('na', -1, -1),
         Among('ne', -1, -1)
    ];

    late final List<Among> a_6 = [
         Among('da', -1, -1),
         Among('ta', -1, -1),
         Among('de', -1, -1),
         Among('te', -1, -1)
    ];

    late final List<Among> a_7 = [
         Among('nda', -1, -1),
         Among('nde', -1, -1)
    ];

    late final List<Among> a_8 = [
         Among('dan', -1, -1),
         Among('tan', -1, -1),
         Among('den', -1, -1),
         Among('ten', -1, -1)
    ];

    late final List<Among> a_9 = [
         Among('ndan', -1, -1),
         Among('nden', -1, -1)
    ];

    late final List<Among> a_10 = [
         Among('la', -1, -1),
         Among('le', -1, -1)
    ];

    late final List<Among> a_11 = [
         Among('ca', -1, -1),
         Among('ce', -1, -1)
    ];

    late final List<Among> a_12 = [
         Among('im', -1, -1),
         Among('um', -1, -1),
         Among('\u00FCm', -1, -1),
         Among('\u0131m', -1, -1)
    ];

    late final List<Among> a_13 = [
         Among('sin', -1, -1),
         Among('sun', -1, -1),
         Among('s\u00FCn', -1, -1),
         Among('s\u0131n', -1, -1)
    ];

    late final List<Among> a_14 = [
         Among('iz', -1, -1),
         Among('uz', -1, -1),
         Among('\u00FCz', -1, -1),
         Among('\u0131z', -1, -1)
    ];

    late final List<Among> a_15 = [
         Among('siniz', -1, -1),
         Among('sunuz', -1, -1),
         Among('s\u00FCn\u00FCz', -1, -1),
         Among('s\u0131n\u0131z', -1, -1)
    ];

    late final List<Among> a_16 = [
         Among('lar', -1, -1),
         Among('ler', -1, -1)
    ];

    late final List<Among> a_17 = [
         Among('niz', -1, -1),
         Among('nuz', -1, -1),
         Among('n\u00FCz', -1, -1),
         Among('n\u0131z', -1, -1)
    ];

    late final List<Among> a_18 = [
         Among('dir', -1, -1),
         Among('tir', -1, -1),
         Among('dur', -1, -1),
         Among('tur', -1, -1),
         Among('d\u00FCr', -1, -1),
         Among('t\u00FCr', -1, -1),
         Among('d\u0131r', -1, -1),
         Among('t\u0131r', -1, -1)
    ];

    late final List<Among> a_19 = [
         Among('cas\u0131na', -1, -1),
         Among('cesine', -1, -1)
    ];

    late final List<Among> a_20 = [
         Among('di', -1, -1),
         Among('ti', -1, -1),
         Among('dik', -1, -1),
         Among('tik', -1, -1),
         Among('duk', -1, -1),
         Among('tuk', -1, -1),
         Among('d\u00FCk', -1, -1),
         Among('t\u00FCk', -1, -1),
         Among('d\u0131k', -1, -1),
         Among('t\u0131k', -1, -1),
         Among('dim', -1, -1),
         Among('tim', -1, -1),
         Among('dum', -1, -1),
         Among('tum', -1, -1),
         Among('d\u00FCm', -1, -1),
         Among('t\u00FCm', -1, -1),
         Among('d\u0131m', -1, -1),
         Among('t\u0131m', -1, -1),
         Among('din', -1, -1),
         Among('tin', -1, -1),
         Among('dun', -1, -1),
         Among('tun', -1, -1),
         Among('d\u00FCn', -1, -1),
         Among('t\u00FCn', -1, -1),
         Among('d\u0131n', -1, -1),
         Among('t\u0131n', -1, -1),
         Among('du', -1, -1),
         Among('tu', -1, -1),
         Among('d\u00FC', -1, -1),
         Among('t\u00FC', -1, -1),
         Among('d\u0131', -1, -1),
         Among('t\u0131', -1, -1)
    ];

    late final List<Among> a_21 = [
         Among('sa', -1, -1),
         Among('se', -1, -1),
         Among('sak', -1, -1),
         Among('sek', -1, -1),
         Among('sam', -1, -1),
         Among('sem', -1, -1),
         Among('san', -1, -1),
         Among('sen', -1, -1)
    ];

    late final List<Among> a_22 = [
         Among('mi\u015F', -1, -1),
         Among('mu\u015F', -1, -1),
         Among('m\u00FC\u015F', -1, -1),
         Among('m\u0131\u015F', -1, -1)
    ];

    late final List<Among> a_23 = [
         Among('b', -1, 1),
         Among('c', -1, 2),
         Among('d', -1, 3),
         Among('\u011F', -1, 4)
    ];

    static final List<int> g_vowel = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 1 ];

    static final List<int> g_U = [1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1 ];

    static final List<int> g_vowel1 = [1, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ];

    static final List<int> g_vowel2 = [17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130 ];

    static final List<int> g_vowel3 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ];

    static final List<int> g_vowel4 = [17 ];

    static final List<int> g_vowel5 = [65 ];

    static final List<int> g_vowel6 = [65 ];

    late bool B_continue_stemming_noun_suffixes;


    bool r_check_vowel_harmony() {
        var v_1 = limit - cursor;
        try { //golab0
            while(true)             {
                var v_2 = limit - cursor;
                try {//lab1
                    if (!(in_grouping_b(g_vowel, 97, 305)))
                    {
                        throw BreakLab1();
                    }
                    cursor = limit - v_2;
                    throw BreakLab0();
                } on BreakLab1 catch(_) {}
                cursor = limit - v_2;
                if (cursor <= limit_backward)
                {
                    return false;
                }
                cursor--;
            }
        } on BreakLab0 catch(_) {}
        try {//lab2
            var v_3 = limit - cursor;
            try {//lab3
                if (!(eq_s_b('a')))
                {
                    throw BreakLab3();
                }
                try { //golab4
                    while(true)                     {
                        var v_4 = limit - cursor;
                        try {//lab5
                            if (!(in_grouping_b(g_vowel1, 97, 305)))
                            {
                                throw BreakLab5();
                            }
                            cursor = limit - v_4;
                            throw BreakLab4();
                        } on BreakLab5 catch(_) {}
                        cursor = limit - v_4;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab3();
                        }
                        cursor--;
                    }
                } on BreakLab4 catch(_) {}
                throw BreakLab2();
            } on BreakLab3 catch(_) {}
            cursor = limit - v_3;
            try {//lab6
                if (!(eq_s_b('e')))
                {
                    throw BreakLab6();
                }
                try { //golab7
                    while(true)                     {
                        var v_5 = limit - cursor;
                        try {//lab8
                            if (!(in_grouping_b(g_vowel2, 101, 252)))
                            {
                                throw BreakLab8();
                            }
                            cursor = limit - v_5;
                            throw BreakLab7();
                        } on BreakLab8 catch(_) {}
                        cursor = limit - v_5;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab6();
                        }
                        cursor--;
                    }
                } on BreakLab7 catch(_) {}
                throw BreakLab2();
            } on BreakLab6 catch(_) {}
            cursor = limit - v_3;
            try {//lab9
                if (!(eq_s_b('\u0131')))
                {
                    throw BreakLab9();
                }
                try { //golab10
                    while(true)                     {
                        var v_6 = limit - cursor;
                        try {//lab11
                            if (!(in_grouping_b(g_vowel3, 97, 305)))
                            {
                                throw BreakLab11();
                            }
                            cursor = limit - v_6;
                            throw BreakLab10();
                        } on BreakLab11 catch(_) {}
                        cursor = limit - v_6;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab9();
                        }
                        cursor--;
                    }
                } on BreakLab10 catch(_) {}
                throw BreakLab2();
            } on BreakLab9 catch(_) {}
            cursor = limit - v_3;
            try {//lab12
                if (!(eq_s_b('i')))
                {
                    throw BreakLab12();
                }
                try { //golab13
                    while(true)                     {
                        var v_7 = limit - cursor;
                        try {//lab14
                            if (!(in_grouping_b(g_vowel4, 101, 105)))
                            {
                                throw BreakLab14();
                            }
                            cursor = limit - v_7;
                            throw BreakLab13();
                        } on BreakLab14 catch(_) {}
                        cursor = limit - v_7;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab12();
                        }
                        cursor--;
                    }
                } on BreakLab13 catch(_) {}
                throw BreakLab2();
            } on BreakLab12 catch(_) {}
            cursor = limit - v_3;
            try {//lab15
                if (!(eq_s_b('o')))
                {
                    throw BreakLab15();
                }
                try { //golab16
                    while(true)                     {
                        var v_8 = limit - cursor;
                        try {//lab17
                            if (!(in_grouping_b(g_vowel5, 111, 117)))
                            {
                                throw BreakLab17();
                            }
                            cursor = limit - v_8;
                            throw BreakLab16();
                        } on BreakLab17 catch(_) {}
                        cursor = limit - v_8;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab15();
                        }
                        cursor--;
                    }
                } on BreakLab16 catch(_) {}
                throw BreakLab2();
            } on BreakLab15 catch(_) {}
            cursor = limit - v_3;
            try {//lab18
                if (!(eq_s_b('\u00F6')))
                {
                    throw BreakLab18();
                }
                try { //golab19
                    while(true)                     {
                        var v_9 = limit - cursor;
                        try {//lab20
                            if (!(in_grouping_b(g_vowel6, 246, 252)))
                            {
                                throw BreakLab20();
                            }
                            cursor = limit - v_9;
                            throw BreakLab19();
                        } on BreakLab20 catch(_) {}
                        cursor = limit - v_9;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab18();
                        }
                        cursor--;
                    }
                } on BreakLab19 catch(_) {}
                throw BreakLab2();
            } on BreakLab18 catch(_) {}
            cursor = limit - v_3;
            try {//lab21
                if (!(eq_s_b('u')))
                {
                    throw BreakLab21();
                }
                try { //golab22
                    while(true)                     {
                        var v_10 = limit - cursor;
                        try {//lab23
                            if (!(in_grouping_b(g_vowel5, 111, 117)))
                            {
                                throw BreakLab23();
                            }
                            cursor = limit - v_10;
                            throw BreakLab22();
                        } on BreakLab23 catch(_) {}
                        cursor = limit - v_10;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab21();
                        }
                        cursor--;
                    }
                } on BreakLab22 catch(_) {}
                throw BreakLab2();
            } on BreakLab21 catch(_) {}
            cursor = limit - v_3;
            if (!(eq_s_b('\u00FC')))
            {
                return false;
            }
            try { //golab24
                while(true)                 {
                    var v_11 = limit - cursor;
                    try {//lab25
                        if (!(in_grouping_b(g_vowel6, 246, 252)))
                        {
                            throw BreakLab25();
                        }
                        cursor = limit - v_11;
                        throw BreakLab24();
                    } on BreakLab25 catch(_) {}
                    cursor = limit - v_11;
                    if (cursor <= limit_backward)
                    {
                        return false;
                    }
                    cursor--;
                }
            } on BreakLab24 catch(_) {}
        } on BreakLab2 catch(_) {}
        cursor = limit - v_1;
        return true;
    }

    bool r_mark_suffix_with_optional_n_consonant() {
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!(eq_s_b('n')))
                {
                    throw BreakLab1();
                }
                var v_2 = limit - cursor;
                if (!(in_grouping_b(g_vowel, 97, 305)))
                {
                    throw BreakLab1();
                }
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            {
                var v_3 = limit - cursor;
                try {//lab2
                    var v_4 = limit - cursor;
                    if (!(eq_s_b('n')))
                    {
                        throw BreakLab2();
                    }
                    cursor = limit - v_4;
                    return false;
                } on BreakLab2 catch(_) {}
                cursor = limit - v_3;
            }
            var v_5 = limit - cursor;
            if (cursor <= limit_backward)
            {
                return false;
            }
            cursor--;
            if (!(in_grouping_b(g_vowel, 97, 305)))
            {
                return false;
            }
            cursor = limit - v_5;
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_mark_suffix_with_optional_s_consonant() {
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!(eq_s_b('s')))
                {
                    throw BreakLab1();
                }
                var v_2 = limit - cursor;
                if (!(in_grouping_b(g_vowel, 97, 305)))
                {
                    throw BreakLab1();
                }
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            {
                var v_3 = limit - cursor;
                try {//lab2
                    var v_4 = limit - cursor;
                    if (!(eq_s_b('s')))
                    {
                        throw BreakLab2();
                    }
                    cursor = limit - v_4;
                    return false;
                } on BreakLab2 catch(_) {}
                cursor = limit - v_3;
            }
            var v_5 = limit - cursor;
            if (cursor <= limit_backward)
            {
                return false;
            }
            cursor--;
            if (!(in_grouping_b(g_vowel, 97, 305)))
            {
                return false;
            }
            cursor = limit - v_5;
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_mark_suffix_with_optional_y_consonant() {
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!(eq_s_b('y')))
                {
                    throw BreakLab1();
                }
                var v_2 = limit - cursor;
                if (!(in_grouping_b(g_vowel, 97, 305)))
                {
                    throw BreakLab1();
                }
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            {
                var v_3 = limit - cursor;
                try {//lab2
                    var v_4 = limit - cursor;
                    if (!(eq_s_b('y')))
                    {
                        throw BreakLab2();
                    }
                    cursor = limit - v_4;
                    return false;
                } on BreakLab2 catch(_) {}
                cursor = limit - v_3;
            }
            var v_5 = limit - cursor;
            if (cursor <= limit_backward)
            {
                return false;
            }
            cursor--;
            if (!(in_grouping_b(g_vowel, 97, 305)))
            {
                return false;
            }
            cursor = limit - v_5;
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_mark_suffix_with_optional_U_vowel() {
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!(in_grouping_b(g_U, 105, 305)))
                {
                    throw BreakLab1();
                }
                var v_2 = limit - cursor;
                if (!(out_grouping_b(g_vowel, 97, 305)))
                {
                    throw BreakLab1();
                }
                cursor = limit - v_2;
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            {
                var v_3 = limit - cursor;
                try {//lab2
                    var v_4 = limit - cursor;
                    if (!(in_grouping_b(g_U, 105, 305)))
                    {
                        throw BreakLab2();
                    }
                    cursor = limit - v_4;
                    return false;
                } on BreakLab2 catch(_) {}
                cursor = limit - v_3;
            }
            var v_5 = limit - cursor;
            if (cursor <= limit_backward)
            {
                return false;
            }
            cursor--;
            if (!(out_grouping_b(g_vowel, 97, 305)))
            {
                return false;
            }
            cursor = limit - v_5;
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_mark_possessives() {
        if (find_among_b(a_0) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_U_vowel())
        {
            return false;
        }
        return true;
    }

    bool r_mark_sU() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (!(in_grouping_b(g_U, 105, 305)))
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_s_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_lArI() {
        if (find_among_b(a_1) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_yU() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (!(in_grouping_b(g_U, 105, 305)))
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_nU() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_2) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_nUn() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_3) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_n_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_yA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_4) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_nA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_5) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_DA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_6) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_ndA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_7) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_DAn() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_8) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_ndAn() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_9) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_ylA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_10) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_ki() {
        if (!(eq_s_b('ki')))
        {
            return false;
        }
        return true;
    }

    bool r_mark_ncA() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_11) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_n_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_yUm() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_12) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_sUn() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_13) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_yUz() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_14) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_sUnUz() {
        if (find_among_b(a_15) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_lAr() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_16) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_nUz() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_17) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_DUr() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_18) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_cAsInA() {
        if (find_among_b(a_19) == 0)
        {
            return false;
        }
        return true;
    }

    bool r_mark_yDU() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_20) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_ysA() {
        if (find_among_b(a_21) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_ymUs_() {
        if (!r_check_vowel_harmony())
        {
            return false;
        }
        if (find_among_b(a_22) == 0)
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_mark_yken() {
        if (!(eq_s_b('ken')))
        {
            return false;
        }
        if (!r_mark_suffix_with_optional_y_consonant())
        {
            return false;
        }
        return true;
    }

    bool r_stem_nominal_verb_suffixes() {
        ket = cursor;
        B_continue_stemming_noun_suffixes = true;
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                try {//lab2
                    var v_2 = limit - cursor;
                    try {//lab3
                        if (!r_mark_ymUs_())
                        {
                            throw BreakLab3();
                        }
                        throw BreakLab2();
                    } on BreakLab3 catch(_) {}
                    cursor = limit - v_2;
                    try {//lab4
                        if (!r_mark_yDU())
                        {
                            throw BreakLab4();
                        }
                        throw BreakLab2();
                    } on BreakLab4 catch(_) {}
                    cursor = limit - v_2;
                    try {//lab5
                        if (!r_mark_ysA())
                        {
                            throw BreakLab5();
                        }
                        throw BreakLab2();
                    } on BreakLab5 catch(_) {}
                    cursor = limit - v_2;
                    if (!r_mark_yken())
                    {
                        throw BreakLab1();
                    }
                } on BreakLab2 catch(_) {}
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab6
                if (!r_mark_cAsInA())
                {
                    throw BreakLab6();
                }
                try {//lab7
                    var v_3 = limit - cursor;
                    try {//lab8
                        if (!r_mark_sUnUz())
                        {
                            throw BreakLab8();
                        }
                        throw BreakLab7();
                    } on BreakLab8 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab9
                        if (!r_mark_lAr())
                        {
                            throw BreakLab9();
                        }
                        throw BreakLab7();
                    } on BreakLab9 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab10
                        if (!r_mark_yUm())
                        {
                            throw BreakLab10();
                        }
                        throw BreakLab7();
                    } on BreakLab10 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab11
                        if (!r_mark_sUn())
                        {
                            throw BreakLab11();
                        }
                        throw BreakLab7();
                    } on BreakLab11 catch(_) {}
                    cursor = limit - v_3;
                    try {//lab12
                        if (!r_mark_yUz())
                        {
                            throw BreakLab12();
                        }
                        throw BreakLab7();
                    } on BreakLab12 catch(_) {}
                    cursor = limit - v_3;
                } on BreakLab7 catch(_) {}
                if (!r_mark_ymUs_())
                {
                    throw BreakLab6();
                }
                throw BreakLab0();
            } on BreakLab6 catch(_) {}
            cursor = limit - v_1;
            try {//lab13
                if (!r_mark_lAr())
                {
                    throw BreakLab13();
                }
                bra = cursor;
                slice_del();
                var v_4 = limit - cursor;
                try {//lab14
                    ket = cursor;
                    try {//lab15
                        var v_5 = limit - cursor;
                        try {//lab16
                            if (!r_mark_DUr())
                            {
                                throw BreakLab16();
                            }
                            throw BreakLab15();
                        } on BreakLab16 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab17
                            if (!r_mark_yDU())
                            {
                                throw BreakLab17();
                            }
                            throw BreakLab15();
                        } on BreakLab17 catch(_) {}
                        cursor = limit - v_5;
                        try {//lab18
                            if (!r_mark_ysA())
                            {
                                throw BreakLab18();
                            }
                            throw BreakLab15();
                        } on BreakLab18 catch(_) {}
                        cursor = limit - v_5;
                        if (!r_mark_ymUs_())
                        {
                            cursor = limit - v_4;
                            throw BreakLab14();
                        }
                    } on BreakLab15 catch(_) {}
                } on BreakLab14 catch(_) {}
                B_continue_stemming_noun_suffixes = false;
                throw BreakLab0();
            } on BreakLab13 catch(_) {}
            cursor = limit - v_1;
            try {//lab19
                if (!r_mark_nUz())
                {
                    throw BreakLab19();
                }
                try {//lab20
                    var v_6 = limit - cursor;
                    try {//lab21
                        if (!r_mark_yDU())
                        {
                            throw BreakLab21();
                        }
                        throw BreakLab20();
                    } on BreakLab21 catch(_) {}
                    cursor = limit - v_6;
                    if (!r_mark_ysA())
                    {
                        throw BreakLab19();
                    }
                } on BreakLab20 catch(_) {}
                throw BreakLab0();
            } on BreakLab19 catch(_) {}
            cursor = limit - v_1;
            try {//lab22
                try {//lab23
                    var v_7 = limit - cursor;
                    try {//lab24
                        if (!r_mark_sUnUz())
                        {
                            throw BreakLab24();
                        }
                        throw BreakLab23();
                    } on BreakLab24 catch(_) {}
                    cursor = limit - v_7;
                    try {//lab25
                        if (!r_mark_yUz())
                        {
                            throw BreakLab25();
                        }
                        throw BreakLab23();
                    } on BreakLab25 catch(_) {}
                    cursor = limit - v_7;
                    try {//lab26
                        if (!r_mark_sUn())
                        {
                            throw BreakLab26();
                        }
                        throw BreakLab23();
                    } on BreakLab26 catch(_) {}
                    cursor = limit - v_7;
                    if (!r_mark_yUm())
                    {
                        throw BreakLab22();
                    }
                } on BreakLab23 catch(_) {}
                bra = cursor;
                slice_del();
                var v_8 = limit - cursor;
                try {//lab27
                    ket = cursor;
                    if (!r_mark_ymUs_())
                    {
                        cursor = limit - v_8;
                        throw BreakLab27();
                    }
                } on BreakLab27 catch(_) {}
                throw BreakLab0();
            } on BreakLab22 catch(_) {}
            cursor = limit - v_1;
            if (!r_mark_DUr())
            {
                return false;
            }
            bra = cursor;
            slice_del();
            var v_9 = limit - cursor;
            try {//lab28
                ket = cursor;
                try {//lab29
                    var v_10 = limit - cursor;
                    try {//lab30
                        if (!r_mark_sUnUz())
                        {
                            throw BreakLab30();
                        }
                        throw BreakLab29();
                    } on BreakLab30 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab31
                        if (!r_mark_lAr())
                        {
                            throw BreakLab31();
                        }
                        throw BreakLab29();
                    } on BreakLab31 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab32
                        if (!r_mark_yUm())
                        {
                            throw BreakLab32();
                        }
                        throw BreakLab29();
                    } on BreakLab32 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab33
                        if (!r_mark_sUn())
                        {
                            throw BreakLab33();
                        }
                        throw BreakLab29();
                    } on BreakLab33 catch(_) {}
                    cursor = limit - v_10;
                    try {//lab34
                        if (!r_mark_yUz())
                        {
                            throw BreakLab34();
                        }
                        throw BreakLab29();
                    } on BreakLab34 catch(_) {}
                    cursor = limit - v_10;
                } on BreakLab29 catch(_) {}
                if (!r_mark_ymUs_())
                {
                    cursor = limit - v_9;
                    throw BreakLab28();
                }
            } on BreakLab28 catch(_) {}
        } on BreakLab0 catch(_) {}
        bra = cursor;
        slice_del();
        return true;
    }

    bool r_stem_suffix_chain_before_ki() {
        ket = cursor;
        if (!r_mark_ki())
        {
            return false;
        }
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                if (!r_mark_DA())
                {
                    throw BreakLab1();
                }
                bra = cursor;
                slice_del();
                var v_2 = limit - cursor;
                try {//lab2
                    ket = cursor;
                    try {//lab3
                        var v_3 = limit - cursor;
                        try {//lab4
                            if (!r_mark_lAr())
                            {
                                throw BreakLab4();
                            }
                            bra = cursor;
                            slice_del();
                            var v_4 = limit - cursor;
                            try {//lab5
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_4;
                                    throw BreakLab5();
                                }
                            } on BreakLab5 catch(_) {}
                            throw BreakLab3();
                        } on BreakLab4 catch(_) {}
                        cursor = limit - v_3;
                        if (!r_mark_possessives())
                        {
                            cursor = limit - v_2;
                            throw BreakLab2();
                        }
                        bra = cursor;
                        slice_del();
                        var v_5 = limit - cursor;
                        try {//lab6
                            ket = cursor;
                            if (!r_mark_lAr())
                            {
                                cursor = limit - v_5;
                                throw BreakLab6();
                            }
                            bra = cursor;
                            slice_del();
                            if (!r_stem_suffix_chain_before_ki())
                            {
                                cursor = limit - v_5;
                                throw BreakLab6();
                            }
                        } on BreakLab6 catch(_) {}
                    } on BreakLab3 catch(_) {}
                } on BreakLab2 catch(_) {}
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab7
                if (!r_mark_nUn())
                {
                    throw BreakLab7();
                }
                bra = cursor;
                slice_del();
                var v_6 = limit - cursor;
                try {//lab8
                    ket = cursor;
                    try {//lab9
                        var v_7 = limit - cursor;
                        try {//lab10
                            if (!r_mark_lArI())
                            {
                                throw BreakLab10();
                            }
                            bra = cursor;
                            slice_del();
                            throw BreakLab9();
                        } on BreakLab10 catch(_) {}
                        cursor = limit - v_7;
                        try {//lab11
                            ket = cursor;
                            try {//lab12
                                var v_8 = limit - cursor;
                                try {//lab13
                                    if (!r_mark_possessives())
                                    {
                                        throw BreakLab13();
                                    }
                                    throw BreakLab12();
                                } on BreakLab13 catch(_) {}
                                cursor = limit - v_8;
                                if (!r_mark_sU())
                                {
                                    throw BreakLab11();
                                }
                            } on BreakLab12 catch(_) {}
                            bra = cursor;
                            slice_del();
                            var v_9 = limit - cursor;
                            try {//lab14
                                ket = cursor;
                                if (!r_mark_lAr())
                                {
                                    cursor = limit - v_9;
                                    throw BreakLab14();
                                }
                                bra = cursor;
                                slice_del();
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_9;
                                    throw BreakLab14();
                                }
                            } on BreakLab14 catch(_) {}
                            throw BreakLab9();
                        } on BreakLab11 catch(_) {}
                        cursor = limit - v_7;
                        if (!r_stem_suffix_chain_before_ki())
                        {
                            cursor = limit - v_6;
                            throw BreakLab8();
                        }
                    } on BreakLab9 catch(_) {}
                } on BreakLab8 catch(_) {}
                throw BreakLab0();
            } on BreakLab7 catch(_) {}
            cursor = limit - v_1;
            if (!r_mark_ndA())
            {
                return false;
            }
            try {//lab15
                var v_10 = limit - cursor;
                try {//lab16
                    if (!r_mark_lArI())
                    {
                        throw BreakLab16();
                    }
                    bra = cursor;
                    slice_del();
                    throw BreakLab15();
                } on BreakLab16 catch(_) {}
                cursor = limit - v_10;
                try {//lab17
                    if (!r_mark_sU())
                    {
                        throw BreakLab17();
                    }
                    bra = cursor;
                    slice_del();
                    var v_11 = limit - cursor;
                    try {//lab18
                        ket = cursor;
                        if (!r_mark_lAr())
                        {
                            cursor = limit - v_11;
                            throw BreakLab18();
                        }
                        bra = cursor;
                        slice_del();
                        if (!r_stem_suffix_chain_before_ki())
                        {
                            cursor = limit - v_11;
                            throw BreakLab18();
                        }
                    } on BreakLab18 catch(_) {}
                    throw BreakLab15();
                } on BreakLab17 catch(_) {}
                cursor = limit - v_10;
                if (!r_stem_suffix_chain_before_ki())
                {
                    return false;
                }
            } on BreakLab15 catch(_) {}
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_stem_noun_suffixes() {
        try {//lab0
            var v_1 = limit - cursor;
            try {//lab1
                ket = cursor;
                if (!r_mark_lAr())
                {
                    throw BreakLab1();
                }
                bra = cursor;
                slice_del();
                var v_2 = limit - cursor;
                try {//lab2
                    if (!r_stem_suffix_chain_before_ki())
                    {
                        cursor = limit - v_2;
                        throw BreakLab2();
                    }
                } on BreakLab2 catch(_) {}
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_1;
            try {//lab3
                ket = cursor;
                if (!r_mark_ncA())
                {
                    throw BreakLab3();
                }
                bra = cursor;
                slice_del();
                var v_3 = limit - cursor;
                try {//lab4
                    try {//lab5
                        var v_4 = limit - cursor;
                        try {//lab6
                            ket = cursor;
                            if (!r_mark_lArI())
                            {
                                throw BreakLab6();
                            }
                            bra = cursor;
                            slice_del();
                            throw BreakLab5();
                        } on BreakLab6 catch(_) {}
                        cursor = limit - v_4;
                        try {//lab7
                            ket = cursor;
                            try {//lab8
                                var v_5 = limit - cursor;
                                try {//lab9
                                    if (!r_mark_possessives())
                                    {
                                        throw BreakLab9();
                                    }
                                    throw BreakLab8();
                                } on BreakLab9 catch(_) {}
                                cursor = limit - v_5;
                                if (!r_mark_sU())
                                {
                                    throw BreakLab7();
                                }
                            } on BreakLab8 catch(_) {}
                            bra = cursor;
                            slice_del();
                            var v_6 = limit - cursor;
                            try {//lab10
                                ket = cursor;
                                if (!r_mark_lAr())
                                {
                                    cursor = limit - v_6;
                                    throw BreakLab10();
                                }
                                bra = cursor;
                                slice_del();
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_6;
                                    throw BreakLab10();
                                }
                            } on BreakLab10 catch(_) {}
                            throw BreakLab5();
                        } on BreakLab7 catch(_) {}
                        cursor = limit - v_4;
                        ket = cursor;
                        if (!r_mark_lAr())
                        {
                            cursor = limit - v_3;
                            throw BreakLab4();
                        }
                        bra = cursor;
                        slice_del();
                        if (!r_stem_suffix_chain_before_ki())
                        {
                            cursor = limit - v_3;
                            throw BreakLab4();
                        }
                    } on BreakLab5 catch(_) {}
                } on BreakLab4 catch(_) {}
                throw BreakLab0();
            } on BreakLab3 catch(_) {}
            cursor = limit - v_1;
            try {//lab11
                ket = cursor;
                try {//lab12
                    var v_7 = limit - cursor;
                    try {//lab13
                        if (!r_mark_ndA())
                        {
                            throw BreakLab13();
                        }
                        throw BreakLab12();
                    } on BreakLab13 catch(_) {}
                    cursor = limit - v_7;
                    if (!r_mark_nA())
                    {
                        throw BreakLab11();
                    }
                } on BreakLab12 catch(_) {}
                try {//lab14
                    var v_8 = limit - cursor;
                    try {//lab15
                        if (!r_mark_lArI())
                        {
                            throw BreakLab15();
                        }
                        bra = cursor;
                        slice_del();
                        throw BreakLab14();
                    } on BreakLab15 catch(_) {}
                    cursor = limit - v_8;
                    try {//lab16
                        if (!r_mark_sU())
                        {
                            throw BreakLab16();
                        }
                        bra = cursor;
                        slice_del();
                        var v_9 = limit - cursor;
                        try {//lab17
                            ket = cursor;
                            if (!r_mark_lAr())
                            {
                                cursor = limit - v_9;
                                throw BreakLab17();
                            }
                            bra = cursor;
                            slice_del();
                            if (!r_stem_suffix_chain_before_ki())
                            {
                                cursor = limit - v_9;
                                throw BreakLab17();
                            }
                        } on BreakLab17 catch(_) {}
                        throw BreakLab14();
                    } on BreakLab16 catch(_) {}
                    cursor = limit - v_8;
                    if (!r_stem_suffix_chain_before_ki())
                    {
                        throw BreakLab11();
                    }
                } on BreakLab14 catch(_) {}
                throw BreakLab0();
            } on BreakLab11 catch(_) {}
            cursor = limit - v_1;
            try {//lab18
                ket = cursor;
                try {//lab19
                    var v_10 = limit - cursor;
                    try {//lab20
                        if (!r_mark_ndAn())
                        {
                            throw BreakLab20();
                        }
                        throw BreakLab19();
                    } on BreakLab20 catch(_) {}
                    cursor = limit - v_10;
                    if (!r_mark_nU())
                    {
                        throw BreakLab18();
                    }
                } on BreakLab19 catch(_) {}
                try {//lab21
                    var v_11 = limit - cursor;
                    try {//lab22
                        if (!r_mark_sU())
                        {
                            throw BreakLab22();
                        }
                        bra = cursor;
                        slice_del();
                        var v_12 = limit - cursor;
                        try {//lab23
                            ket = cursor;
                            if (!r_mark_lAr())
                            {
                                cursor = limit - v_12;
                                throw BreakLab23();
                            }
                            bra = cursor;
                            slice_del();
                            if (!r_stem_suffix_chain_before_ki())
                            {
                                cursor = limit - v_12;
                                throw BreakLab23();
                            }
                        } on BreakLab23 catch(_) {}
                        throw BreakLab21();
                    } on BreakLab22 catch(_) {}
                    cursor = limit - v_11;
                    if (!r_mark_lArI())
                    {
                        throw BreakLab18();
                    }
                } on BreakLab21 catch(_) {}
                throw BreakLab0();
            } on BreakLab18 catch(_) {}
            cursor = limit - v_1;
            try {//lab24
                ket = cursor;
                if (!r_mark_DAn())
                {
                    throw BreakLab24();
                }
                bra = cursor;
                slice_del();
                var v_13 = limit - cursor;
                try {//lab25
                    ket = cursor;
                    try {//lab26
                        var v_14 = limit - cursor;
                        try {//lab27
                            if (!r_mark_possessives())
                            {
                                throw BreakLab27();
                            }
                            bra = cursor;
                            slice_del();
                            var v_15 = limit - cursor;
                            try {//lab28
                                ket = cursor;
                                if (!r_mark_lAr())
                                {
                                    cursor = limit - v_15;
                                    throw BreakLab28();
                                }
                                bra = cursor;
                                slice_del();
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_15;
                                    throw BreakLab28();
                                }
                            } on BreakLab28 catch(_) {}
                            throw BreakLab26();
                        } on BreakLab27 catch(_) {}
                        cursor = limit - v_14;
                        try {//lab29
                            if (!r_mark_lAr())
                            {
                                throw BreakLab29();
                            }
                            bra = cursor;
                            slice_del();
                            var v_16 = limit - cursor;
                            try {//lab30
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_16;
                                    throw BreakLab30();
                                }
                            } on BreakLab30 catch(_) {}
                            throw BreakLab26();
                        } on BreakLab29 catch(_) {}
                        cursor = limit - v_14;
                        if (!r_stem_suffix_chain_before_ki())
                        {
                            cursor = limit - v_13;
                            throw BreakLab25();
                        }
                    } on BreakLab26 catch(_) {}
                } on BreakLab25 catch(_) {}
                throw BreakLab0();
            } on BreakLab24 catch(_) {}
            cursor = limit - v_1;
            try {//lab31
                ket = cursor;
                try {//lab32
                    var v_17 = limit - cursor;
                    try {//lab33
                        if (!r_mark_nUn())
                        {
                            throw BreakLab33();
                        }
                        throw BreakLab32();
                    } on BreakLab33 catch(_) {}
                    cursor = limit - v_17;
                    if (!r_mark_ylA())
                    {
                        throw BreakLab31();
                    }
                } on BreakLab32 catch(_) {}
                bra = cursor;
                slice_del();
                var v_18 = limit - cursor;
                try {//lab34
                    try {//lab35
                        var v_19 = limit - cursor;
                        try {//lab36
                            ket = cursor;
                            if (!r_mark_lAr())
                            {
                                throw BreakLab36();
                            }
                            bra = cursor;
                            slice_del();
                            if (!r_stem_suffix_chain_before_ki())
                            {
                                throw BreakLab36();
                            }
                            throw BreakLab35();
                        } on BreakLab36 catch(_) {}
                        cursor = limit - v_19;
                        try {//lab37
                            ket = cursor;
                            try {//lab38
                                var v_20 = limit - cursor;
                                try {//lab39
                                    if (!r_mark_possessives())
                                    {
                                        throw BreakLab39();
                                    }
                                    throw BreakLab38();
                                } on BreakLab39 catch(_) {}
                                cursor = limit - v_20;
                                if (!r_mark_sU())
                                {
                                    throw BreakLab37();
                                }
                            } on BreakLab38 catch(_) {}
                            bra = cursor;
                            slice_del();
                            var v_21 = limit - cursor;
                            try {//lab40
                                ket = cursor;
                                if (!r_mark_lAr())
                                {
                                    cursor = limit - v_21;
                                    throw BreakLab40();
                                }
                                bra = cursor;
                                slice_del();
                                if (!r_stem_suffix_chain_before_ki())
                                {
                                    cursor = limit - v_21;
                                    throw BreakLab40();
                                }
                            } on BreakLab40 catch(_) {}
                            throw BreakLab35();
                        } on BreakLab37 catch(_) {}
                        cursor = limit - v_19;
                        if (!r_stem_suffix_chain_before_ki())
                        {
                            cursor = limit - v_18;
                            throw BreakLab34();
                        }
                    } on BreakLab35 catch(_) {}
                } on BreakLab34 catch(_) {}
                throw BreakLab0();
            } on BreakLab31 catch(_) {}
            cursor = limit - v_1;
            try {//lab41
                ket = cursor;
                if (!r_mark_lArI())
                {
                    throw BreakLab41();
                }
                bra = cursor;
                slice_del();
                throw BreakLab0();
            } on BreakLab41 catch(_) {}
            cursor = limit - v_1;
            try {//lab42
                if (!r_stem_suffix_chain_before_ki())
                {
                    throw BreakLab42();
                }
                throw BreakLab0();
            } on BreakLab42 catch(_) {}
            cursor = limit - v_1;
            try {//lab43
                ket = cursor;
                try {//lab44
                    var v_22 = limit - cursor;
                    try {//lab45
                        if (!r_mark_DA())
                        {
                            throw BreakLab45();
                        }
                        throw BreakLab44();
                    } on BreakLab45 catch(_) {}
                    cursor = limit - v_22;
                    try {//lab46
                        if (!r_mark_yU())
                        {
                            throw BreakLab46();
                        }
                        throw BreakLab44();
                    } on BreakLab46 catch(_) {}
                    cursor = limit - v_22;
                    if (!r_mark_yA())
                    {
                        throw BreakLab43();
                    }
                } on BreakLab44 catch(_) {}
                bra = cursor;
                slice_del();
                var v_23 = limit - cursor;
                try {//lab47
                    ket = cursor;
                    try {//lab48
                        var v_24 = limit - cursor;
                        try {//lab49
                            if (!r_mark_possessives())
                            {
                                throw BreakLab49();
                            }
                            bra = cursor;
                            slice_del();
                            var v_25 = limit - cursor;
                            try {//lab50
                                ket = cursor;
                                if (!r_mark_lAr())
                                {
                                    cursor = limit - v_25;
                                    throw BreakLab50();
                                }
                            } on BreakLab50 catch(_) {}
                            throw BreakLab48();
                        } on BreakLab49 catch(_) {}
                        cursor = limit - v_24;
                        if (!r_mark_lAr())
                        {
                            cursor = limit - v_23;
                            throw BreakLab47();
                        }
                    } on BreakLab48 catch(_) {}
                    bra = cursor;
                    slice_del();
                    ket = cursor;
                    if (!r_stem_suffix_chain_before_ki())
                    {
                        cursor = limit - v_23;
                        throw BreakLab47();
                    }
                } on BreakLab47 catch(_) {}
                throw BreakLab0();
            } on BreakLab43 catch(_) {}
            cursor = limit - v_1;
            ket = cursor;
            try {//lab51
                var v_26 = limit - cursor;
                try {//lab52
                    if (!r_mark_possessives())
                    {
                        throw BreakLab52();
                    }
                    throw BreakLab51();
                } on BreakLab52 catch(_) {}
                cursor = limit - v_26;
                if (!r_mark_sU())
                {
                    return false;
                }
            } on BreakLab51 catch(_) {}
            bra = cursor;
            slice_del();
            var v_27 = limit - cursor;
            try {//lab53
                ket = cursor;
                if (!r_mark_lAr())
                {
                    cursor = limit - v_27;
                    throw BreakLab53();
                }
                bra = cursor;
                slice_del();
                if (!r_stem_suffix_chain_before_ki())
                {
                    cursor = limit - v_27;
                    throw BreakLab53();
                }
            } on BreakLab53 catch(_) {}
        } on BreakLab0 catch(_) {}
        return true;
    }

    bool r_post_process_last_consonants() {
        var among_var;
        ket = cursor;
        among_var = find_among_b(a_23);
        if (among_var == 0)
        {
            return false;
        }
        bra = cursor;
        switch (among_var) {
            case 1:
                slice_from('p');
                break;
            case 2:
                slice_from('\u00E7');
                break;
            case 3:
                slice_from('t');
                break;
            case 4:
                slice_from('k');
                break;
        }
        return true;
    }

    bool r_append_U_to_stems_ending_with_d_or_g() {
        var v_1 = limit - cursor;
        try {//lab0
            var v_2 = limit - cursor;
            try {//lab1
                if (!(eq_s_b('d')))
                {
                    throw BreakLab1();
                }
                throw BreakLab0();
            } on BreakLab1 catch(_) {}
            cursor = limit - v_2;
            if (!(eq_s_b('g')))
            {
                return false;
            }
        } on BreakLab0 catch(_) {}
        cursor = limit - v_1;
        try {//lab2
            var v_3 = limit - cursor;
            try {//lab3
                var v_4 = limit - cursor;
                try { //golab4
                    while(true)                     {
                        var v_5 = limit - cursor;
                        try {//lab5
                            if (!(in_grouping_b(g_vowel, 97, 305)))
                            {
                                throw BreakLab5();
                            }
                            cursor = limit - v_5;
                            throw BreakLab4();
                        } on BreakLab5 catch(_) {}
                        cursor = limit - v_5;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab3();
                        }
                        cursor--;
                    }
                } on BreakLab4 catch(_) {}
                try {//lab6
                    var v_6 = limit - cursor;
                    try {//lab7
                        if (!(eq_s_b('a')))
                        {
                            throw BreakLab7();
                        }
                        throw BreakLab6();
                    } on BreakLab7 catch(_) {}
                    cursor = limit - v_6;
                    if (!(eq_s_b('\u0131')))
                    {
                        throw BreakLab3();
                    }
                } on BreakLab6 catch(_) {}
                cursor = limit - v_4;
                {
                    var c = cursor;
                    insert(cursor, cursor, '\u0131');
                    cursor = c;
                }
                throw BreakLab2();
            } on BreakLab3 catch(_) {}
            cursor = limit - v_3;
            try {//lab8
                var v_7 = limit - cursor;
                try { //golab9
                    while(true)                     {
                        var v_8 = limit - cursor;
                        try {//lab10
                            if (!(in_grouping_b(g_vowel, 97, 305)))
                            {
                                throw BreakLab10();
                            }
                            cursor = limit - v_8;
                            throw BreakLab9();
                        } on BreakLab10 catch(_) {}
                        cursor = limit - v_8;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab8();
                        }
                        cursor--;
                    }
                } on BreakLab9 catch(_) {}
                try {//lab11
                    var v_9 = limit - cursor;
                    try {//lab12
                        if (!(eq_s_b('e')))
                        {
                            throw BreakLab12();
                        }
                        throw BreakLab11();
                    } on BreakLab12 catch(_) {}
                    cursor = limit - v_9;
                    if (!(eq_s_b('i')))
                    {
                        throw BreakLab8();
                    }
                } on BreakLab11 catch(_) {}
                cursor = limit - v_7;
                {
                    var c = cursor;
                    insert(cursor, cursor, 'i');
                    cursor = c;
                }
                throw BreakLab2();
            } on BreakLab8 catch(_) {}
            cursor = limit - v_3;
            try {//lab13
                var v_10 = limit - cursor;
                try { //golab14
                    while(true)                     {
                        var v_11 = limit - cursor;
                        try {//lab15
                            if (!(in_grouping_b(g_vowel, 97, 305)))
                            {
                                throw BreakLab15();
                            }
                            cursor = limit - v_11;
                            throw BreakLab14();
                        } on BreakLab15 catch(_) {}
                        cursor = limit - v_11;
                        if (cursor <= limit_backward)
                        {
                            throw BreakLab13();
                        }
                        cursor--;
                    }
                } on BreakLab14 catch(_) {}
                try {//lab16
                    var v_12 = limit - cursor;
                    try {//lab17
                        if (!(eq_s_b('o')))
                        {
                            throw BreakLab17();
                        }
                        throw BreakLab16();
                    } on BreakLab17 catch(_) {}
                    cursor = limit - v_12;
                    if (!(eq_s_b('u')))
                    {
                        throw BreakLab13();
                    }
                } on BreakLab16 catch(_) {}
                cursor = limit - v_10;
                {
                    var c = cursor;
                    insert(cursor, cursor, 'u');
                    cursor = c;
                }
                throw BreakLab2();
            } on BreakLab13 catch(_) {}
            cursor = limit - v_3;
            var v_13 = limit - cursor;
            try { //golab18
                while(true)                 {
                    var v_14 = limit - cursor;
                    try {//lab19
                        if (!(in_grouping_b(g_vowel, 97, 305)))
                        {
                            throw BreakLab19();
                        }
                        cursor = limit - v_14;
                        throw BreakLab18();
                    } on BreakLab19 catch(_) {}
                    cursor = limit - v_14;
                    if (cursor <= limit_backward)
                    {
                        return false;
                    }
                    cursor--;
                }
            } on BreakLab18 catch(_) {}
            try {//lab20
                var v_15 = limit - cursor;
                try {//lab21
                    if (!(eq_s_b('\u00F6')))
                    {
                        throw BreakLab21();
                    }
                    throw BreakLab20();
                } on BreakLab21 catch(_) {}
                cursor = limit - v_15;
                if (!(eq_s_b('\u00FC')))
                {
                    return false;
                }
            } on BreakLab20 catch(_) {}
            cursor = limit - v_13;
            {
                var c = cursor;
                insert(cursor, cursor, '\u00FC');
                cursor = c;
            }
        } on BreakLab2 catch(_) {}
        return true;
    }

    bool r_is_reserved_word() {
        if (!(eq_s_b('ad')))
        {
            return false;
        }
        var v_1 = limit - cursor;
        try {//lab0
            if (!(eq_s_b('soy')))
            {
                cursor = limit - v_1;
                throw BreakLab0();
            }
        } on BreakLab0 catch(_) {}
        if (cursor > limit_backward)
        {
            return false;
        }
        return true;
    }

    bool r_more_than_one_syllable_word() {
        var v_1 = cursor;
        {
            var v_2 = 2;
            while(true)
            {
                var v_3 = cursor;
                try {//lab0
                    try { //golab1
                        while(true)                         {
                            try {//lab2
                                if (!(in_grouping(g_vowel, 97, 305)))
                                {
                                    throw BreakLab2();
                                }
                                throw BreakLab1();
                            } on BreakLab2 catch(_) {}
                            if (cursor >= limit)
                            {
                                throw BreakLab0();
                            }
                            cursor++;
                        }
                    } on BreakLab1 catch(_) {}
                    v_2--;
                    continue;
                } on BreakLab0 catch(_) {}
                cursor = v_3;
                break;
            }
            if (v_2 > 0)
            {
                return false;
            }
        }
        cursor = v_1;
        return true;
    }

    bool r_postlude() {
        limit_backward = cursor;
        cursor = limit;
        {
            var v_1 = limit - cursor;
            try {//lab0
                if (!r_is_reserved_word())
                {
                    throw BreakLab0();
                }
                return false;
            } on BreakLab0 catch(_) {}
            cursor = limit - v_1;
        }
        var v_2 = limit - cursor;
        r_append_U_to_stems_ending_with_d_or_g();
        cursor = limit - v_2;
        var v_3 = limit - cursor;
        r_post_process_last_consonants();
        cursor = limit - v_3;
        cursor = limit_backward;
        return true;
    }

    bool stem() {
        if (!r_more_than_one_syllable_word())
        {
            return false;
        }
        limit_backward = cursor;
        cursor = limit;
        var v_1 = limit - cursor;
        r_stem_nominal_verb_suffixes();
        cursor = limit - v_1;
        if (!(B_continue_stemming_noun_suffixes))
        {
            return false;
        }
        var v_2 = limit - cursor;
        r_stem_noun_suffixes();
        cursor = limit - v_2;
        cursor = limit_backward;
        if (!r_postlude())
        {
            return false;
        }
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
class BreakLab18{}
class BreakLab19{}
class BreakLab20{}
class BreakLab21{}
class BreakLab22{}
class BreakLab23{}
class BreakLab24{}
class BreakLab25{}
class BreakLab26{}
class BreakLab27{}
class BreakLab28{}
class BreakLab29{}
class BreakLab30{}
class BreakLab31{}
class BreakLab32{}
class BreakLab33{}
class BreakLab34{}
class BreakLab35{}
class BreakLab36{}
class BreakLab37{}
class BreakLab38{}
class BreakLab39{}
class BreakLab40{}
class BreakLab41{}
class BreakLab42{}
class BreakLab43{}
class BreakLab44{}
class BreakLab45{}
class BreakLab46{}
class BreakLab47{}
class BreakLab48{}
class BreakLab49{}
class BreakLab50{}
class BreakLab51{}
class BreakLab52{}
class BreakLab53{}
