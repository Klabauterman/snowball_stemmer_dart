// Generated by Snowball 2.1.0 - https://snowballstem.org/

import './../base_stemmer.dart';
import './../among.dart';

class yiddish_stemmer extends BaseStemmer {
    late final List<Among> a_0 = [
         Among('\u05D5\u05D5', -1, 1),
         Among('\u05D5\u05D9', -1, 2),
         Among('\u05D9\u05D9', -1, 3),
         Among('\u05DA', -1, 4),
         Among('\u05DD', -1, 5),
         Among('\u05DF', -1, 6),
         Among('\u05E3', -1, 7),
         Among('\u05E5', -1, 8)
    ];

    late final List<Among> a_1 = [
         Among('\u05D0\u05D3\u05D5\u05E8\u05DB', -1, 1),
         Among('\u05D0\u05D4\u05D9\u05E0', -1, 1),
         Among('\u05D0\u05D4\u05E2\u05E8', -1, 1),
         Among('\u05D0\u05D4\u05F2\u05DE', -1, 1),
         Among('\u05D0\u05D5\u05DE', -1, 1),
         Among('\u05D0\u05D5\u05E0\u05D8\u05E2\u05E8', -1, 1),
         Among('\u05D0\u05D9\u05D1\u05E2\u05E8', -1, 1),
         Among('\u05D0\u05E0', -1, 1),
         Among('\u05D0\u05E0\u05D8', 7, 1),
         Among('\u05D0\u05E0\u05D8\u05E7\u05E2\u05D2\u05E0', 8, 1),
         Among('\u05D0\u05E0\u05D9\u05D3\u05E2\u05E8', 7, 1),
         Among('\u05D0\u05E4', -1, 1),
         Among('\u05D0\u05E4\u05D9\u05E8', 11, 1),
         Among('\u05D0\u05E7\u05E2\u05D2\u05E0', -1, 1),
         Among('\u05D0\u05E8\u05D0\u05E4', -1, 1),
         Among('\u05D0\u05E8\u05D5\u05DE', -1, 1),
         Among('\u05D0\u05E8\u05D5\u05E0\u05D8\u05E2\u05E8', -1, 1),
         Among('\u05D0\u05E8\u05D9\u05D1\u05E2\u05E8', -1, 1),
         Among('\u05D0\u05E8\u05F1\u05E1', -1, 1),
         Among('\u05D0\u05E8\u05F1\u05E4', -1, 1),
         Among('\u05D0\u05E8\u05F2\u05E0', -1, 1),
         Among('\u05D0\u05F0\u05E2\u05E7', -1, 1),
         Among('\u05D0\u05F1\u05E1', -1, 1),
         Among('\u05D0\u05F1\u05E4', -1, 1),
         Among('\u05D0\u05F2\u05E0', -1, 1),
         Among('\u05D1\u05D0', -1, 1),
         Among('\u05D1\u05F2', -1, 1),
         Among('\u05D3\u05D5\u05E8\u05DB', -1, 1),
         Among('\u05D3\u05E2\u05E8', -1, 1),
         Among('\u05DE\u05D9\u05D8', -1, 1),
         Among('\u05E0\u05D0\u05DB', -1, 1),
         Among('\u05E4\u05D0\u05E8', -1, 1),
         Among('\u05E4\u05D0\u05E8\u05D1\u05F2', 31, 1),
         Among('\u05E4\u05D0\u05E8\u05F1\u05E1', 31, 1),
         Among('\u05E4\u05D5\u05E0\u05D0\u05E0\u05D3\u05E2\u05E8', -1, 1),
         Among('\u05E6\u05D5', -1, 1),
         Among('\u05E6\u05D5\u05D6\u05D0\u05DE\u05E2\u05E0', 35, 1),
         Among('\u05E6\u05D5\u05E0\u05F1\u05E4', 35, 1),
         Among('\u05E6\u05D5\u05E8\u05D9\u05E7', 35, 1),
         Among('\u05E6\u05E2', -1, 1)
    ];

    late final List<Among> a_2 = [
         Among('\u05D3\u05D6\u05E9', -1, -1),
         Among('\u05E9\u05D8\u05E8', -1, -1),
         Among('\u05E9\u05D8\u05E9', -1, -1),
         Among('\u05E9\u05E4\u05E8', -1, -1)
    ];

    late final List<Among> a_3 = [
         Among('\u05E7\u05DC\u05D9\u05D1', -1, 9),
         Among('\u05E8\u05D9\u05D1', -1, 10),
         Among('\u05D8\u05E8\u05D9\u05D1', 1, 7),
         Among('\u05E9\u05E8\u05D9\u05D1', 1, 15),
         Among('\u05D4\u05F1\u05D1', -1, 23),
         Among('\u05E9\u05F0\u05D9\u05D2', -1, 12),
         Among('\u05D2\u05D0\u05E0\u05D2', -1, 1),
         Among('\u05D6\u05D5\u05E0\u05D2', -1, 18),
         Among('\u05E9\u05DC\u05D5\u05E0\u05D2', -1, 21),
         Among('\u05E6\u05F0\u05D5\u05E0\u05D2', -1, 20),
         Among('\u05D1\u05F1\u05D2', -1, 22),
         Among('\u05D1\u05D5\u05E0\u05D3', -1, 16),
         Among('\u05F0\u05D9\u05D6', -1, 6),
         Among('\u05D1\u05D9\u05D8', -1, 4),
         Among('\u05DC\u05D9\u05D8', -1, 8),
         Among('\u05DE\u05D9\u05D8', -1, 3),
         Among('\u05E9\u05E0\u05D9\u05D8', -1, 14),
         Among('\u05E0\u05D5\u05DE', -1, 2),
         Among('\u05E9\u05D8\u05D0\u05E0', -1, 25),
         Among('\u05D1\u05D9\u05E1', -1, 5),
         Among('\u05E9\u05DE\u05D9\u05E1', -1, 13),
         Among('\u05E8\u05D9\u05E1', -1, 11),
         Among('\u05D8\u05E8\u05D5\u05E0\u05E7', -1, 19),
         Among('\u05E4\u05D0\u05E8\u05DC\u05F1\u05E8', -1, 24),
         Among('\u05E9\u05F0\u05F1\u05E8', -1, 26),
         Among('\u05F0\u05D5\u05D8\u05E9', -1, 17)
    ];

    late final List<Among> a_4 = [
         Among('\u05D5\u05E0\u05D2', -1, 1),
         Among('\u05E1\u05D8\u05D5', -1, 1),
         Among('\u05D8', -1, 1),
         Among('\u05D1\u05E8\u05D0\u05DB\u05D8', 2, 31),
         Among('\u05E1\u05D8', 2, 1),
         Among('\u05D9\u05E1\u05D8', 4, 33),
         Among('\u05E2\u05D8', 2, 1),
         Among('\u05E9\u05D0\u05E4\u05D8', 2, 1),
         Among('\u05D4\u05F2\u05D8', 2, 1),
         Among('\u05E7\u05F2\u05D8', 2, 1),
         Among('\u05D9\u05E7\u05F2\u05D8', 9, 1),
         Among('\u05DC\u05E2\u05DB', -1, 1),
         Among('\u05E2\u05DC\u05E2\u05DB', 11, 1),
         Among('\u05D9\u05D6\u05DE', -1, 1),
         Among('\u05D9\u05DE', -1, 1),
         Among('\u05E2\u05DE', -1, 1),
         Among('\u05E2\u05E0\u05E2\u05DE', 15, 3),
         Among('\u05D8\u05E2\u05E0\u05E2\u05DE', 16, 4),
         Among('\u05E0', -1, 1),
         Among('\u05E7\u05DC\u05D9\u05D1\u05E0', 18, 14),
         Among('\u05E8\u05D9\u05D1\u05E0', 18, 15),
         Among('\u05D8\u05E8\u05D9\u05D1\u05E0', 20, 12),
         Among('\u05E9\u05E8\u05D9\u05D1\u05E0', 20, 7),
         Among('\u05D4\u05F1\u05D1\u05E0', 18, 27),
         Among('\u05E9\u05F0\u05D9\u05D2\u05E0', 18, 17),
         Among('\u05D6\u05D5\u05E0\u05D2\u05E0', 18, 22),
         Among('\u05E9\u05DC\u05D5\u05E0\u05D2\u05E0', 18, 25),
         Among('\u05E6\u05F0\u05D5\u05E0\u05D2\u05E0', 18, 24),
         Among('\u05D1\u05F1\u05D2\u05E0', 18, 26),
         Among('\u05D1\u05D5\u05E0\u05D3\u05E0', 18, 20),
         Among('\u05F0\u05D9\u05D6\u05E0', 18, 11),
         Among('\u05D8\u05E0', 18, 4),
         Among('GE\u05D1\u05D9\u05D8\u05E0', 31, 9),
         Among('GE\u05DC\u05D9\u05D8\u05E0', 31, 13),
         Among('GE\u05DE\u05D9\u05D8\u05E0', 31, 8),
         Among('\u05E9\u05E0\u05D9\u05D8\u05E0', 31, 19),
         Among('\u05E1\u05D8\u05E0', 31, 1),
         Among('\u05D9\u05E1\u05D8\u05E0', 36, 1),
         Among('\u05E2\u05D8\u05E0', 31, 1),
         Among('GE\u05D1\u05D9\u05E1\u05E0', 18, 10),
         Among('\u05E9\u05DE\u05D9\u05E1\u05E0', 18, 18),
         Among('GE\u05E8\u05D9\u05E1\u05E0', 18, 16),
         Among('\u05E2\u05E0', 18, 1),
         Among('\u05D2\u05D0\u05E0\u05D2\u05E2\u05E0', 42, 5),
         Among('\u05E2\u05DC\u05E2\u05E0', 42, 1),
         Among('\u05E0\u05D5\u05DE\u05E2\u05E0', 42, 6),
         Among('\u05D9\u05D6\u05DE\u05E2\u05E0', 42, 1),
         Among('\u05E9\u05D8\u05D0\u05E0\u05E2\u05E0', 42, 29),
         Among('\u05D8\u05E8\u05D5\u05E0\u05E7\u05E0', 18, 23),
         Among('\u05E4\u05D0\u05E8\u05DC\u05F1\u05E8\u05E0', 18, 28),
         Among('\u05E9\u05F0\u05F1\u05E8\u05E0', 18, 30),
         Among('\u05F0\u05D5\u05D8\u05E9\u05E0', 18, 21),
         Among('\u05D2\u05F2\u05E0', 18, 5),
         Among('\u05E1', -1, 1),
         Among('\u05D8\u05E1', 53, 4),
         Among('\u05E2\u05D8\u05E1', 54, 1),
         Among('\u05E0\u05E1', 53, 1),
         Among('\u05D8\u05E0\u05E1', 56, 4),
         Among('\u05E2\u05E0\u05E1', 56, 3),
         Among('\u05E2\u05E1', 53, 1),
         Among('\u05D9\u05E2\u05E1', 59, 2),
         Among('\u05E2\u05DC\u05E2\u05E1', 59, 1),
         Among('\u05E2\u05E8\u05E1', 53, 1),
         Among('\u05E2\u05E0\u05E2\u05E8\u05E1', 62, 1),
         Among('\u05E2', -1, 1),
         Among('\u05D8\u05E2', 64, 4),
         Among('\u05E1\u05D8\u05E2', 65, 1),
         Among('\u05E2\u05D8\u05E2', 65, 1),
         Among('\u05D9\u05E2', 64, -1),
         Among('\u05E2\u05DC\u05E2', 64, 1),
         Among('\u05E2\u05E0\u05E2', 64, 3),
         Among('\u05D8\u05E2\u05E0\u05E2', 70, 4),
         Among('\u05E2\u05E8', -1, 1),
         Among('\u05D8\u05E2\u05E8', 72, 4),
         Among('\u05E1\u05D8\u05E2\u05E8', 73, 1),
         Among('\u05E2\u05D8\u05E2\u05E8', 73, 1),
         Among('\u05E2\u05E0\u05E2\u05E8', 72, 3),
         Among('\u05D8\u05E2\u05E0\u05E2\u05E8', 76, 4),
         Among('\u05D5\u05EA', -1, 32)
    ];

    late final List<Among> a_5 = [
         Among('\u05D5\u05E0\u05D2', -1, 1),
         Among('\u05E9\u05D0\u05E4\u05D8', -1, 1),
         Among('\u05D4\u05F2\u05D8', -1, 1),
         Among('\u05E7\u05F2\u05D8', -1, 1),
         Among('\u05D9\u05E7\u05F2\u05D8', 3, 1),
         Among('\u05DC', -1, 2)
    ];

    late final List<Among> a_6 = [
         Among('\u05D9\u05D2', -1, 1),
         Among('\u05D9\u05E7', -1, 1),
         Among('\u05D3\u05D9\u05E7', 1, 1),
         Among('\u05E0\u05D3\u05D9\u05E7', 2, 1),
         Among('\u05E2\u05E0\u05D3\u05D9\u05E7', 3, 1),
         Among('\u05D1\u05DC\u05D9\u05E7', 1, -1),
         Among('\u05D2\u05DC\u05D9\u05E7', 1, -1),
         Among('\u05E0\u05D9\u05E7', 1, 1),
         Among('\u05D9\u05E9', -1, 1)
    ];

    static final List<int> g_niked = [255, 155, 6 ];

    static final List<int> g_vowel = [33, 2, 4, 0, 6 ];

    static final List<int> g_consonant = [239, 254, 253, 131 ];

    late int I_x;
    late int I_p1;


    bool r_prelude() {
        var among_var;
        var v_1 = cursor;
        try {//lab0
            while(true)
            {
                var v_2 = cursor;
                try {//lab1
                    try { //golab2
                        while(true)                         {
                            var v_3 = cursor;
                            try {//lab3
                                bra = cursor;
                                among_var = find_among(a_0);
                                if (among_var == 0)
                                {
                                    throw BreakLab3();
                                }
                                ket = cursor;
                                switch (among_var) {
                                    case 1:
                                        {
                                            var v_4 = cursor;
                                            try {//lab4
                                                if (!(eq_s('\u05BC')))
                                                {
                                                    throw BreakLab4();
                                                }
                                                throw BreakLab3();
                                            } on BreakLab4 catch(_) {}
                                            cursor = v_4;
                                        }
                                        slice_from('\u05F0');
                                        break;
                                    case 2:
                                        {
                                            var v_5 = cursor;
                                            try {//lab5
                                                if (!(eq_s('\u05B4')))
                                                {
                                                    throw BreakLab5();
                                                }
                                                throw BreakLab3();
                                            } on BreakLab5 catch(_) {}
                                            cursor = v_5;
                                        }
                                        slice_from('\u05F1');
                                        break;
                                    case 3:
                                        {
                                            var v_6 = cursor;
                                            try {//lab6
                                                if (!(eq_s('\u05B4')))
                                                {
                                                    throw BreakLab6();
                                                }
                                                throw BreakLab3();
                                            } on BreakLab6 catch(_) {}
                                            cursor = v_6;
                                        }
                                        slice_from('\u05F2');
                                        break;
                                    case 4:
                                        slice_from('\u05DB');
                                        break;
                                    case 5:
                                        slice_from('\u05DE');
                                        break;
                                    case 6:
                                        slice_from('\u05E0');
                                        break;
                                    case 7:
                                        slice_from('\u05E4');
                                        break;
                                    case 8:
                                        slice_from('\u05E6');
                                        break;
                                }
                                cursor = v_3;
                                throw BreakLab2();
                            } on BreakLab3 catch(_) {}
                            cursor = v_3;
                            if (cursor >= limit)
                            {
                                throw BreakLab1();
                            }
                            cursor++;
                        }
                    } on BreakLab2 catch(_) {}
                    continue;
                } on BreakLab1 catch(_) {}
                cursor = v_2;
                break;
            }
        } on BreakLab0 catch(_) {}
        cursor = v_1;
        var v_7 = cursor;
        try {//lab7
            while(true)
            {
                var v_8 = cursor;
                try {//lab8
                    try { //golab9
                        while(true)                         {
                            var v_9 = cursor;
                            try {//lab10
                                bra = cursor;
                                if (!(in_grouping(g_niked, 1456, 1474)))
                                {
                                    throw BreakLab10();
                                }
                                ket = cursor;
                                slice_del();
                                cursor = v_9;
                                throw BreakLab9();
                            } on BreakLab10 catch(_) {}
                            cursor = v_9;
                            if (cursor >= limit)
                            {
                                throw BreakLab8();
                            }
                            cursor++;
                        }
                    } on BreakLab9 catch(_) {}
                    continue;
                } on BreakLab8 catch(_) {}
                cursor = v_8;
                break;
            }
        } on BreakLab7 catch(_) {}
        cursor = v_7;
        return true;
    }

    bool r_mark_regions() {
        I_p1 = limit;
        var v_1 = cursor;
        try {//lab0
            bra = cursor;
            if (!(eq_s('\u05D2\u05E2')))
            {
                cursor = v_1;
                throw BreakLab0();
            }
            ket = cursor;
            {
                var v_2 = cursor;
                try {//lab1
                    try {//lab2
                        var v_3 = cursor;
                        try {//lab3
                            if (!(eq_s('\u05DC\u05D8')))
                            {
                                throw BreakLab3();
                            }
                            throw BreakLab2();
                        } on BreakLab3 catch(_) {}
                        cursor = v_3;
                        if (!(eq_s('\u05D1\u05E0')))
                        {
                            throw BreakLab1();
                        }
                    } on BreakLab2 catch(_) {}
                    cursor = v_1;
                    throw BreakLab0();
                } on BreakLab1 catch(_) {}
                cursor = v_2;
            }
            slice_from('GE');
        } on BreakLab0 catch(_) {}
        var v_4 = cursor;
        try {//lab4
            if (find_among(a_1) == 0)
            {
                cursor = v_4;
                throw BreakLab4();
            }
            try {//lab5
                var v_5 = cursor;
                try {//lab6
                    var v_6 = cursor;
                    try {//lab7
                        var v_7 = cursor;
                        try {//lab8
                            if (!(eq_s('\u05E6\u05D5\u05D2\u05E0')))
                            {
                                throw BreakLab8();
                            }
                            throw BreakLab7();
                        } on BreakLab8 catch(_) {}
                        cursor = v_7;
                        try {//lab9
                            if (!(eq_s('\u05E6\u05D5\u05E7\u05D8')))
                            {
                                throw BreakLab9();
                            }
                            throw BreakLab7();
                        } on BreakLab9 catch(_) {}
                        cursor = v_7;
                        if (!(eq_s('\u05E6\u05D5\u05E7\u05E0')))
                        {
                            throw BreakLab6();
                        }
                    } on BreakLab7 catch(_) {}
                    if (cursor < limit)
                    {
                        throw BreakLab6();
                    }
                    cursor = v_6;
                    throw BreakLab5();
                } on BreakLab6 catch(_) {}
                cursor = v_5;
                try {//lab10
                    var v_8 = cursor;
                    if (!(eq_s('\u05D2\u05E2\u05D1\u05E0')))
                    {
                        throw BreakLab10();
                    }
                    cursor = v_8;
                    throw BreakLab5();
                } on BreakLab10 catch(_) {}
                cursor = v_5;
                try {//lab11
                    bra = cursor;
                    if (!(eq_s('\u05D2\u05E2')))
                    {
                        throw BreakLab11();
                    }
                    ket = cursor;
                    slice_from('GE');
                    throw BreakLab5();
                } on BreakLab11 catch(_) {}
                cursor = v_5;
                bra = cursor;
                if (!(eq_s('\u05E6\u05D5')))
                {
                    cursor = v_4;
                    throw BreakLab4();
                }
                ket = cursor;
                slice_from('TSU');
            } on BreakLab5 catch(_) {}
        } on BreakLab4 catch(_) {}
        var v_9 = cursor;
        {
            var c = cursor + 3;
            if (c > limit)
            {
                return false;
            }
            cursor = c;
        }
        I_x = cursor;
        cursor = v_9;
        var v_10 = cursor;
        try {//lab12
            if (find_among(a_2) == 0)
            {
                cursor = v_10;
                throw BreakLab12();
            }
        } on BreakLab12 catch(_) {}
        {
            var v_11 = cursor;
            try {//lab13
                if (!(in_grouping(g_consonant, 1489, 1520)))
                {
                    throw BreakLab13();
                }
                if (!(in_grouping(g_consonant, 1489, 1520)))
                {
                    throw BreakLab13();
                }
                if (!(in_grouping(g_consonant, 1489, 1520)))
                {
                    throw BreakLab13();
                }
                I_p1 = cursor;
                return false;
            } on BreakLab13 catch(_) {}
            cursor = v_11;
        }
        try { //golab14
            while(true)             {
                var v_12 = cursor;
                try {//lab15
                    if (!(in_grouping(g_vowel, 1488, 1522)))
                    {
                        throw BreakLab15();
                    }
                    cursor = v_12;
                    throw BreakLab14();
                } on BreakLab15 catch(_) {}
                cursor = v_12;
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
        } on BreakLab14 catch(_) {}
        while(true)
        {
            try {//lab16
                if (!(in_grouping(g_vowel, 1488, 1522)))
                {
                    throw BreakLab16();
                }
                continue;
            } on BreakLab16 catch(_) {}
            break;
        }
        I_p1 = cursor;
        try {//lab17
            if (!(I_p1 < I_x))
            {
                throw BreakLab17();
            }
            I_p1 = I_x;
        } on BreakLab17 catch(_) {}
        return true;
    }

    bool r_R1() {
        if (!(I_p1 <= cursor))
        {
            return false;
        }
        return true;
    }

    bool r_R1plus3() {
        if (!(I_p1 <= (cursor + 3)))
        {
            return false;
        }
        return true;
    }

    bool r_standard_suffix() {
        var among_var;
        var v_1 = limit - cursor;
        try {//lab0
            ket = cursor;
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                throw BreakLab0();
            }
            bra = cursor;
            switch (among_var) {
                case 1:
                    if (!r_R1())
                    {
                        throw BreakLab0();
                    }
                    slice_del();
                    break;
                case 2:
                    if (!r_R1())
                    {
                        throw BreakLab0();
                    }
                    slice_from('\u05D9\u05E2');
                    break;
                case 3:
                    if (!r_R1())
                    {
                        throw BreakLab0();
                    }
                    slice_del();
                    ket = cursor;
                    among_var = find_among_b(a_3);
                    if (among_var == 0)
                    {
                        throw BreakLab0();
                    }
                    bra = cursor;
                    switch (among_var) {
                        case 1:
                            slice_from('\u05D2\u05F2');
                            break;
                        case 2:
                            slice_from('\u05E0\u05E2\u05DE');
                            break;
                        case 3:
                            slice_from('\u05DE\u05F2\u05D3');
                            break;
                        case 4:
                            slice_from('\u05D1\u05F2\u05D8');
                            break;
                        case 5:
                            slice_from('\u05D1\u05F2\u05E1');
                            break;
                        case 6:
                            slice_from('\u05F0\u05F2\u05D6');
                            break;
                        case 7:
                            slice_from('\u05D8\u05E8\u05F2\u05D1');
                            break;
                        case 8:
                            slice_from('\u05DC\u05F2\u05D8');
                            break;
                        case 9:
                            slice_from('\u05E7\u05DC\u05F2\u05D1');
                            break;
                        case 10:
                            slice_from('\u05E8\u05F2\u05D1');
                            break;
                        case 11:
                            slice_from('\u05E8\u05F2\u05E1');
                            break;
                        case 12:
                            slice_from('\u05E9\u05F0\u05F2\u05D2');
                            break;
                        case 13:
                            slice_from('\u05E9\u05DE\u05F2\u05E1');
                            break;
                        case 14:
                            slice_from('\u05E9\u05E0\u05F2\u05D3');
                            break;
                        case 15:
                            slice_from('\u05E9\u05E8\u05F2\u05D1');
                            break;
                        case 16:
                            slice_from('\u05D1\u05D9\u05E0\u05D3');
                            break;
                        case 17:
                            slice_from('\u05F0\u05D9\u05D8\u05E9');
                            break;
                        case 18:
                            slice_from('\u05D6\u05D9\u05E0\u05D2');
                            break;
                        case 19:
                            slice_from('\u05D8\u05E8\u05D9\u05E0\u05E7');
                            break;
                        case 20:
                            slice_from('\u05E6\u05F0\u05D9\u05E0\u05D2');
                            break;
                        case 21:
                            slice_from('\u05E9\u05DC\u05D9\u05E0\u05D2');
                            break;
                        case 22:
                            slice_from('\u05D1\u05F2\u05D2');
                            break;
                        case 23:
                            slice_from('\u05D4\u05F2\u05D1');
                            break;
                        case 24:
                            slice_from('\u05E4\u05D0\u05E8\u05DC\u05D9\u05E8');
                            break;
                        case 25:
                            slice_from('\u05E9\u05D8\u05F2');
                            break;
                        case 26:
                            slice_from('\u05E9\u05F0\u05E2\u05E8');
                            break;
                    }
                    break;
                case 4:
                    try {//lab1
                        var v_2 = limit - cursor;
                        try {//lab2
                            if (!r_R1())
                            {
                                throw BreakLab2();
                            }
                            slice_del();
                            throw BreakLab1();
                        } on BreakLab2 catch(_) {}
                        cursor = limit - v_2;
                        slice_from('\u05D8');
                    } on BreakLab1 catch(_) {}
                    ket = cursor;
                    if (!(eq_s_b('\u05D1\u05E8\u05D0\u05DB')))
                    {
                        throw BreakLab0();
                    }
                    var v_3 = limit - cursor;
                    try {//lab3
                        if (!(eq_s_b('\u05D2\u05E2')))
                        {
                            cursor = limit - v_3;
                            throw BreakLab3();
                        }
                    } on BreakLab3 catch(_) {}
                    bra = cursor;
                    slice_from('\u05D1\u05E8\u05E2\u05E0\u05D2');
                    break;
                case 5:
                    slice_from('\u05D2\u05F2');
                    break;
                case 6:
                    slice_from('\u05E0\u05E2\u05DE');
                    break;
                case 7:
                    slice_from('\u05E9\u05E8\u05F2\u05D1');
                    break;
                case 8:
                    slice_from('\u05DE\u05F2\u05D3');
                    break;
                case 9:
                    slice_from('\u05D1\u05F2\u05D8');
                    break;
                case 10:
                    slice_from('\u05D1\u05F2\u05E1');
                    break;
                case 11:
                    slice_from('\u05F0\u05F2\u05D6');
                    break;
                case 12:
                    slice_from('\u05D8\u05E8\u05F2\u05D1');
                    break;
                case 13:
                    slice_from('\u05DC\u05F2\u05D8');
                    break;
                case 14:
                    slice_from('\u05E7\u05DC\u05F2\u05D1');
                    break;
                case 15:
                    slice_from('\u05E8\u05F2\u05D1');
                    break;
                case 16:
                    slice_from('\u05E8\u05F2\u05E1');
                    break;
                case 17:
                    slice_from('\u05E9\u05F0\u05F2\u05D2');
                    break;
                case 18:
                    slice_from('\u05E9\u05DE\u05F2\u05E1');
                    break;
                case 19:
                    slice_from('\u05E9\u05E0\u05F2\u05D3');
                    break;
                case 20:
                    slice_from('\u05D1\u05D9\u05E0\u05D3');
                    break;
                case 21:
                    slice_from('\u05F0\u05D9\u05D8\u05E9');
                    break;
                case 22:
                    slice_from('\u05D6\u05D9\u05E0\u05D2');
                    break;
                case 23:
                    slice_from('\u05D8\u05E8\u05D9\u05E0\u05E7');
                    break;
                case 24:
                    slice_from('\u05E6\u05F0\u05D9\u05E0\u05D2');
                    break;
                case 25:
                    slice_from('\u05E9\u05DC\u05D9\u05E0\u05D2');
                    break;
                case 26:
                    slice_from('\u05D1\u05F2\u05D2');
                    break;
                case 27:
                    slice_from('\u05D4\u05F2\u05D1');
                    break;
                case 28:
                    slice_from('\u05E4\u05D0\u05E8\u05DC\u05D9\u05E8');
                    break;
                case 29:
                    slice_from('\u05E9\u05D8\u05F2');
                    break;
                case 30:
                    slice_from('\u05E9\u05F0\u05E2\u05E8');
                    break;
                case 31:
                    slice_from('\u05D1\u05E8\u05E2\u05E0\u05D2');
                    break;
                case 32:
                    if (!r_R1())
                    {
                        throw BreakLab0();
                    }
                    slice_from('\u05D4');
                    break;
                case 33:
                    try {//lab4
                        var v_4 = limit - cursor;
                        try {//lab5
                            try {//lab6
                                var v_5 = limit - cursor;
                                try {//lab7
                                    if (!(eq_s_b('\u05D2')))
                                    {
                                        throw BreakLab7();
                                    }
                                    throw BreakLab6();
                                } on BreakLab7 catch(_) {}
                                cursor = limit - v_5;
                                if (!(eq_s_b('\u05E9')))
                                {
                                    throw BreakLab5();
                                }
                            } on BreakLab6 catch(_) {}
                            var v_6 = limit - cursor;
                            try {//lab8
                                if (!r_R1plus3())
                                {
                                    cursor = limit - v_6;
                                    throw BreakLab8();
                                }
                                slice_from('\u05D9\u05E1');
                            } on BreakLab8 catch(_) {}
                            throw BreakLab4();
                        } on BreakLab5 catch(_) {}
                        cursor = limit - v_4;
                        if (!r_R1())
                        {
                            throw BreakLab0();
                        }
                        slice_del();
                    } on BreakLab4 catch(_) {}
                    break;
            }
        } on BreakLab0 catch(_) {}
        cursor = limit - v_1;
        var v_7 = limit - cursor;
        try {//lab9
            ket = cursor;
            among_var = find_among_b(a_5);
            if (among_var == 0)
            {
                throw BreakLab9();
            }
            bra = cursor;
            switch (among_var) {
                case 1:
                    if (!r_R1())
                    {
                        throw BreakLab9();
                    }
                    slice_del();
                    break;
                case 2:
                    if (!r_R1())
                    {
                        throw BreakLab9();
                    }
                    if (!(in_grouping_b(g_consonant, 1489, 1520)))
                    {
                        throw BreakLab9();
                    }
                    slice_del();
                    break;
            }
        } on BreakLab9 catch(_) {}
        cursor = limit - v_7;
        var v_8 = limit - cursor;
        try {//lab10
            ket = cursor;
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                throw BreakLab10();
            }
            bra = cursor;
            switch (among_var) {
                case 1:
                    if (!r_R1())
                    {
                        throw BreakLab10();
                    }
                    slice_del();
                    break;
            }
        } on BreakLab10 catch(_) {}
        cursor = limit - v_8;
        var v_9 = limit - cursor;
        try {//lab11
            while(true)
            {
                var v_10 = limit - cursor;
                try {//lab12
                    try { //golab13
                        while(true)                         {
                            var v_11 = limit - cursor;
                            try {//lab14
                                ket = cursor;
                                try {//lab15
                                    var v_12 = limit - cursor;
                                    try {//lab16
                                        if (!(eq_s_b('GE')))
                                        {
                                            throw BreakLab16();
                                        }
                                        throw BreakLab15();
                                    } on BreakLab16 catch(_) {}
                                    cursor = limit - v_12;
                                    if (!(eq_s_b('TSU')))
                                    {
                                        throw BreakLab14();
                                    }
                                } on BreakLab15 catch(_) {}
                                bra = cursor;
                                slice_del();
                                cursor = limit - v_11;
                                throw BreakLab13();
                            } on BreakLab14 catch(_) {}
                            cursor = limit - v_11;
                            if (cursor <= limit_backward)
                            {
                                throw BreakLab12();
                            }
                            cursor--;
                        }
                    } on BreakLab13 catch(_) {}
                    continue;
                } on BreakLab12 catch(_) {}
                cursor = limit - v_10;
                break;
            }
        } on BreakLab11 catch(_) {}
        cursor = limit - v_9;
        return true;
    }

    bool stem() {
        r_prelude();
        var v_2 = cursor;
        r_mark_regions();
        cursor = v_2;
        limit_backward = cursor;
        cursor = limit;
        r_standard_suffix();
        cursor = limit_backward;
        return true;
    }
}

class BreakLab0{}
class BreakLab1{}
class BreakLab2{}
class BreakLab3{}
class BreakLab4{}
class BreakLab5{}
class BreakLab6{}
class BreakLab7{}
class BreakLab8{}
class BreakLab9{}
class BreakLab10{}
class BreakLab11{}
class BreakLab12{}
class BreakLab13{}
class BreakLab14{}
class BreakLab15{}
class BreakLab16{}
class BreakLab17{}
